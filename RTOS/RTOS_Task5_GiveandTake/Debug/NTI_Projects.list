
NTI_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003564  08003564  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003564  08003564  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003564  08003564  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800356c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dcc  20000008  08003574  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dd4  08003574  00021dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f64  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001303  00000000  00000000  00027f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005a8  00000000  00000000  000292a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000500  00000000  00000000  00029848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000156b  00000000  00000000  00029d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004ecb  00000000  00000000  0002b2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0001208e  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004220c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b4  00000000  00000000  00042288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003528 	.word	0x08003528

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	08003528 	.word	0x08003528

080001e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f103 0208 	add.w	r2, r3, #8
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f04f 32ff 	mov.w	r2, #4294967295
 80001f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f103 0208 	add.w	r2, r3, #8
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0208 	add.w	r2, r3, #8
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800023a:	b480      	push	{r7}
 800023c:	b085      	sub	sp, #20
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000250:	d103      	bne.n	800025a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	691b      	ldr	r3, [r3, #16]
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	e00c      	b.n	8000274 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3308      	adds	r3, #8
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e002      	b.n	8000268 <vListInsert+0x2e>
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	429a      	cmp	r2, r3
 8000272:	d2f6      	bcs.n	8000262 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	1c5a      	adds	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	601a      	str	r2, [r3, #0]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	6892      	ldr	r2, [r2, #8]
 80002c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	6852      	ldr	r2, [r2, #4]
 80002cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d103      	bne.n	80002e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	689a      	ldr	r2, [r3, #8]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	1e5a      	subs	r2, r3, #1
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	681b      	ldr	r3, [r3, #0]
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b087      	sub	sp, #28
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d109      	bne.n	800032c <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800031c:	f383 8811 	msr	BASEPRI, r3
 8000320:	f3bf 8f6f 	isb	sy
 8000324:	f3bf 8f4f 	dsb	sy
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	e7fe      	b.n	800032a <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d063      	beq.n	80003fa <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000336:	2b00      	cmp	r3, #0
 8000338:	d05f      	beq.n	80003fa <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800033e:	693b      	ldr	r3, [r7, #16]
 8000340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000342:	2000      	movs	r0, #0
 8000344:	fba2 1203 	umull	r1, r2, r2, r3
 8000348:	f04f 0300 	mov.w	r3, #0
 800034c:	f04f 0400 	mov.w	r4, #0
 8000350:	0013      	movs	r3, r2
 8000352:	2400      	movs	r4, #0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d000      	beq.n	800035a <xQueueGenericReset+0x5a>
 8000358:	2001      	movs	r0, #1
 800035a:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14c      	bne.n	80003fa <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8000360:	f002 fa1e 	bl	80027a0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000364:	693b      	ldr	r3, [r7, #16]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800036c:	6939      	ldr	r1, [r7, #16]
 800036e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000370:	fb01 f303 	mul.w	r3, r1, r3
 8000374:	441a      	add	r2, r3
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	2200      	movs	r2, #0
 800037e:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	693b      	ldr	r3, [r7, #16]
 800038e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000390:	3b01      	subs	r3, #1
 8000392:	6939      	ldr	r1, [r7, #16]
 8000394:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000396:	fb01 f303 	mul.w	r3, r1, r3
 800039a:	441a      	add	r2, r3
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	22ff      	movs	r2, #255	; 0xff
 80003a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80003a8:	693b      	ldr	r3, [r7, #16]
 80003aa:	22ff      	movs	r2, #255	; 0xff
 80003ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d114      	bne.n	80003e0 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	691b      	ldr	r3, [r3, #16]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d01a      	beq.n	80003f4 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	3310      	adds	r3, #16
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 f99e 	bl	8001704 <xTaskRemoveFromEventList>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d012      	beq.n	80003f4 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <xQueueGenericReset+0x124>)
 80003d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	f3bf 8f4f 	dsb	sy
 80003da:	f3bf 8f6f 	isb	sy
 80003de:	e009      	b.n	80003f4 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	3310      	adds	r3, #16
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff fefb 	bl	80001e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	3324      	adds	r3, #36	; 0x24
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff fef6 	bl	80001e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80003f4:	f002 fa02 	bl	80027fc <vPortExitCritical>
 80003f8:	e001      	b.n	80003fe <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d109      	bne.n	8000418 <xQueueGenericReset+0x118>
 8000404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000408:	f383 8811 	msr	BASEPRI, r3
 800040c:	f3bf 8f6f 	isb	sy
 8000410:	f3bf 8f4f 	dsb	sy
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	e7fe      	b.n	8000416 <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000418:	697b      	ldr	r3, [r7, #20]
}
 800041a:	4618      	mov	r0, r3
 800041c:	371c      	adds	r7, #28
 800041e:	46bd      	mov	sp, r7
 8000420:	bd90      	pop	{r4, r7, pc}
 8000422:	bf00      	nop
 8000424:	e000ed04 	.word	0xe000ed04

08000428 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b08b      	sub	sp, #44	; 0x2c
 800042c:	af02      	add	r7, sp, #8
 800042e:	60f8      	str	r0, [r7, #12]
 8000430:	60b9      	str	r1, [r7, #8]
 8000432:	4613      	mov	r3, r2
 8000434:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d034      	beq.n	80004aa <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000440:	2000      	movs	r0, #0
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	fba2 1203 	umull	r1, r2, r2, r3
 800044a:	f04f 0300 	mov.w	r3, #0
 800044e:	f04f 0400 	mov.w	r4, #0
 8000452:	0013      	movs	r3, r2
 8000454:	2400      	movs	r4, #0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d000      	beq.n	800045c <xQueueGenericCreate+0x34>
 800045a:	2001      	movs	r0, #1
 800045c:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800045e:	2b00      	cmp	r3, #0
 8000460:	d123      	bne.n	80004aa <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800046a:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800046e:	d81c      	bhi.n	80004aa <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	68ba      	ldr	r2, [r7, #8]
 8000474:	fb02 f303 	mul.w	r3, r2, r3
 8000478:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	3348      	adds	r3, #72	; 0x48
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fa60 	bl	8002944 <pvPortMalloc>
 8000484:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d01b      	beq.n	80004c4 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800048c:	69fb      	ldr	r3, [r7, #28]
 800048e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	3348      	adds	r3, #72	; 0x48
 8000494:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000496:	79fa      	ldrb	r2, [r7, #7]
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	4613      	mov	r3, r2
 800049e:	697a      	ldr	r2, [r7, #20]
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	68f8      	ldr	r0, [r7, #12]
 80004a4:	f000 f813 	bl	80004ce <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80004a8:	e00c      	b.n	80004c4 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80004aa:	69fb      	ldr	r3, [r7, #28]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d109      	bne.n	80004c4 <xQueueGenericCreate+0x9c>
 80004b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004b4:	f383 8811 	msr	BASEPRI, r3
 80004b8:	f3bf 8f6f 	isb	sy
 80004bc:	f3bf 8f4f 	dsb	sy
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	e7fe      	b.n	80004c2 <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004c4:	69fb      	ldr	r3, [r7, #28]
    }
 80004c6:	4618      	mov	r0, r3
 80004c8:	3724      	adds	r7, #36	; 0x24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd90      	pop	{r4, r7, pc}

080004ce <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b084      	sub	sp, #16
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
 80004da:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d103      	bne.n	80004ea <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004e2:	69bb      	ldr	r3, [r7, #24]
 80004e4:	69ba      	ldr	r2, [r7, #24]
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	e002      	b.n	80004f0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80004fc:	2101      	movs	r1, #1
 80004fe:	69b8      	ldr	r0, [r7, #24]
 8000500:	f7ff fefe 	bl	8000300 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08e      	sub	sp, #56	; 0x38
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800051a:	2300      	movs	r3, #0
 800051c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000524:	2b00      	cmp	r3, #0
 8000526:	d109      	bne.n	800053c <xQueueGenericSend+0x30>
 8000528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800052c:	f383 8811 	msr	BASEPRI, r3
 8000530:	f3bf 8f6f 	isb	sy
 8000534:	f3bf 8f4f 	dsb	sy
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28
 800053a:	e7fe      	b.n	800053a <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d103      	bne.n	800054a <xQueueGenericSend+0x3e>
 8000542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <xQueueGenericSend+0x42>
 800054a:	2301      	movs	r3, #1
 800054c:	e000      	b.n	8000550 <xQueueGenericSend+0x44>
 800054e:	2300      	movs	r3, #0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d109      	bne.n	8000568 <xQueueGenericSend+0x5c>
 8000554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000558:	f383 8811 	msr	BASEPRI, r3
 800055c:	f3bf 8f6f 	isb	sy
 8000560:	f3bf 8f4f 	dsb	sy
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
 8000566:	e7fe      	b.n	8000566 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d103      	bne.n	8000576 <xQueueGenericSend+0x6a>
 800056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000572:	2b01      	cmp	r3, #1
 8000574:	d101      	bne.n	800057a <xQueueGenericSend+0x6e>
 8000576:	2301      	movs	r3, #1
 8000578:	e000      	b.n	800057c <xQueueGenericSend+0x70>
 800057a:	2300      	movs	r3, #0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d109      	bne.n	8000594 <xQueueGenericSend+0x88>
 8000580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000584:	f383 8811 	msr	BASEPRI, r3
 8000588:	f3bf 8f6f 	isb	sy
 800058c:	f3bf 8f4f 	dsb	sy
 8000590:	623b      	str	r3, [r7, #32]
 8000592:	e7fe      	b.n	8000592 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000594:	f001 fac2 	bl	8001b1c <xTaskGetSchedulerState>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d102      	bne.n	80005a4 <xQueueGenericSend+0x98>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d101      	bne.n	80005a8 <xQueueGenericSend+0x9c>
 80005a4:	2301      	movs	r3, #1
 80005a6:	e000      	b.n	80005aa <xQueueGenericSend+0x9e>
 80005a8:	2300      	movs	r3, #0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d109      	bne.n	80005c2 <xQueueGenericSend+0xb6>
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	e7fe      	b.n	80005c0 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005c2:	f002 f8ed 	bl	80027a0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80005c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d302      	bcc.n	80005d8 <xQueueGenericSend+0xcc>
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d129      	bne.n	800062c <xQueueGenericSend+0x120>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	68b9      	ldr	r1, [r7, #8]
 80005dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80005de:	f000 fa7d 	bl	8000adc <prvCopyDataToQueue>
 80005e2:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80005e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d010      	beq.n	800060e <xQueueGenericSend+0x102>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80005ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ee:	3324      	adds	r3, #36	; 0x24
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 f887 	bl	8001704 <xTaskRemoveFromEventList>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d013      	beq.n	8000624 <xQueueGenericSend+0x118>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80005fc:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <xQueueGenericSend+0x1f0>)
 80005fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	f3bf 8f6f 	isb	sy
 800060c:	e00a      	b.n	8000624 <xQueueGenericSend+0x118>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000610:	2b00      	cmp	r3, #0
 8000612:	d007      	beq.n	8000624 <xQueueGenericSend+0x118>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000614:	4b39      	ldr	r3, [pc, #228]	; (80006fc <xQueueGenericSend+0x1f0>)
 8000616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000624:	f002 f8ea 	bl	80027fc <vPortExitCritical>
                return pdPASS;
 8000628:	2301      	movs	r3, #1
 800062a:	e063      	b.n	80006f4 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000632:	f002 f8e3 	bl	80027fc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000636:	2300      	movs	r3, #0
 8000638:	e05c      	b.n	80006f4 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800063a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800063c:	2b00      	cmp	r3, #0
 800063e:	d106      	bne.n	800064e <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f933 	bl	80018b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800064a:	2301      	movs	r3, #1
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800064e:	f002 f8d5 	bl	80027fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000652:	f000 fd67 	bl	8001124 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000656:	f002 f8a3 	bl	80027a0 <vPortEnterCritical>
 800065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000660:	b25b      	sxtb	r3, r3
 8000662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000666:	d103      	bne.n	8000670 <xQueueGenericSend+0x164>
 8000668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000676:	b25b      	sxtb	r3, r3
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d103      	bne.n	8000686 <xQueueGenericSend+0x17a>
 800067e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000686:	f002 f8b9 	bl	80027fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800068a:	1d3a      	adds	r2, r7, #4
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f922 	bl	80018dc <xTaskCheckForTimeOut>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d124      	bne.n	80006e8 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800069e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006a0:	f000 fb14 	bl	8000ccc <prvIsQueueFull>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d018      	beq.n	80006dc <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80006aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ac:	3310      	adds	r3, #16
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ffbe 	bl	8001634 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80006b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006ba:	f000 fa9f 	bl	8000bfc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80006be:	f000 fd3f 	bl	8001140 <xTaskResumeAll>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f47f af7c 	bne.w	80005c2 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <xQueueGenericSend+0x1f0>)
 80006cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	f3bf 8f4f 	dsb	sy
 80006d6:	f3bf 8f6f 	isb	sy
 80006da:	e772      	b.n	80005c2 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80006dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006de:	f000 fa8d 	bl	8000bfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006e2:	f000 fd2d 	bl	8001140 <xTaskResumeAll>
 80006e6:	e76c      	b.n	80005c2 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80006e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006ea:	f000 fa87 	bl	8000bfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006ee:	f000 fd27 	bl	8001140 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80006f2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3738      	adds	r7, #56	; 0x38
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	e000ed04 	.word	0xe000ed04

08000700 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08c      	sub	sp, #48	; 0x30
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800070c:	2300      	movs	r3, #0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000716:	2b00      	cmp	r3, #0
 8000718:	d109      	bne.n	800072e <xQueueReceive+0x2e>
 800071a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071e:	f383 8811 	msr	BASEPRI, r3
 8000722:	f3bf 8f6f 	isb	sy
 8000726:	f3bf 8f4f 	dsb	sy
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e7fe      	b.n	800072c <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d103      	bne.n	800073c <xQueueReceive+0x3c>
 8000734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <xQueueReceive+0x40>
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <xQueueReceive+0x42>
 8000740:	2300      	movs	r3, #0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d109      	bne.n	800075a <xQueueReceive+0x5a>
 8000746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800074a:	f383 8811 	msr	BASEPRI, r3
 800074e:	f3bf 8f6f 	isb	sy
 8000752:	f3bf 8f4f 	dsb	sy
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	e7fe      	b.n	8000758 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800075a:	f001 f9df 	bl	8001b1c <xTaskGetSchedulerState>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d102      	bne.n	800076a <xQueueReceive+0x6a>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <xQueueReceive+0x6e>
 800076a:	2301      	movs	r3, #1
 800076c:	e000      	b.n	8000770 <xQueueReceive+0x70>
 800076e:	2300      	movs	r3, #0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d109      	bne.n	8000788 <xQueueReceive+0x88>
 8000774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000778:	f383 8811 	msr	BASEPRI, r3
 800077c:	f3bf 8f6f 	isb	sy
 8000780:	f3bf 8f4f 	dsb	sy
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	e7fe      	b.n	8000786 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000788:	f002 f80a 	bl	80027a0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000790:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000794:	2b00      	cmp	r3, #0
 8000796:	d01f      	beq.n	80007d8 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800079c:	f000 fa08 	bl	8000bb0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80007a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a2:	1e5a      	subs	r2, r3, #1
 80007a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a6:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00f      	beq.n	80007d0 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b2:	3310      	adds	r3, #16
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 ffa5 	bl	8001704 <xTaskRemoveFromEventList>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d007      	beq.n	80007d0 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80007c0:	4b3c      	ldr	r3, [pc, #240]	; (80008b4 <xQueueReceive+0x1b4>)
 80007c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	f3bf 8f4f 	dsb	sy
 80007cc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80007d0:	f002 f814 	bl	80027fc <vPortExitCritical>
                return pdPASS;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e069      	b.n	80008ac <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d103      	bne.n	80007e6 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80007de:	f002 f80d 	bl	80027fc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e062      	b.n	80008ac <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 80007e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d106      	bne.n	80007fa <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 f85d 	bl	80018b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80007fa:	f001 ffff 	bl	80027fc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80007fe:	f000 fc91 	bl	8001124 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000802:	f001 ffcd 	bl	80027a0 <vPortEnterCritical>
 8000806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800080c:	b25b      	sxtb	r3, r3
 800080e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000812:	d103      	bne.n	800081c <xQueueReceive+0x11c>
 8000814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000822:	b25b      	sxtb	r3, r3
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d103      	bne.n	8000832 <xQueueReceive+0x132>
 800082a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000832:	f001 ffe3 	bl	80027fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000836:	1d3a      	adds	r2, r7, #4
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f84c 	bl	80018dc <xTaskCheckForTimeOut>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d123      	bne.n	8000892 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800084a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800084c:	f000 fa28 	bl	8000ca0 <prvIsQueueEmpty>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d017      	beq.n	8000886 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000858:	3324      	adds	r3, #36	; 0x24
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fee8 	bl	8001634 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000866:	f000 f9c9 	bl	8000bfc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800086a:	f000 fc69 	bl	8001140 <xTaskResumeAll>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d189      	bne.n	8000788 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <xQueueReceive+0x1b4>)
 8000876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	e780      	b.n	8000788 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000888:	f000 f9b8 	bl	8000bfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800088c:	f000 fc58 	bl	8001140 <xTaskResumeAll>
 8000890:	e77a      	b.n	8000788 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000894:	f000 f9b2 	bl	8000bfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000898:	f000 fc52 	bl	8001140 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800089c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800089e:	f000 f9ff 	bl	8000ca0 <prvIsQueueEmpty>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	f43f af6f 	beq.w	8000788 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80008aa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3730      	adds	r7, #48	; 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	e000ed04 	.word	0xe000ed04

080008b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d109      	bne.n	80008e8 <xQueueSemaphoreTake+0x30>
 80008d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	e7fe      	b.n	80008e6 <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d009      	beq.n	8000904 <xQueueSemaphoreTake+0x4c>
 80008f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f4:	f383 8811 	msr	BASEPRI, r3
 80008f8:	f3bf 8f6f 	isb	sy
 80008fc:	f3bf 8f4f 	dsb	sy
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e7fe      	b.n	8000902 <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000904:	f001 f90a 	bl	8001b1c <xTaskGetSchedulerState>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d102      	bne.n	8000914 <xQueueSemaphoreTake+0x5c>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <xQueueSemaphoreTake+0x60>
 8000914:	2301      	movs	r3, #1
 8000916:	e000      	b.n	800091a <xQueueSemaphoreTake+0x62>
 8000918:	2300      	movs	r3, #0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d109      	bne.n	8000932 <xQueueSemaphoreTake+0x7a>
 800091e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000922:	f383 8811 	msr	BASEPRI, r3
 8000926:	f3bf 8f6f 	isb	sy
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	e7fe      	b.n	8000930 <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000932:	f001 ff35 	bl	80027a0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093a:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800093c:	6a3b      	ldr	r3, [r7, #32]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d024      	beq.n	800098c <xQueueSemaphoreTake+0xd4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d104      	bne.n	800095c <xQueueSemaphoreTake+0xa4>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000952:	f001 faf7 	bl	8001f44 <pvTaskIncrementMutexHeldCount>
 8000956:	4602      	mov	r2, r0
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00f      	beq.n	8000984 <xQueueSemaphoreTake+0xcc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	3310      	adds	r3, #16
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fecb 	bl	8001704 <xTaskRemoveFromEventList>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d007      	beq.n	8000984 <xQueueSemaphoreTake+0xcc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000974:	4b4c      	ldr	r3, [pc, #304]	; (8000aa8 <xQueueSemaphoreTake+0x1f0>)
 8000976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	f3bf 8f4f 	dsb	sy
 8000980:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000984:	f001 ff3a 	bl	80027fc <vPortExitCritical>
                return pdPASS;
 8000988:	2301      	movs	r3, #1
 800098a:	e089      	b.n	8000aa0 <xQueueSemaphoreTake+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <xQueueSemaphoreTake+0xe2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000992:	f001 ff33 	bl	80027fc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000996:	2300      	movs	r3, #0
 8000998:	e082      	b.n	8000aa0 <xQueueSemaphoreTake+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	2b00      	cmp	r3, #0
 800099e:	d106      	bne.n	80009ae <xQueueSemaphoreTake+0xf6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 ff83 	bl	80018b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009aa:	2301      	movs	r3, #1
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009ae:	f001 ff25 	bl	80027fc <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009b2:	f000 fbb7 	bl	8001124 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009b6:	f001 fef3 	bl	80027a0 <vPortEnterCritical>
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c6:	d103      	bne.n	80009d0 <xQueueSemaphoreTake+0x118>
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009dc:	d103      	bne.n	80009e6 <xQueueSemaphoreTake+0x12e>
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009e6:	f001 ff09 	bl	80027fc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009ea:	463a      	mov	r2, r7
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 ff72 	bl	80018dc <xTaskCheckForTimeOut>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d132      	bne.n	8000a64 <xQueueSemaphoreTake+0x1ac>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a00:	f000 f94e 	bl	8000ca0 <prvIsQueueEmpty>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d026      	beq.n	8000a58 <xQueueSemaphoreTake+0x1a0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d109      	bne.n	8000a26 <xQueueSemaphoreTake+0x16e>
                    {
                        taskENTER_CRITICAL();
 8000a12:	f001 fec5 	bl	80027a0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 f89c 	bl	8001b58 <xTaskPriorityInherit>
 8000a20:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8000a22:	f001 feeb 	bl	80027fc <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	3324      	adds	r3, #36	; 0x24
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fe00 	bl	8001634 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a36:	f000 f8e1 	bl	8000bfc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a3a:	f000 fb81 	bl	8001140 <xTaskResumeAll>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f47f af76 	bne.w	8000932 <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <xQueueSemaphoreTake+0x1f0>)
 8000a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	f3bf 8f4f 	dsb	sy
 8000a52:	f3bf 8f6f 	isb	sy
 8000a56:	e76c      	b.n	8000932 <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a5a:	f000 f8cf 	bl	8000bfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a5e:	f000 fb6f 	bl	8001140 <xTaskResumeAll>
 8000a62:	e766      	b.n	8000932 <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a66:	f000 f8c9 	bl	8000bfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a6a:	f000 fb69 	bl	8001140 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a70:	f000 f916 	bl	8000ca0 <prvIsQueueEmpty>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f43f af5b 	beq.w	8000932 <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00d      	beq.n	8000a9e <xQueueSemaphoreTake+0x1e6>
                    {
                        taskENTER_CRITICAL();
 8000a82:	f001 fe8d 	bl	80027a0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000a86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a88:	f000 f810 	bl	8000aac <prvGetDisinheritPriorityAfterTimeout>
 8000a8c:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	69f9      	ldr	r1, [r7, #28]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 f99f 	bl	8001dd8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8000a9a:	f001 feaf 	bl	80027fc <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000a9e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	e000ed04 	.word	0xe000ed04

08000aac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f1c3 0305 	rsb	r3, r3, #5
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e001      	b.n	8000ace <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000ace:	68fb      	ldr	r3, [r7, #12]
    }
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10d      	bne.n	8000b16 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 f8c4 	bl	8001c94 <xTaskPriorityDisinherit>
 8000b0c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	e043      	b.n	8000b9e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d119      	bne.n	8000b50 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6858      	ldr	r0, [r3, #4]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	461a      	mov	r2, r3
 8000b26:	68b9      	ldr	r1, [r7, #8]
 8000b28:	f002 fcea 	bl	8003500 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	441a      	add	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d32b      	bcc.n	8000b9e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	e026      	b.n	8000b9e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	68d8      	ldr	r0, [r3, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	461a      	mov	r2, r3
 8000b5a:	68b9      	ldr	r1, [r7, #8]
 8000b5c:	f002 fcd0 	bl	8003500 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	425b      	negs	r3, r3
 8000b6a:	441a      	add	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	425b      	negs	r3, r3
 8000b86:	441a      	add	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d105      	bne.n	8000b9e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d002      	beq.n	8000b9e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000ba6:	697b      	ldr	r3, [r7, #20]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d018      	beq.n	8000bf4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68da      	ldr	r2, [r3, #12]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	441a      	add	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d303      	bcc.n	8000be4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68d9      	ldr	r1, [r3, #12]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	461a      	mov	r2, r3
 8000bee:	6838      	ldr	r0, [r7, #0]
 8000bf0:	f002 fc86 	bl	8003500 <memcpy>
    }
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000c04:	f001 fdcc 	bl	80027a0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c10:	e011      	b.n	8000c36 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d012      	beq.n	8000c40 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3324      	adds	r3, #36	; 0x24
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fd70 	bl	8001704 <xTaskRemoveFromEventList>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000c2a:	f000 febb 	bl	80019a4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	dce9      	bgt.n	8000c12 <prvUnlockQueue+0x16>
 8000c3e:	e000      	b.n	8000c42 <prvUnlockQueue+0x46>
                    break;
 8000c40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	22ff      	movs	r2, #255	; 0xff
 8000c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000c4a:	f001 fdd7 	bl	80027fc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000c4e:	f001 fda7 	bl	80027a0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c5a:	e011      	b.n	8000c80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d012      	beq.n	8000c8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3310      	adds	r3, #16
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fd4b 	bl	8001704 <xTaskRemoveFromEventList>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000c74:	f000 fe96 	bl	80019a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000c78:	7bbb      	ldrb	r3, [r7, #14]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	dce9      	bgt.n	8000c5c <prvUnlockQueue+0x60>
 8000c88:	e000      	b.n	8000c8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000c8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	22ff      	movs	r2, #255	; 0xff
 8000c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000c94:	f001 fdb2 	bl	80027fc <vPortExitCritical>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ca8:	f001 fd7a 	bl	80027a0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e001      	b.n	8000cbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000cbe:	f001 fd9d 	bl	80027fc <vPortExitCritical>

    return xReturn;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000cd4:	f001 fd64 	bl	80027a0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d102      	bne.n	8000cea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e001      	b.n	8000cee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000cee:	f001 fd85 	bl	80027fc <vPortExitCritical>

    return xReturn;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000d0c:	f001 fd48 	bl	80027a0 <vPortEnterCritical>
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d103      	bne.n	8000d26 <vQueueWaitForMessageRestricted+0x2a>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d2c:	b25b      	sxtb	r3, r3
 8000d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d32:	d103      	bne.n	8000d3c <vQueueWaitForMessageRestricted+0x40>
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d3c:	f001 fd5e 	bl	80027fc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d106      	bne.n	8000d56 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3324      	adds	r3, #36	; 0x24
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fc93 	bl	800167c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff50 	bl	8000bfc <prvUnlockQueue>
    }
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af04      	add	r7, sp, #16
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4613      	mov	r3, r2
 8000d72:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f001 fde3 	bl	8002944 <pvPortMalloc>
 8000d7e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d013      	beq.n	8000dae <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d86:	2050      	movs	r0, #80	; 0x50
 8000d88:	f001 fddc 	bl	8002944 <pvPortMalloc>
 8000d8c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d94:	2250      	movs	r2, #80	; 0x50
 8000d96:	2100      	movs	r1, #0
 8000d98:	69f8      	ldr	r0, [r7, #28]
 8000d9a:	f002 fbbc 	bl	8003516 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	631a      	str	r2, [r3, #48]	; 0x30
 8000da4:	e005      	b.n	8000db2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f001 fe84 	bl	8002ab4 <vPortFree>
 8000dac:	e001      	b.n	8000db2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d013      	beq.n	8000de0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000db8:	88fa      	ldrh	r2, [r7, #6]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	9303      	str	r3, [sp, #12]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	9302      	str	r3, [sp, #8]
 8000dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	68f8      	ldr	r0, [r7, #12]
 8000dd0:	f000 f80e 	bl	8000df0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000dd4:	69f8      	ldr	r0, [r7, #28]
 8000dd6:	f000 f88f 	bl	8000ef8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	e002      	b.n	8000de6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000de6:	69bb      	ldr	r3, [r7, #24]
    }
 8000de8:	4618      	mov	r0, r3
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	f023 0307 	bic.w	r3, r3, #7
 8000e16:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d009      	beq.n	8000e36 <prvInitialiseNewTask+0x46>
 8000e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e26:	f383 8811 	msr	BASEPRI, r3
 8000e2a:	f3bf 8f6f 	isb	sy
 8000e2e:	f3bf 8f4f 	dsb	sy
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e7fe      	b.n	8000e34 <prvInitialiseNewTask+0x44>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d01e      	beq.n	8000e7a <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	e012      	b.n	8000e68 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	4413      	add	r3, r2
 8000e48:	7819      	ldrb	r1, [r3, #0]
 8000e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	4413      	add	r3, r2
 8000e50:	3334      	adds	r3, #52	; 0x34
 8000e52:	460a      	mov	r2, r1
 8000e54:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3301      	adds	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	2b09      	cmp	r3, #9
 8000e6c:	d9e9      	bls.n	8000e42 <prvInitialiseNewTask+0x52>
 8000e6e:	e000      	b.n	8000e72 <prvInitialiseNewTask+0x82>
            {
                break;
 8000e70:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d909      	bls.n	8000e94 <prvInitialiseNewTask+0xa4>
 8000e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e84:	f383 8811 	msr	BASEPRI, r3
 8000e88:	f3bf 8f6f 	isb	sy
 8000e8c:	f3bf 8f4f 	dsb	sy
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	e7fe      	b.n	8000e92 <prvInitialiseNewTask+0xa2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d901      	bls.n	8000e9e <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eac:	3304      	adds	r3, #4
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff f9b6 	bl	8000220 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb6:	3318      	adds	r3, #24
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff f9b1 	bl	8000220 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ec2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	f1c3 0205 	rsb	r2, r3, #5
 8000eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ecc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	68f9      	ldr	r1, [r7, #12]
 8000ed8:	69b8      	ldr	r0, [r7, #24]
 8000eda:	f001 fb39 	bl	8002550 <pxPortInitialiseStack>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d002      	beq.n	8000ef0 <prvInitialiseNewTask+0x100>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000f00:	f001 fc4e 	bl	80027a0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000f04:	4b3e      	ldr	r3, [pc, #248]	; (8001000 <prvAddNewTaskToReadyList+0x108>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a3d      	ldr	r2, [pc, #244]	; (8001000 <prvAddNewTaskToReadyList+0x108>)
 8000f0c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <prvAddNewTaskToReadyList+0x10c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d109      	bne.n	8000f2a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000f16:	4a3b      	ldr	r2, [pc, #236]	; (8001004 <prvAddNewTaskToReadyList+0x10c>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000f1c:	4b38      	ldr	r3, [pc, #224]	; (8001000 <prvAddNewTaskToReadyList+0x108>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d110      	bne.n	8000f46 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000f24:	f000 fd62 	bl	80019ec <prvInitialiseTaskLists>
 8000f28:	e00d      	b.n	8000f46 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <prvAddNewTaskToReadyList+0x110>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d109      	bne.n	8000f46 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f32:	4b34      	ldr	r3, [pc, #208]	; (8001004 <prvAddNewTaskToReadyList+0x10c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d802      	bhi.n	8000f46 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000f40:	4a30      	ldr	r2, [pc, #192]	; (8001004 <prvAddNewTaskToReadyList+0x10c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000f46:	4b31      	ldr	r3, [pc, #196]	; (800100c <prvAddNewTaskToReadyList+0x114>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4a2f      	ldr	r2, [pc, #188]	; (800100c <prvAddNewTaskToReadyList+0x114>)
 8000f4e:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f54:	2201      	movs	r2, #1
 8000f56:	409a      	lsls	r2, r3
 8000f58:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <prvAddNewTaskToReadyList+0x118>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	4a2c      	ldr	r2, [pc, #176]	; (8001010 <prvAddNewTaskToReadyList+0x118>)
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f66:	492b      	ldr	r1, [pc, #172]	; (8001014 <prvAddNewTaskToReadyList+0x11c>)
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	3304      	adds	r3, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	3204      	adds	r2, #4
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	1d1a      	adds	r2, r3, #4
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <prvAddNewTaskToReadyList+0x11c>)
 8000fa6:	441a      	add	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb0:	4918      	ldr	r1, [pc, #96]	; (8001014 <prvAddNewTaskToReadyList+0x11c>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1c59      	adds	r1, r3, #1
 8000fc0:	4814      	ldr	r0, [pc, #80]	; (8001014 <prvAddNewTaskToReadyList+0x11c>)
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4403      	add	r3, r0
 8000fcc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000fce:	f001 fc15 	bl	80027fc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <prvAddNewTaskToReadyList+0x110>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00e      	beq.n	8000ff8 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <prvAddNewTaskToReadyList+0x10c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <prvAddNewTaskToReadyList+0x120>)
 8000fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000fc 	.word	0x200000fc
 8001004:	20000024 	.word	0x20000024
 8001008:	20000108 	.word	0x20000108
 800100c:	20000118 	.word	0x20000118
 8001010:	20000104 	.word	0x20000104
 8001014:	20000028 	.word	0x20000028
 8001018:	e000ed04 	.word	0xe000ed04

0800101c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d016      	beq.n	800105c <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <vTaskDelay+0x60>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d009      	beq.n	800104a <vTaskDelay+0x2e>
 8001036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103a:	f383 8811 	msr	BASEPRI, r3
 800103e:	f3bf 8f6f 	isb	sy
 8001042:	f3bf 8f4f 	dsb	sy
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	e7fe      	b.n	8001048 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 800104a:	f000 f86b 	bl	8001124 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 ff8b 	bl	8001f6c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001056:	f000 f873 	bl	8001140 <xTaskResumeAll>
 800105a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d107      	bne.n	8001072 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <vTaskDelay+0x64>)
 8001064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	f3bf 8f4f 	dsb	sy
 800106e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000124 	.word	0x20000124
 8001080:	e000ed04 	.word	0xe000ed04

08001084 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <vTaskStartScheduler+0x84>)
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	2300      	movs	r3, #0
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2300      	movs	r3, #0
 8001094:	2246      	movs	r2, #70	; 0x46
 8001096:	491d      	ldr	r1, [pc, #116]	; (800110c <vTaskStartScheduler+0x88>)
 8001098:	481d      	ldr	r0, [pc, #116]	; (8001110 <vTaskStartScheduler+0x8c>)
 800109a:	f7ff fe63 	bl	8000d64 <xTaskCreate>
 800109e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d102      	bne.n	80010ac <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80010a6:	f000 ffe1 	bl	800206c <xTimerCreateTimerTask>
 80010aa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d115      	bne.n	80010de <vTaskStartScheduler+0x5a>
 80010b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b6:	f383 8811 	msr	BASEPRI, r3
 80010ba:	f3bf 8f6f 	isb	sy
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <vTaskStartScheduler+0x90>)
 80010c6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ca:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <vTaskStartScheduler+0x94>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <vTaskStartScheduler+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80010d8:	f001 fac4 	bl	8002664 <xPortStartScheduler>
 80010dc:	e00d      	b.n	80010fa <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d109      	bne.n	80010fa <vTaskStartScheduler+0x76>
 80010e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ea:	f383 8811 	msr	BASEPRI, r3
 80010ee:	f3bf 8f6f 	isb	sy
 80010f2:	f3bf 8f4f 	dsb	sy
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	e7fe      	b.n	80010f8 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <vTaskStartScheduler+0x9c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000120 	.word	0x20000120
 800110c:	08003540 	.word	0x08003540
 8001110:	080019bd 	.word	0x080019bd
 8001114:	2000011c 	.word	0x2000011c
 8001118:	20000108 	.word	0x20000108
 800111c:	20000100 	.word	0x20000100
 8001120:	20000000 	.word	0x20000000

08001124 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <vTaskSuspendAll+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a03      	ldr	r2, [pc, #12]	; (800113c <vTaskSuspendAll+0x18>)
 8001130:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	20000124 	.word	0x20000124

08001140 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800114e:	4b70      	ldr	r3, [pc, #448]	; (8001310 <xTaskResumeAll+0x1d0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d109      	bne.n	800116a <xTaskResumeAll+0x2a>
 8001156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	e7fe      	b.n	8001168 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800116a:	f001 fb19 	bl	80027a0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800116e:	4b68      	ldr	r3, [pc, #416]	; (8001310 <xTaskResumeAll+0x1d0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3b01      	subs	r3, #1
 8001174:	4a66      	ldr	r2, [pc, #408]	; (8001310 <xTaskResumeAll+0x1d0>)
 8001176:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001178:	4b65      	ldr	r3, [pc, #404]	; (8001310 <xTaskResumeAll+0x1d0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	f040 80c0 	bne.w	8001302 <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001182:	4b64      	ldr	r3, [pc, #400]	; (8001314 <xTaskResumeAll+0x1d4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80bb 	beq.w	8001302 <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800118c:	e08a      	b.n	80012a4 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800118e:	4b62      	ldr	r3, [pc, #392]	; (8001318 <xTaskResumeAll+0x1d8>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	6a12      	ldr	r2, [r2, #32]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	69d2      	ldr	r2, [r2, #28]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3318      	adds	r3, #24
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d103      	bne.n	80011c4 <xTaskResumeAll+0x84>
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	6a1a      	ldr	r2, [r3, #32]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	68d2      	ldr	r2, [r2, #12]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	6892      	ldr	r2, [r2, #8]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d103      	bne.n	8001202 <xTaskResumeAll+0xc2>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	2201      	movs	r2, #1
 8001218:	409a      	lsls	r2, r3
 800121a:	4b40      	ldr	r3, [pc, #256]	; (800131c <xTaskResumeAll+0x1dc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4313      	orrs	r3, r2
 8001220:	4a3e      	ldr	r2, [pc, #248]	; (800131c <xTaskResumeAll+0x1dc>)
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001228:	493d      	ldr	r1, [pc, #244]	; (8001320 <xTaskResumeAll+0x1e0>)
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	3304      	adds	r3, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	3204      	adds	r2, #4
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	1d1a      	adds	r2, r3, #4
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <xTaskResumeAll+0x1e0>)
 8001268:	441a      	add	r2, r3
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001272:	492b      	ldr	r1, [pc, #172]	; (8001320 <xTaskResumeAll+0x1e0>)
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1c59      	adds	r1, r3, #1
 8001282:	4827      	ldr	r0, [pc, #156]	; (8001320 <xTaskResumeAll+0x1e0>)
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4403      	add	r3, r0
 800128e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <xTaskResumeAll+0x1e4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	429a      	cmp	r2, r3
 800129c:	d302      	bcc.n	80012a4 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <xTaskResumeAll+0x1e8>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <xTaskResumeAll+0x1d8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f47f af70 	bne.w	800118e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80012b4:	f000 fc16 	bl	8001ae4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <xTaskResumeAll+0x1ec>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d010      	beq.n	80012e6 <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80012c4:	f000 f846 	bl	8001354 <xTaskIncrementTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <xTaskResumeAll+0x1e8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f1      	bne.n	80012c4 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <xTaskResumeAll+0x1ec>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <xTaskResumeAll+0x1e8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <xTaskResumeAll+0x1f0>)
 80012f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	f3bf 8f4f 	dsb	sy
 80012fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001302:	f001 fa7b 	bl	80027fc <vPortExitCritical>

    return xAlreadyYielded;
 8001306:	69bb      	ldr	r3, [r7, #24]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000124 	.word	0x20000124
 8001314:	200000fc 	.word	0x200000fc
 8001318:	200000bc 	.word	0x200000bc
 800131c:	20000104 	.word	0x20000104
 8001320:	20000028 	.word	0x20000028
 8001324:	20000024 	.word	0x20000024
 8001328:	20000110 	.word	0x20000110
 800132c:	2000010c 	.word	0x2000010c
 8001330:	e000ed04 	.word	0xe000ed04

08001334 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <xTaskGetTickCount+0x1c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001340:	687b      	ldr	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000100 	.word	0x20000100

08001354 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800135e:	4b7d      	ldr	r3, [pc, #500]	; (8001554 <xTaskIncrementTick+0x200>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f040 80eb 	bne.w	800153e <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001368:	4b7b      	ldr	r3, [pc, #492]	; (8001558 <xTaskIncrementTick+0x204>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001370:	4a79      	ldr	r2, [pc, #484]	; (8001558 <xTaskIncrementTick+0x204>)
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d11f      	bne.n	80013bc <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800137c:	4b77      	ldr	r3, [pc, #476]	; (800155c <xTaskIncrementTick+0x208>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <xTaskIncrementTick+0x46>
 8001386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800138a:	f383 8811 	msr	BASEPRI, r3
 800138e:	f3bf 8f6f 	isb	sy
 8001392:	f3bf 8f4f 	dsb	sy
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	e7fe      	b.n	8001398 <xTaskIncrementTick+0x44>
 800139a:	4b70      	ldr	r3, [pc, #448]	; (800155c <xTaskIncrementTick+0x208>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <xTaskIncrementTick+0x20c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a6d      	ldr	r2, [pc, #436]	; (800155c <xTaskIncrementTick+0x208>)
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4a6d      	ldr	r2, [pc, #436]	; (8001560 <xTaskIncrementTick+0x20c>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b6d      	ldr	r3, [pc, #436]	; (8001564 <xTaskIncrementTick+0x210>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a6b      	ldr	r2, [pc, #428]	; (8001564 <xTaskIncrementTick+0x210>)
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	f000 fb94 	bl	8001ae4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80013bc:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <xTaskIncrementTick+0x214>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6a3a      	ldr	r2, [r7, #32]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	f0c0 80a6 	bcc.w	8001514 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013c8:	4b64      	ldr	r3, [pc, #400]	; (800155c <xTaskIncrementTick+0x208>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d104      	bne.n	80013dc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <xTaskIncrementTick+0x214>)
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	601a      	str	r2, [r3, #0]
                    break;
 80013da:	e09b      	b.n	8001514 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013dc:	4b5f      	ldr	r3, [pc, #380]	; (800155c <xTaskIncrementTick+0x208>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80013ec:	6a3a      	ldr	r2, [r7, #32]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d203      	bcs.n	80013fc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80013f4:	4a5c      	ldr	r2, [pc, #368]	; (8001568 <xTaskIncrementTick+0x214>)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80013fa:	e08b      	b.n	8001514 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	68d2      	ldr	r2, [r2, #12]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	6892      	ldr	r2, [r2, #8]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	3304      	adds	r3, #4
 800141e:	429a      	cmp	r2, r3
 8001420:	d103      	bne.n	800142a <xTaskIncrementTick+0xd6>
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	1e5a      	subs	r2, r3, #1
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01e      	beq.n	8001480 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	6a12      	ldr	r2, [r2, #32]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	69d2      	ldr	r2, [r2, #28]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	3318      	adds	r3, #24
 8001464:	429a      	cmp	r2, r3
 8001466:	d103      	bne.n	8001470 <xTaskIncrementTick+0x11c>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2200      	movs	r2, #0
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	2201      	movs	r2, #1
 8001486:	409a      	lsls	r2, r3
 8001488:	4b38      	ldr	r3, [pc, #224]	; (800156c <xTaskIncrementTick+0x218>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4313      	orrs	r3, r2
 800148e:	4a37      	ldr	r2, [pc, #220]	; (800156c <xTaskIncrementTick+0x218>)
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001496:	4936      	ldr	r1, [pc, #216]	; (8001570 <xTaskIncrementTick+0x21c>)
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	3304      	adds	r3, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	3204      	adds	r2, #4
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	1d1a      	adds	r2, r3, #4
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <xTaskIncrementTick+0x21c>)
 80014d6:	441a      	add	r2, r3
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	615a      	str	r2, [r3, #20]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	4923      	ldr	r1, [pc, #140]	; (8001570 <xTaskIncrementTick+0x21c>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1c59      	adds	r1, r3, #1
 80014f0:	481f      	ldr	r0, [pc, #124]	; (8001570 <xTaskIncrementTick+0x21c>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4403      	add	r3, r0
 80014fc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <xTaskIncrementTick+0x220>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	429a      	cmp	r2, r3
 800150a:	f67f af5d 	bls.w	80013c8 <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 800150e:	2301      	movs	r3, #1
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001512:	e759      	b.n	80013c8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <xTaskIncrementTick+0x220>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151a:	4915      	ldr	r1, [pc, #84]	; (8001570 <xTaskIncrementTick+0x21c>)
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d901      	bls.n	8001530 <xTaskIncrementTick+0x1dc>
            {
                xSwitchRequired = pdTRUE;
 800152c:	2301      	movs	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <xTaskIncrementTick+0x224>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 8001538:	2301      	movs	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
 800153c:	e004      	b.n	8001548 <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <xTaskIncrementTick+0x228>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <xTaskIncrementTick+0x228>)
 8001546:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800154a:	4618      	mov	r0, r3
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000124 	.word	0x20000124
 8001558:	20000100 	.word	0x20000100
 800155c:	200000b4 	.word	0x200000b4
 8001560:	200000b8 	.word	0x200000b8
 8001564:	20000114 	.word	0x20000114
 8001568:	2000011c 	.word	0x2000011c
 800156c:	20000104 	.word	0x20000104
 8001570:	20000028 	.word	0x20000028
 8001574:	20000024 	.word	0x20000024
 8001578:	20000110 	.word	0x20000110
 800157c:	2000010c 	.word	0x2000010c

08001580 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <vTaskSwitchContext+0xa0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <vTaskSwitchContext+0xa4>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001594:	e03e      	b.n	8001614 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <vTaskSwitchContext+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <vTaskSwitchContext+0xa8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	f1c3 031f 	rsb	r3, r3, #31
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	491e      	ldr	r1, [pc, #120]	; (800162c <vTaskSwitchContext+0xac>)
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <vTaskSwitchContext+0x5a>
        __asm volatile
 80015c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ca:	f383 8811 	msr	BASEPRI, r3
 80015ce:	f3bf 8f6f 	isb	sy
 80015d2:	f3bf 8f4f 	dsb	sy
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	e7fe      	b.n	80015d8 <vTaskSwitchContext+0x58>
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4a11      	ldr	r2, [pc, #68]	; (800162c <vTaskSwitchContext+0xac>)
 80015e6:	4413      	add	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	3308      	adds	r3, #8
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d104      	bne.n	800160a <vTaskSwitchContext+0x8a>
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <vTaskSwitchContext+0xb0>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	20000124 	.word	0x20000124
 8001624:	20000110 	.word	0x20000110
 8001628:	20000104 	.word	0x20000104
 800162c:	20000028 	.word	0x20000028
 8001630:	20000024 	.word	0x20000024

08001634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <vTaskPlaceOnEventList+0x24>
 8001644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e7fe      	b.n	8001656 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <vTaskPlaceOnEventList+0x44>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3318      	adds	r3, #24
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7fe fdea 	bl	800023a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001666:	2101      	movs	r1, #1
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f000 fc7f 	bl	8001f6c <prvAddCurrentTaskToDelayedList>
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000024 	.word	0x20000024

0800167c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <vTaskPlaceOnEventListRestricted+0x26>
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	f383 8811 	msr	BASEPRI, r3
 8001696:	f3bf 8f6f 	isb	sy
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	e7fe      	b.n	80016a0 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <vTaskPlaceOnEventListRestricted+0x84>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	61da      	str	r2, [r3, #28]
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <vTaskPlaceOnEventListRestricted+0x84>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	6892      	ldr	r2, [r2, #8]
 80016b8:	621a      	str	r2, [r3, #32]
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <vTaskPlaceOnEventListRestricted+0x84>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	3218      	adds	r2, #24
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <vTaskPlaceOnEventListRestricted+0x84>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f103 0218 	add.w	r2, r3, #24
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <vTaskPlaceOnEventListRestricted+0x84>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f000 fc3a 	bl	8001f6c <prvAddCurrentTaskToDelayedList>
    }
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000024 	.word	0x20000024

08001704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001704:	b480      	push	{r7}
 8001706:	b08b      	sub	sp, #44	; 0x2c
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <xTaskRemoveFromEventList+0x2a>
 800171a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800171e:	f383 8811 	msr	BASEPRI, r3
 8001722:	f3bf 8f6f 	isb	sy
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e7fe      	b.n	800172c <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	6a3a      	ldr	r2, [r7, #32]
 800173a:	6a12      	ldr	r2, [r2, #32]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	6a3a      	ldr	r2, [r7, #32]
 8001744:	69d2      	ldr	r2, [r2, #28]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	3318      	adds	r3, #24
 8001750:	429a      	cmp	r2, r3
 8001752:	d103      	bne.n	800175c <xTaskRemoveFromEventList+0x58>
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	2200      	movs	r2, #0
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1e5a      	subs	r2, r3, #1
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800176c:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <xTaskRemoveFromEventList+0x194>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d15e      	bne.n	8001832 <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	6a3a      	ldr	r2, [r7, #32]
 8001780:	68d2      	ldr	r2, [r2, #12]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	6a3a      	ldr	r2, [r7, #32]
 800178a:	6892      	ldr	r2, [r2, #8]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	3304      	adds	r3, #4
 8001796:	429a      	cmp	r2, r3
 8001798:	d103      	bne.n	80017a2 <xTaskRemoveFromEventList+0x9e>
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1e5a      	subs	r2, r3, #1
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	2201      	movs	r2, #1
 80017b8:	409a      	lsls	r2, r3
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <xTaskRemoveFromEventList+0x198>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	4a36      	ldr	r2, [pc, #216]	; (800189c <xTaskRemoveFromEventList+0x198>)
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	6a3b      	ldr	r3, [r7, #32]
 80017c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c8:	4935      	ldr	r1, [pc, #212]	; (80018a0 <xTaskRemoveFromEventList+0x19c>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	440b      	add	r3, r1
 80017d4:	3304      	adds	r3, #4
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	3204      	adds	r2, #4
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	1d1a      	adds	r2, r3, #4
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <xTaskRemoveFromEventList+0x19c>)
 8001808:	441a      	add	r2, r3
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001812:	4923      	ldr	r1, [pc, #140]	; (80018a0 <xTaskRemoveFromEventList+0x19c>)
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	1c59      	adds	r1, r3, #1
 8001822:	481f      	ldr	r0, [pc, #124]	; (80018a0 <xTaskRemoveFromEventList+0x19c>)
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4403      	add	r3, r0
 800182e:	6019      	str	r1, [r3, #0]
 8001830:	e01b      	b.n	800186a <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <xTaskRemoveFromEventList+0x1a0>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	61da      	str	r2, [r3, #28]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	621a      	str	r2, [r3, #32]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	3218      	adds	r2, #24
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f103 0218 	add.w	r2, r3, #24
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <xTaskRemoveFromEventList+0x1a0>)
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <xTaskRemoveFromEventList+0x1a0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <xTaskRemoveFromEventList+0x1a0>)
 8001868:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <xTaskRemoveFromEventList+0x1a4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	429a      	cmp	r2, r3
 8001876:	d905      	bls.n	8001884 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001878:	2301      	movs	r3, #1
 800187a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <xTaskRemoveFromEventList+0x1a8>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e001      	b.n	8001888 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800188a:	4618      	mov	r0, r3
 800188c:	372c      	adds	r7, #44	; 0x2c
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000124 	.word	0x20000124
 800189c:	20000104 	.word	0x20000104
 80018a0:	20000028 	.word	0x20000028
 80018a4:	200000bc 	.word	0x200000bc
 80018a8:	20000024 	.word	0x20000024
 80018ac:	20000110 	.word	0x20000110

080018b0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <vTaskInternalSetTimeOutState+0x24>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <vTaskInternalSetTimeOutState+0x28>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	605a      	str	r2, [r3, #4]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	20000114 	.word	0x20000114
 80018d8:	20000100 	.word	0x20000100

080018dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <xTaskCheckForTimeOut+0x24>
 80018ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f0:	f383 8811 	msr	BASEPRI, r3
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e7fe      	b.n	80018fe <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <xTaskCheckForTimeOut+0x3e>
 8001906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190a:	f383 8811 	msr	BASEPRI, r3
 800190e:	f3bf 8f6f 	isb	sy
 8001912:	f3bf 8f4f 	dsb	sy
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	e7fe      	b.n	8001918 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800191a:	f000 ff41 	bl	80027a0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <xTaskCheckForTimeOut+0xc0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001936:	d102      	bne.n	800193e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	e026      	b.n	800198c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <xTaskCheckForTimeOut+0xc4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d00a      	beq.n	8001960 <xTaskCheckForTimeOut+0x84>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	429a      	cmp	r2, r3
 8001952:	d305      	bcc.n	8001960 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001954:	2301      	movs	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e015      	b.n	800198c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	429a      	cmp	r2, r3
 8001968:	d20b      	bcs.n	8001982 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	1ad2      	subs	r2, r2, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ff9a 	bl	80018b0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	e004      	b.n	800198c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001988:	2301      	movs	r3, #1
 800198a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800198c:	f000 ff36 	bl	80027fc <vPortExitCritical>

    return xReturn;
 8001990:	69fb      	ldr	r3, [r7, #28]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000100 	.word	0x20000100
 80019a0:	20000114 	.word	0x20000114

080019a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <vTaskMissedYield+0x14>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000110 	.word	0x20000110

080019bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80019c4:	f000 f852 	bl	8001a6c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */

        	if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <prvIdleTask+0x28>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d9f9      	bls.n	80019c4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <prvIdleTask+0x2c>)
 80019d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f3bf 8f4f 	dsb	sy
 80019dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80019e0:	e7f0      	b.n	80019c4 <prvIdleTask+0x8>
 80019e2:	bf00      	nop
 80019e4:	20000028 	.word	0x20000028
 80019e8:	e000ed04 	.word	0xe000ed04

080019ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	e00c      	b.n	8001a12 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <prvInitialiseTaskLists+0x60>)
 8001a04:	4413      	add	r3, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fbea 	bl	80001e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d9ef      	bls.n	80019f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <prvInitialiseTaskLists+0x64>)
 8001a1a:	f7fe fbe1 	bl	80001e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <prvInitialiseTaskLists+0x68>)
 8001a20:	f7fe fbde 	bl	80001e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001a24:	480c      	ldr	r0, [pc, #48]	; (8001a58 <prvInitialiseTaskLists+0x6c>)
 8001a26:	f7fe fbdb 	bl	80001e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <prvInitialiseTaskLists+0x70>)
 8001a2c:	f7fe fbd8 	bl	80001e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <prvInitialiseTaskLists+0x74>)
 8001a32:	f7fe fbd5 	bl	80001e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <prvInitialiseTaskLists+0x78>)
 8001a38:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <prvInitialiseTaskLists+0x64>)
 8001a3a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <prvInitialiseTaskLists+0x7c>)
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <prvInitialiseTaskLists+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000028 	.word	0x20000028
 8001a50:	2000008c 	.word	0x2000008c
 8001a54:	200000a0 	.word	0x200000a0
 8001a58:	200000bc 	.word	0x200000bc
 8001a5c:	200000d0 	.word	0x200000d0
 8001a60:	200000e8 	.word	0x200000e8
 8001a64:	200000b4 	.word	0x200000b4
 8001a68:	200000b8 	.word	0x200000b8

08001a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a72:	e019      	b.n	8001aa8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001a74:	f000 fe94 	bl	80027a0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <prvCheckTasksWaitingTermination+0x4c>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3304      	adds	r3, #4
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fc11 	bl	80002ac <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <prvCheckTasksWaitingTermination+0x50>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <prvCheckTasksWaitingTermination+0x50>)
 8001a92:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <prvCheckTasksWaitingTermination+0x54>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <prvCheckTasksWaitingTermination+0x54>)
 8001a9c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001a9e:	f000 fead 	bl	80027fc <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f80e 	bl	8001ac4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <prvCheckTasksWaitingTermination+0x54>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e1      	bne.n	8001a74 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200000d0 	.word	0x200000d0
 8001abc:	200000fc 	.word	0x200000fc
 8001ac0:	200000e4 	.word	0x200000e4

08001ac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 ffef 	bl	8002ab4 <vPortFree>
            vPortFree( pxTCB );
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 ffec 	bl	8002ab4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <prvResetNextTaskUnblockTime+0x30>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d104      	bne.n	8001afc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <prvResetNextTaskUnblockTime+0x34>)
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001afa:	e005      	b.n	8001b08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <prvResetNextTaskUnblockTime+0x30>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <prvResetNextTaskUnblockTime+0x34>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	200000b4 	.word	0x200000b4
 8001b18:	2000011c 	.word	0x2000011c

08001b1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <xTaskGetSchedulerState+0x34>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	e008      	b.n	8001b42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <xTaskGetSchedulerState+0x38>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	e001      	b.n	8001b42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001b42:	687b      	ldr	r3, [r7, #4]
    }
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20000108 	.word	0x20000108
 8001b54:	20000124 	.word	0x20000124

08001b58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8087 	beq.w	8001c7e <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <xTaskPriorityInherit+0x130>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d276      	bcs.n	8001c6c <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db06      	blt.n	8001b94 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <xTaskPriorityInherit+0x130>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f1c3 0205 	rsb	r2, r3, #5
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	6959      	ldr	r1, [r3, #20]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4a39      	ldr	r2, [pc, #228]	; (8001c8c <xTaskPriorityInherit+0x134>)
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4299      	cmp	r1, r3
 8001baa:	d157      	bne.n	8001c5c <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fb7b 	bl	80002ac <uxListRemove>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <xTaskPriorityInherit+0x138>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	4a30      	ldr	r2, [pc, #192]	; (8001c90 <xTaskPriorityInherit+0x138>)
 8001bd0:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <xTaskPriorityInherit+0x130>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2201      	movs	r2, #1
 8001be2:	409a      	lsls	r2, r3
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <xTaskPriorityInherit+0x138>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <xTaskPriorityInherit+0x138>)
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf2:	4926      	ldr	r1, [pc, #152]	; (8001c8c <xTaskPriorityInherit+0x134>)
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3304      	adds	r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	3204      	adds	r2, #4
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1d1a      	adds	r2, r3, #4
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <xTaskPriorityInherit+0x134>)
 8001c32:	441a      	add	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3c:	4913      	ldr	r1, [pc, #76]	; (8001c8c <xTaskPriorityInherit+0x134>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1c59      	adds	r1, r3, #1
 8001c4c:	480f      	ldr	r0, [pc, #60]	; (8001c8c <xTaskPriorityInherit+0x134>)
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4403      	add	r3, r0
 8001c58:	6019      	str	r1, [r3, #0]
 8001c5a:	e004      	b.n	8001c66 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <xTaskPriorityInherit+0x130>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e008      	b.n	8001c7e <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <xTaskPriorityInherit+0x130>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d201      	bcs.n	8001c7e <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001c7e:	697b      	ldr	r3, [r7, #20]
    }
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000024 	.word	0x20000024
 8001c8c:	20000028 	.word	0x20000028
 8001c90:	20000104 	.word	0x20000104

08001c94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 808a 	beq.w	8001dc0 <xTaskPriorityDisinherit+0x12c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001cac:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <xTaskPriorityDisinherit+0x138>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d009      	beq.n	8001cca <xTaskPriorityDisinherit+0x36>
 8001cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cba:	f383 8811 	msr	BASEPRI, r3
 8001cbe:	f3bf 8f6f 	isb	sy
 8001cc2:	f3bf 8f4f 	dsb	sy
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e7fe      	b.n	8001cc8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <xTaskPriorityDisinherit+0x52>
 8001cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e7fe      	b.n	8001ce4 <xTaskPriorityDisinherit+0x50>
            ( pxTCB->uxMutexesHeld )--;
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d061      	beq.n	8001dc0 <xTaskPriorityDisinherit+0x12c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d15d      	bne.n	8001dc0 <xTaskPriorityDisinherit+0x12c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe facf 	bl	80002ac <uxListRemove>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10a      	bne.n	8001d2a <xTaskPriorityDisinherit+0x96>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	2201      	movs	r2, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <xTaskPriorityDisinherit+0x13c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4013      	ands	r3, r2
 8001d26:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <xTaskPriorityDisinherit+0x13c>)
 8001d28:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	f1c3 0205 	rsb	r2, r3, #5
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	2201      	movs	r2, #1
 8001d44:	409a      	lsls	r2, r3
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <xTaskPriorityDisinherit+0x13c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <xTaskPriorityDisinherit+0x13c>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d54:	491f      	ldr	r1, [pc, #124]	; (8001dd4 <xTaskPriorityDisinherit+0x140>)
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3304      	adds	r3, #4
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	3204      	adds	r2, #4
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1d1a      	adds	r2, r3, #4
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <xTaskPriorityDisinherit+0x140>)
 8001d94:	441a      	add	r2, r3
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	615a      	str	r2, [r3, #20]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9e:	490d      	ldr	r1, [pc, #52]	; (8001dd4 <xTaskPriorityDisinherit+0x140>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1c59      	adds	r1, r3, #1
 8001dae:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <xTaskPriorityDisinherit+0x140>)
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4403      	add	r3, r0
 8001dba:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
    }
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000024 	.word	0x20000024
 8001dd0:	20000104 	.word	0x20000104
 8001dd4:	20000028 	.word	0x20000028

08001dd8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 809e 	beq.w	8001f2e <vTaskPriorityDisinheritAfterTimeout+0x156>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8001dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfe:	f383 8811 	msr	BASEPRI, r3
 8001e02:	f3bf 8f6f 	isb	sy
 8001e06:	f3bf 8f4f 	dsb	sy
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	e7fe      	b.n	8001e0c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d902      	bls.n	8001e1e <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	e002      	b.n	8001e24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d07f      	beq.n	8001f2e <vTaskPriorityDisinheritAfterTimeout+0x156>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d17a      	bne.n	8001f2e <vTaskPriorityDisinheritAfterTimeout+0x156>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8001e38:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <vTaskPriorityDisinheritAfterTimeout+0x160>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6a3a      	ldr	r2, [r7, #32]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d109      	bne.n	8001e56 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8001e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e46:	f383 8811 	msr	BASEPRI, r3
 8001e4a:	f3bf 8f6f 	isb	sy
 8001e4e:	f3bf 8f4f 	dsb	sy
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e7fe      	b.n	8001e54 <vTaskPriorityDisinheritAfterTimeout+0x7c>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db04      	blt.n	8001e74 <vTaskPriorityDisinheritAfterTimeout+0x9c>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	f1c3 0205 	rsb	r2, r3, #5
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	6959      	ldr	r1, [r3, #20]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001e84:	4413      	add	r3, r2
 8001e86:	4299      	cmp	r1, r3
 8001e88:	d151      	bne.n	8001f2e <vTaskPriorityDisinheritAfterTimeout+0x156>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fa0c 	bl	80002ac <uxListRemove>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10a      	bne.n	8001eb0 <vTaskPriorityDisinheritAfterTimeout+0xd8>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	4a24      	ldr	r2, [pc, #144]	; (8001f40 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8001eae:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec6:	491d      	ldr	r1, [pc, #116]	; (8001f3c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	6a3a      	ldr	r2, [r7, #32]
 8001eec:	3204      	adds	r2, #4
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	1d1a      	adds	r2, r3, #4
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001f06:	441a      	add	r2, r3
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	615a      	str	r2, [r3, #20]
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f10:	490a      	ldr	r1, [pc, #40]	; (8001f3c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	1c59      	adds	r1, r3, #1
 8001f20:	4806      	ldr	r0, [pc, #24]	; (8001f3c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4403      	add	r3, r0
 8001f2c:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001f2e:	bf00      	nop
 8001f30:	3728      	adds	r7, #40	; 0x28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000024 	.word	0x20000024
 8001f3c:	20000028 	.word	0x20000028
 8001f40:	20000104 	.word	0x20000104

08001f44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f56:	3201      	adds	r2, #1
 8001f58:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 8001f5a:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <pvTaskIncrementMutexHeldCount+0x24>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
    }
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	20000024 	.word	0x20000024

08001f6c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3304      	adds	r3, #4
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f992 	bl	80002ac <uxListRemove>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10b      	bne.n	8001fa6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	2201      	movs	r2, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <prvAddCurrentTaskToDelayedList+0xec>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	4a2d      	ldr	r2, [pc, #180]	; (8002058 <prvAddCurrentTaskToDelayedList+0xec>)
 8001fa4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d124      	bne.n	8001ff8 <prvAddCurrentTaskToDelayedList+0x8c>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d021      	beq.n	8001ff8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fb4:	4b29      	ldr	r3, [pc, #164]	; (800205c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	6892      	ldr	r2, [r2, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	3204      	adds	r2, #4
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1d1a      	adds	r2, r3, #4
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1d      	ldr	r2, [pc, #116]	; (800205c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001fe8:	615a      	str	r2, [r3, #20]
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	; (800205c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001ff6:	e026      	b.n	8002046 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	429a      	cmp	r2, r3
 800200e:	d209      	bcs.n	8002024 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3304      	adds	r3, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4610      	mov	r0, r2
 800201e:	f7fe f90c 	bl	800023a <vListInsert>
}
 8002022:	e010      	b.n	8002046 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <prvAddCurrentTaskToDelayedList+0xe8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3304      	adds	r3, #4
 800202e:	4619      	mov	r1, r3
 8002030:	4610      	mov	r0, r2
 8002032:	f7fe f902 	bl	800023a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d202      	bcs.n	8002046 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002040:	4a09      	ldr	r2, [pc, #36]	; (8002068 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6013      	str	r3, [r2, #0]
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000100 	.word	0x20000100
 8002054:	20000024 	.word	0x20000024
 8002058:	20000104 	.word	0x20000104
 800205c:	200000e8 	.word	0x200000e8
 8002060:	200000b8 	.word	0x200000b8
 8002064:	200000b4 	.word	0x200000b4
 8002068:	2000011c 	.word	0x2000011c

0800206c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002076:	f000 fa41 	bl	80024fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <xTimerCreateTimerTask+0x50>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <xTimerCreateTimerTask+0x54>)
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2303      	movs	r3, #3
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	2246      	movs	r2, #70	; 0x46
 800208e:	490d      	ldr	r1, [pc, #52]	; (80020c4 <xTimerCreateTimerTask+0x58>)
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <xTimerCreateTimerTask+0x5c>)
 8002092:	f7fe fe67 	bl	8000d64 <xTaskCreate>
 8002096:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <xTimerCreateTimerTask+0x46>
 800209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	e7fe      	b.n	80020b0 <xTimerCreateTimerTask+0x44>
        return xReturn;
 80020b2:	687b      	ldr	r3, [r7, #4]
    }
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000158 	.word	0x20000158
 80020c0:	2000015c 	.word	0x2000015c
 80020c4:	08003548 	.word	0x08003548
 80020c8:	0800216d 	.word	0x0800216d

080020cc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80020d8:	e008      	b.n	80020ec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	18d1      	adds	r1, r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f8db 	bl	80022b4 <prvInsertTimerInActiveList>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1ea      	bne.n	80020da <prvReloadTimer+0xe>
        }
    }
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <prvProcessExpiredTimer+0x5c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3304      	adds	r3, #4
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f8c1 	bl	80002ac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff ffc5 	bl	80020cc <prvReloadTimer>
 8002142:	e008      	b.n	8002156 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	b2da      	uxtb	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	4798      	blx	r3
    }
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000150 	.word	0x20000150

0800216c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f857 	bl	800222c <prvGetNextExpireTime>
 800217e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4619      	mov	r1, r3
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f803 	bl	8002190 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800218a:	f000 f8d5 	bl	8002338 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800218e:	e7f1      	b.n	8002174 <prvTimerTask+0x8>

08002190 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800219a:	f7fe ffc3 	bl	8001124 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f866 	bl	8002274 <prvSampleTimeNow>
 80021a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d130      	bne.n	8002212 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <prvProcessTimerOrBlockTask+0x3c>
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d806      	bhi.n	80021cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80021be:	f7fe ffbf 	bl	8001140 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ffa1 	bl	800210c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80021ca:	e024      	b.n	8002216 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <prvProcessTimerOrBlockTask+0x90>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <prvProcessTimerOrBlockTask+0x50>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <prvProcessTimerOrBlockTask+0x52>
 80021e0:	2300      	movs	r3, #0
 80021e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <prvProcessTimerOrBlockTask+0x94>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7fe fd83 	bl	8000cfc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80021f6:	f7fe ffa3 	bl	8001140 <xTaskResumeAll>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <prvProcessTimerOrBlockTask+0x98>)
 8002202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	f3bf 8f6f 	isb	sy
    }
 8002210:	e001      	b.n	8002216 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002212:	f7fe ff95 	bl	8001140 <xTaskResumeAll>
    }
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000154 	.word	0x20000154
 8002224:	20000158 	.word	0x20000158
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <prvGetNextExpireTime+0x44>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <prvGetNextExpireTime+0x16>
 800223e:	2201      	movs	r2, #1
 8002240:	e000      	b.n	8002244 <prvGetNextExpireTime+0x18>
 8002242:	2200      	movs	r2, #0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <prvGetNextExpireTime+0x44>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e001      	b.n	8002260 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002260:	68fb      	ldr	r3, [r7, #12]
    }
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000150 	.word	0x20000150

08002274 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800227c:	f7ff f85a 	bl	8001334 <xTaskGetTickCount>
 8002280:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <prvSampleTimeNow+0x3c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d205      	bcs.n	8002298 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800228c:	f000 f910 	bl	80024b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e002      	b.n	800229e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800229e:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <prvSampleTimeNow+0x3c>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80022a4:	68fb      	ldr	r3, [r7, #12]
    }
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000160 	.word	0x20000160

080022b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d812      	bhi.n	8002300 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d302      	bcc.n	80022ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e01b      	b.n	8002326 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <prvInsertTimerInActiveList+0x7c>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3304      	adds	r3, #4
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f7fd ff9e 	bl	800023a <vListInsert>
 80022fe:	e012      	b.n	8002326 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d206      	bcs.n	8002316 <prvInsertTimerInActiveList+0x62>
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d302      	bcc.n	8002316 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002310:	2301      	movs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e007      	b.n	8002326 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <prvInsertTimerInActiveList+0x80>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3304      	adds	r3, #4
 800231e:	4619      	mov	r1, r3
 8002320:	4610      	mov	r0, r2
 8002322:	f7fd ff8a 	bl	800023a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002326:	697b      	ldr	r3, [r7, #20]
    }
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000154 	.word	0x20000154
 8002334:	20000150 	.word	0x20000150

08002338 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800233e:	e0a5      	b.n	800248c <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f2c0 80a1 	blt.w	800248a <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	3304      	adds	r3, #4
 8002358:	4618      	mov	r0, r3
 800235a:	f7fd ffa7 	bl	80002ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff87 	bl	8002274 <prvSampleTimeNow>
 8002366:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	3b01      	subs	r3, #1
 800236c:	2b08      	cmp	r3, #8
 800236e:	f200 808d 	bhi.w	800248c <prvProcessReceivedCommands+0x154>
 8002372:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <prvProcessReceivedCommands+0x40>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	0800239d 	.word	0x0800239d
 800237c:	0800239d 	.word	0x0800239d
 8002380:	08002405 	.word	0x08002405
 8002384:	08002419 	.word	0x08002419
 8002388:	08002461 	.word	0x08002461
 800238c:	0800239d 	.word	0x0800239d
 8002390:	0800239d 	.word	0x0800239d
 8002394:	08002405 	.word	0x08002405
 8002398:	08002419 	.word	0x08002419
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	18d1      	adds	r1, r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	69f8      	ldr	r0, [r7, #28]
 80023bc:	f7ff ff7a 	bl	80022b4 <prvInsertTimerInActiveList>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d062      	beq.n	800248c <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4413      	add	r3, r2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4619      	mov	r1, r3
 80023e0:	69f8      	ldr	r0, [r7, #28]
 80023e2:	f7ff fe73 	bl	80020cc <prvReloadTimer>
 80023e6:	e008      	b.n	80023fa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	69f8      	ldr	r0, [r7, #28]
 8002400:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002402:	e043      	b.n	800248c <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	b2da      	uxtb	r2, r3
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8002416:	e039      	b.n	800248c <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <prvProcessReceivedCommands+0x114>
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	e7fe      	b.n	800244a <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	18d1      	adds	r1, r2, r3
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	69f8      	ldr	r0, [r7, #28]
 800245a:	f7ff ff2b 	bl	80022b4 <prvInsertTimerInActiveList>
                        break;
 800245e:	e015      	b.n	800248c <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 800246e:	69f8      	ldr	r0, [r7, #28]
 8002470:	f000 fb20 	bl	8002ab4 <vPortFree>
 8002474:	e00a      	b.n	800248c <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	b2da      	uxtb	r2, r3
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002488:	e000      	b.n	800248c <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800248a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <prvProcessReceivedCommands+0x174>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f107 0108 	add.w	r1, r7, #8
 8002494:	2200      	movs	r2, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f932 	bl	8000700 <xQueueReceive>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f af4e 	bne.w	8002340 <prvProcessReceivedCommands+0x8>
        }
    }
 80024a4:	bf00      	nop
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000158 	.word	0x20000158

080024b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024b6:	e009      	b.n	80024cc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <prvSwitchTimerLists+0x44>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80024c2:	f04f 31ff 	mov.w	r1, #4294967295
 80024c6:	6838      	ldr	r0, [r7, #0]
 80024c8:	f7ff fe20 	bl	800210c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <prvSwitchTimerLists+0x44>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <prvSwitchTimerLists+0x44>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <prvSwitchTimerLists+0x48>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <prvSwitchTimerLists+0x44>)
 80024e2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <prvSwitchTimerLists+0x48>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
    }
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000150 	.word	0x20000150
 80024f8:	20000154 	.word	0x20000154

080024fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002500:	f000 f94e 	bl	80027a0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <prvCheckForValidListAndQueue+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d113      	bne.n	8002534 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 800250c:	480c      	ldr	r0, [pc, #48]	; (8002540 <prvCheckForValidListAndQueue+0x44>)
 800250e:	f7fd fe67 	bl	80001e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002512:	480c      	ldr	r0, [pc, #48]	; (8002544 <prvCheckForValidListAndQueue+0x48>)
 8002514:	f7fd fe64 	bl	80001e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <prvCheckForValidListAndQueue+0x4c>)
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <prvCheckForValidListAndQueue+0x44>)
 800251c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <prvCheckForValidListAndQueue+0x50>)
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <prvCheckForValidListAndQueue+0x48>)
 8002522:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002524:	2200      	movs	r2, #0
 8002526:	210c      	movs	r1, #12
 8002528:	2005      	movs	r0, #5
 800252a:	f7fd ff7d 	bl	8000428 <xQueueGenericCreate>
 800252e:	4602      	mov	r2, r0
 8002530:	4b02      	ldr	r3, [pc, #8]	; (800253c <prvCheckForValidListAndQueue+0x40>)
 8002532:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002534:	f000 f962 	bl	80027fc <vPortExitCritical>
    }
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000158 	.word	0x20000158
 8002540:	20000128 	.word	0x20000128
 8002544:	2000013c 	.word	0x2000013c
 8002548:	20000150 	.word	0x20000150
 800254c:	20000154 	.word	0x20000154

08002550 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3b04      	subs	r3, #4
 8002560:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002568:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3b04      	subs	r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f023 0201 	bic.w	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3b04      	subs	r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002580:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <pxPortInitialiseStack+0x64>)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	3b14      	subs	r3, #20
 800258a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3b04      	subs	r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f06f 0202 	mvn.w	r2, #2
 800259e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3b20      	subs	r3, #32
 80025a4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	080025b9 	.word	0x080025b9

080025b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <prvTaskExitError+0x50>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d009      	beq.n	80025e0 <prvTaskExitError+0x28>
 80025cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d0:	f383 8811 	msr	BASEPRI, r3
 80025d4:	f3bf 8f6f 	isb	sy
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	e7fe      	b.n	80025de <prvTaskExitError+0x26>
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80025f2:	bf00      	nop
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0fc      	beq.n	80025f4 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000004 	.word	0x20000004
 800260c:	00000000 	.word	0x00000000

08002610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <pxCurrentTCBConst2>)
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	6808      	ldr	r0, [r1, #0]
 8002616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800261a:	f380 8809 	msr	PSP, r0
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f380 8811 	msr	BASEPRI, r0
 800262a:	4770      	bx	lr
 800262c:	f3af 8000 	nop.w

08002630 <pxCurrentTCBConst2>:
 8002630:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop

08002638 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002638:	4808      	ldr	r0, [pc, #32]	; (800265c <prvPortStartFirstTask+0x24>)
 800263a:	6800      	ldr	r0, [r0, #0]
 800263c:	6800      	ldr	r0, [r0, #0]
 800263e:	f380 8808 	msr	MSP, r0
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f380 8814 	msr	CONTROL, r0
 800264a:	b662      	cpsie	i
 800264c:	b661      	cpsie	f
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	df00      	svc	0
 8002658:	bf00      	nop
 800265a:	0000      	.short	0x0000
 800265c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop

08002664 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800266a:	4b44      	ldr	r3, [pc, #272]	; (800277c <xPortStartScheduler+0x118>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a44      	ldr	r2, [pc, #272]	; (8002780 <xPortStartScheduler+0x11c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d109      	bne.n	8002688 <xPortStartScheduler+0x24>
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	e7fe      	b.n	8002686 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002688:	4b3c      	ldr	r3, [pc, #240]	; (800277c <xPortStartScheduler+0x118>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3d      	ldr	r2, [pc, #244]	; (8002784 <xPortStartScheduler+0x120>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d109      	bne.n	80026a6 <xPortStartScheduler+0x42>
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e7fe      	b.n	80026a4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026a6:	4b38      	ldr	r3, [pc, #224]	; (8002788 <xPortStartScheduler+0x124>)
 80026a8:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	22ff      	movs	r2, #255	; 0xff
 80026b6:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b30      	ldr	r3, [pc, #192]	; (800278c <xPortStartScheduler+0x128>)
 80026cc:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026ce:	4b30      	ldr	r3, [pc, #192]	; (8002790 <xPortStartScheduler+0x12c>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026d4:	e009      	b.n	80026ea <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <xPortStartScheduler+0x12c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3b01      	subs	r3, #1
 80026dc:	4a2c      	ldr	r2, [pc, #176]	; (8002790 <xPortStartScheduler+0x12c>)
 80026de:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f2:	2b80      	cmp	r3, #128	; 0x80
 80026f4:	d0ef      	beq.n	80026d6 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <xPortStartScheduler+0x12c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d009      	beq.n	8002716 <xPortStartScheduler+0xb2>
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	e7fe      	b.n	8002714 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <xPortStartScheduler+0x12c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <xPortStartScheduler+0x12c>)
 800271e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <xPortStartScheduler+0x12c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <xPortStartScheduler+0x12c>)
 800272a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <xPortStartScheduler+0x130>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a16      	ldr	r2, [pc, #88]	; (8002794 <xPortStartScheduler+0x130>)
 800273a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800273e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <xPortStartScheduler+0x130>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <xPortStartScheduler+0x130>)
 8002746:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800274a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800274c:	f000 f8d4 	bl	80028f8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <xPortStartScheduler+0x134>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002756:	f000 f8e9 	bl	800292c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <xPortStartScheduler+0x138>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <xPortStartScheduler+0x138>)
 8002760:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002764:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002766:	f7ff ff67 	bl	8002638 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800276a:	f7fe ff09 	bl	8001580 <vTaskSwitchContext>
    prvTaskExitError();
 800276e:	f7ff ff23 	bl	80025b8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	e000ed00 	.word	0xe000ed00
 8002780:	410fc271 	.word	0x410fc271
 8002784:	410fc270 	.word	0x410fc270
 8002788:	e000e400 	.word	0xe000e400
 800278c:	20000164 	.word	0x20000164
 8002790:	20000168 	.word	0x20000168
 8002794:	e000ed20 	.word	0xe000ed20
 8002798:	20000004 	.word	0x20000004
 800279c:	e000ef34 	.word	0xe000ef34

080027a0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <vPortEnterCritical+0x54>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <vPortEnterCritical+0x54>)
 80027c0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <vPortEnterCritical+0x54>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10e      	bne.n	80027e8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <vPortEnterCritical+0x58>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d009      	beq.n	80027e8 <vPortEnterCritical+0x48>
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	e7fe      	b.n	80027e6 <vPortEnterCritical+0x46>
    }
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	20000004 	.word	0x20000004
 80027f8:	e000ed04 	.word	0xe000ed04

080027fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <vPortExitCritical+0x4c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <vPortExitCritical+0x22>
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	e7fe      	b.n	800281c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <vPortExitCritical+0x4c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3b01      	subs	r3, #1
 8002824:	4a08      	ldr	r2, [pc, #32]	; (8002848 <vPortExitCritical+0x4c>)
 8002826:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <vPortExitCritical+0x4c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <vPortExitCritical+0x3e>
 8002830:	2300      	movs	r3, #0
 8002832:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000004 	.word	0x20000004
 800284c:	00000000 	.word	0x00000000

08002850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002850:	f3ef 8009 	mrs	r0, PSP
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <pxCurrentTCBConst>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f01e 0f10 	tst.w	lr, #16
 8002860:	bf08      	it	eq
 8002862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800286a:	6010      	str	r0, [r2, #0]
 800286c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002874:	f380 8811 	msr	BASEPRI, r0
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f7fe fe7e 	bl	8001580 <vTaskSwitchContext>
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f380 8811 	msr	BASEPRI, r0
 800288c:	bc09      	pop	{r0, r3}
 800288e:	6819      	ldr	r1, [r3, #0]
 8002890:	6808      	ldr	r0, [r1, #0]
 8002892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002896:	f01e 0f10 	tst.w	lr, #16
 800289a:	bf08      	it	eq
 800289c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80028a0:	f380 8809 	msr	PSP, r0
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	f3af 8000 	nop.w

080028b0 <pxCurrentTCBConst>:
 80028b0:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop

080028b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
        __asm volatile
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80028d0:	f7fe fd40 	bl	8001354 <xTaskIncrementTick>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <SysTick_Handler+0x3c>)
 80028dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	e000ed04 	.word	0xe000ed04

080028f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <vPortSetupTimerInterrupt+0x28>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <vPortSetupTimerInterrupt+0x2c>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <vPortSetupTimerInterrupt+0x30>)
 800290a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800290e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <vPortSetupTimerInterrupt+0x28>)
 8002912:	2207      	movs	r2, #7
 8002914:	601a      	str	r2, [r3, #0]
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e010 	.word	0xe000e010
 8002924:	e000e018 	.word	0xe000e018
 8002928:	e000e014 	.word	0xe000e014

0800292c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800292c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800293c <vPortEnableVFP+0x10>
 8002930:	6801      	ldr	r1, [r0, #0]
 8002932:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002936:	6001      	str	r1, [r0, #0]
 8002938:	4770      	bx	lr
 800293a:	0000      	.short	0x0000
 800293c:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop

08002944 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002950:	f7fe fbe8 	bl	8001124 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002954:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <pvPortMalloc+0x15c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800295c:	f000 f904 	bl	8002b68 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d012      	beq.n	800298c <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002966:	2208      	movs	r2, #8
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	3308      	adds	r3, #8
 8002972:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	43db      	mvns	r3, r3
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d804      	bhi.n	8002988 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4413      	add	r3, r2
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	e001      	b.n	800298c <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db6f      	blt.n	8002a72 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d06c      	beq.n	8002a72 <pvPortMalloc+0x12e>
 8002998:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <pvPortMalloc+0x160>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d867      	bhi.n	8002a72 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <pvPortMalloc+0x164>)
 80029a4:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80029a6:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <pvPortMalloc+0x164>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029ac:	e004      	b.n	80029b8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d903      	bls.n	80029ca <pvPortMalloc+0x86>
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f1      	bne.n	80029ae <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80029ca:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <pvPortMalloc+0x15c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d04e      	beq.n	8002a72 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2208      	movs	r2, #8
 80029da:	4413      	add	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	1ad2      	subs	r2, r2, r3
 80029ee:	2308      	movs	r3, #8
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d91e      	bls.n	8002a34 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80029f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d009      	beq.n	8002a1c <pvPortMalloc+0xd8>
        __asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e7fe      	b.n	8002a1a <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad2      	subs	r2, r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f000 f8f6 	bl	8002c20 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <pvPortMalloc+0x160>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <pvPortMalloc+0x160>)
 8002a40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a42:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <pvPortMalloc+0x160>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <pvPortMalloc+0x168>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d203      	bcs.n	8002a56 <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <pvPortMalloc+0x160>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a16      	ldr	r2, [pc, #88]	; (8002aac <pvPortMalloc+0x168>)
 8002a54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <pvPortMalloc+0x16c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <pvPortMalloc+0x16c>)
 8002a70:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002a72:	f7fe fb65 	bl	8001140 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d009      	beq.n	8002a94 <pvPortMalloc+0x150>
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e7fe      	b.n	8002a92 <pvPortMalloc+0x14e>
    return pvReturn;
 8002a94:	69fb      	ldr	r3, [r7, #28]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3728      	adds	r7, #40	; 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20001d74 	.word	0x20001d74
 8002aa4:	20001d78 	.word	0x20001d78
 8002aa8:	20001d6c 	.word	0x20001d6c
 8002aac:	20001d7c 	.word	0x20001d7c
 8002ab0:	20001d80 	.word	0x20001d80

08002ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d047      	beq.n	8002b56 <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	425b      	negs	r3, r3
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db09      	blt.n	8002af0 <vPortFree+0x3c>
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e7fe      	b.n	8002aee <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <vPortFree+0x58>
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	e7fe      	b.n	8002b0a <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0fdb      	lsrs	r3, r3, #31
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01c      	beq.n	8002b56 <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d118      	bne.n	8002b56 <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002b30:	f7fe faf8 	bl	8001124 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <vPortFree+0xac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <vPortFree+0xac>)
 8002b40:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b42:	6938      	ldr	r0, [r7, #16]
 8002b44:	f000 f86c 	bl	8002c20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <vPortFree+0xb0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <vPortFree+0xb0>)
 8002b50:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002b52:	f7fe faf5 	bl	8001140 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20001d78 	.word	0x20001d78
 8002b64:	20001d84 	.word	0x20001d84

08002b68 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b72:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <prvHeapInit+0xa4>)
 8002b76:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00c      	beq.n	8002b9c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3307      	adds	r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0307 	bic.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <prvHeapInit+0xa4>)
 8002b98:	4413      	add	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <prvHeapInit+0xa8>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <prvHeapInit+0xa8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0307 	bic.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <prvHeapInit+0xac>)
 8002bc8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <prvHeapInit+0xac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <prvHeapInit+0xac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	1ad2      	subs	r2, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <prvHeapInit+0xac>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <prvHeapInit+0xb0>)
 8002bf6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <prvHeapInit+0xb4>)
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	2000016c 	.word	0x2000016c
 8002c10:	20001d6c 	.word	0x20001d6c
 8002c14:	20001d74 	.word	0x20001d74
 8002c18:	20001d7c 	.word	0x20001d7c
 8002c1c:	20001d78 	.word	0x20001d78

08002c20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <prvInsertBlockIntoFreeList+0xac>)
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e002      	b.n	8002c34 <prvInsertBlockIntoFreeList+0x14>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d8f7      	bhi.n	8002c2e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	4413      	add	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d108      	bne.n	8002c62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	441a      	add	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	441a      	add	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d118      	bne.n	8002ca8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d00d      	beq.n	8002c9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e008      	b.n	8002cb0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e003      	b.n	8002cb0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d002      	beq.n	8002cbe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20001d6c 	.word	0x20001d6c
 8002cd0:	20001d74 	.word	0x20001d74

08002cd4 <extint_clearFlag>:
		}
	extint0_Callback[lineId]=clbk;
	}
}
void extint_clearFlag(u8 lineId)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
	if (lineId>=0 && lineId<32)
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b1f      	cmp	r3, #31
 8002ce2:	d80a      	bhi.n	8002cfa <extint_clearFlag+0x26>
	{
		/* clearing Interrupt on the line */
		SET_BIT(EXTI_PR1_REG, lineId);
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <extint_clearFlag+0x48>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	79fa      	ldrb	r2, [r7, #7]
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <extint_clearFlag+0x48>)
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6013      	str	r3, [r2, #0]
	}
	else
	{
		SET_BIT(EXTI_PR2_REG, lineId);
	}
}
 8002cf8:	e009      	b.n	8002d0e <extint_clearFlag+0x3a>
		SET_BIT(EXTI_PR2_REG, lineId);
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <extint_clearFlag+0x4c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	79fa      	ldrb	r2, [r7, #7]
 8002d00:	2101      	movs	r1, #1
 8002d02:	fa01 f202 	lsl.w	r2, r1, r2
 8002d06:	4611      	mov	r1, r2
 8002d08:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <extint_clearFlag+0x4c>)
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	6013      	str	r3, [r2, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010414 	.word	0x40010414
 8002d20:	40010434 	.word	0x40010434

08002d24 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
		extint_clearFlag(EXTI0);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7ff ffd3 	bl	8002cd4 <extint_clearFlag>
		if (extint0_Callback[EXTI0] != NULL)
 8002d2e:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <EXTI0_IRQHandler+0x1c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <EXTI0_IRQHandler+0x18>
		{
			extint0_Callback[EXTI0]();
 8002d36:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <EXTI0_IRQHandler+0x1c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4798      	blx	r3
		}
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20001d88 	.word	0x20001d88

08002d44 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
		extint_clearFlag(EXTI13);
 8002d48:	200d      	movs	r0, #13
 8002d4a:	f7ff ffc3 	bl	8002cd4 <extint_clearFlag>
		if (extint0_Callback[EXTI13] != NULL)
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <EXTI15_10_IRQHandler+0x1c>)
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <EXTI15_10_IRQHandler+0x18>
		{
			extint0_Callback[EXTI13]();
 8002d56:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <EXTI15_10_IRQHandler+0x1c>)
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	4798      	blx	r3
		}
}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20001d88 	.word	0x20001d88

08002d64 <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	71bb      	strb	r3, [r7, #6]
 8002d72:	4613      	mov	r3, r2
 8002d74:	717b      	strb	r3, [r7, #5]
	u8 copy_u8Moder = 0, copy_OTYPER= 0 , copy_OSPEEDR = 0 , copy_PUPDR = 0  ;
 8002d76:	2300      	movs	r3, #0
 8002d78:	73fb      	strb	r3, [r7, #15]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73bb      	strb	r3, [r7, #14]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	737b      	strb	r3, [r7, #13]
 8002d82:	2300      	movs	r3, #0
 8002d84:	733b      	strb	r3, [r7, #12]

	copy_u8Moder |= (CHECK_BIT(Copy_u8Mode,6)<<1) | CHECK_BIT(Copy_u8Mode,5) ;
 8002d86:	797b      	ldrb	r3, [r7, #5]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	b25a      	sxtb	r2, r3
 8002d96:	797b      	ldrb	r3, [r7, #5]
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	b25b      	sxtb	r3, r3
 8002da4:	4313      	orrs	r3, r2
 8002da6:	b25a      	sxtb	r2, r3
 8002da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	73fb      	strb	r3, [r7, #15]
	copy_OTYPER  |= CHECK_BIT(Copy_u8Mode,4);
 8002db2:	797b      	ldrb	r3, [r7, #5]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	b25a      	sxtb	r2, r3
 8002dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	b25b      	sxtb	r3, r3
 8002dc8:	73bb      	strb	r3, [r7, #14]
	copy_OSPEEDR |= (CHECK_BIT(Copy_u8Mode,3)<<1) | CHECK_BIT(Copy_u8Mode,2) ;
 8002dca:	797b      	ldrb	r3, [r7, #5]
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	b25a      	sxtb	r2, r3
 8002dda:	797b      	ldrb	r3, [r7, #5]
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	b25b      	sxtb	r3, r3
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b25a      	sxtb	r2, r3
 8002dec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	737b      	strb	r3, [r7, #13]
	copy_PUPDR   |=(CHECK_BIT(Copy_u8Mode,1)<<1) | CHECK_BIT(Copy_u8Mode,0) ;
 8002df6:	797b      	ldrb	r3, [r7, #5]
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	b25b      	sxtb	r3, r3
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	b25a      	sxtb	r2, r3
 8002e06:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b25a      	sxtb	r2, r3
 8002e14:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b25b      	sxtb	r3, r3
 8002e1c:	733b      	strb	r3, [r7, #12]
	switch(Copy_u8Port)
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	3b11      	subs	r3, #17
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	f200 8198 	bhi.w	8003158 <GPIO_voidSetPinDirection+0x3f4>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <GPIO_voidSetPinDirection+0xcc>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002f1f 	.word	0x08002f1f
 8002e38:	08002fe3 	.word	0x08002fe3
 8002e3c:	0800309d 	.word	0x0800309d
	{
		case PORTA :

			if(Copy_Pin <= PIN7)
 8002e40:	79bb      	ldrb	r3, [r7, #6]
 8002e42:	2b07      	cmp	r3, #7
 8002e44:	d833      	bhi.n	8002eae <GPIO_voidSetPinDirection+0x14a>
			{
				/* 			RESET		*/
				GPIOA->MODER |= (copy_u8Moder << 2*Copy_Pin) ;
 8002e46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	7bf9      	ldrb	r1, [r7, #15]
 8002e4e:	79ba      	ldrb	r2, [r7, #6]
 8002e50:	0052      	lsls	r2, r2, #1
 8002e52:	fa01 f202 	lsl.w	r2, r1, r2
 8002e56:	4611      	mov	r1, r2
 8002e58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6013      	str	r3, [r2, #0]
				GPIOA->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8002e60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	7bb9      	ldrb	r1, [r7, #14]
 8002e68:	79ba      	ldrb	r2, [r7, #6]
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	4611      	mov	r1, r2
 8002e70:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6053      	str	r3, [r2, #4]
				GPIOA->OSPEEDR |= (copy_OSPEEDR << 2*Copy_Pin) ;
 8002e78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	7b79      	ldrb	r1, [r7, #13]
 8002e80:	79ba      	ldrb	r2, [r7, #6]
 8002e82:	0052      	lsls	r2, r2, #1
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	4611      	mov	r1, r2
 8002e8a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	6093      	str	r3, [r2, #8]
				GPIOA->PUPDR  |= (copy_PUPDR<< 2*copy_PUPDR);
 8002e92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	7b39      	ldrb	r1, [r7, #12]
 8002e9a:	7b3a      	ldrb	r2, [r7, #12]
 8002e9c:	0052      	lsls	r2, r2, #1
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 8002eac:	e156      	b.n	800315c <GPIO_voidSetPinDirection+0x3f8>
			else if (Copy_Pin <= PIN15 )
 8002eae:	79bb      	ldrb	r3, [r7, #6]
 8002eb0:	2b0f      	cmp	r3, #15
 8002eb2:	f200 8153 	bhi.w	800315c <GPIO_voidSetPinDirection+0x3f8>
				GPIOA->MODER |= (copy_u8Moder <<  (2*Copy_Pin));
 8002eb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	7bf9      	ldrb	r1, [r7, #15]
 8002ebe:	79ba      	ldrb	r2, [r7, #6]
 8002ec0:	0052      	lsls	r2, r2, #1
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6013      	str	r3, [r2, #0]
				GPIOA->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8002ed0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	7bb9      	ldrb	r1, [r7, #14]
 8002ed8:	79ba      	ldrb	r2, [r7, #6]
 8002eda:	fa01 f202 	lsl.w	r2, r1, r2
 8002ede:	4611      	mov	r1, r2
 8002ee0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6053      	str	r3, [r2, #4]
				GPIOA->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 8002ee8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	7b79      	ldrb	r1, [r7, #13]
 8002ef0:	79ba      	ldrb	r2, [r7, #6]
 8002ef2:	0052      	lsls	r2, r2, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	4611      	mov	r1, r2
 8002efa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002efe:	430b      	orrs	r3, r1
 8002f00:	6093      	str	r3, [r2, #8]
				GPIOA->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 8002f02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	7b39      	ldrb	r1, [r7, #12]
 8002f0a:	79ba      	ldrb	r2, [r7, #6]
 8002f0c:	0052      	lsls	r2, r2, #1
 8002f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f12:	4611      	mov	r1, r2
 8002f14:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	60d3      	str	r3, [r2, #12]
			break;
 8002f1c:	e11e      	b.n	800315c <GPIO_voidSetPinDirection+0x3f8>
		case PORTB :

			if(Copy_Pin <= PIN7)
 8002f1e:	79bb      	ldrb	r3, [r7, #6]
 8002f20:	2b07      	cmp	r3, #7
 8002f22:	d82b      	bhi.n	8002f7c <GPIO_voidSetPinDirection+0x218>
			{
				/* 			RESET		*/
				GPIOB->MODER |= (copy_u8Moder << 2*Copy_Pin) ;
 8002f24:	4b93      	ldr	r3, [pc, #588]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	7bf9      	ldrb	r1, [r7, #15]
 8002f2a:	79ba      	ldrb	r2, [r7, #6]
 8002f2c:	0052      	lsls	r2, r2, #1
 8002f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f32:	4611      	mov	r1, r2
 8002f34:	4a8f      	ldr	r2, [pc, #572]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f36:	430b      	orrs	r3, r1
 8002f38:	6013      	str	r3, [r2, #0]
				GPIOB->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8002f3a:	4b8e      	ldr	r3, [pc, #568]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	7bb9      	ldrb	r1, [r7, #14]
 8002f40:	79ba      	ldrb	r2, [r7, #6]
 8002f42:	fa01 f202 	lsl.w	r2, r1, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4a8a      	ldr	r2, [pc, #552]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	6053      	str	r3, [r2, #4]
				GPIOB->OSPEEDR |= (copy_OSPEEDR << 2*Copy_Pin) ;
 8002f4e:	4b89      	ldr	r3, [pc, #548]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	7b79      	ldrb	r1, [r7, #13]
 8002f54:	79ba      	ldrb	r2, [r7, #6]
 8002f56:	0052      	lsls	r2, r2, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4a85      	ldr	r2, [pc, #532]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6093      	str	r3, [r2, #8]
				GPIOB->PUPDR  |= (copy_PUPDR<< 2*copy_PUPDR);
 8002f64:	4b83      	ldr	r3, [pc, #524]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	7b39      	ldrb	r1, [r7, #12]
 8002f6a:	7b3a      	ldrb	r2, [r7, #12]
 8002f6c:	0052      	lsls	r2, r2, #1
 8002f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f72:	4611      	mov	r1, r2
 8002f74:	4a7f      	ldr	r2, [pc, #508]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f76:	430b      	orrs	r3, r1
 8002f78:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 8002f7a:	e0f1      	b.n	8003160 <GPIO_voidSetPinDirection+0x3fc>
			else if (Copy_Pin <= PIN15 )
 8002f7c:	79bb      	ldrb	r3, [r7, #6]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	f200 80ee 	bhi.w	8003160 <GPIO_voidSetPinDirection+0x3fc>
				GPIOB->MODER |= (copy_u8Moder << (2*Copy_Pin+10)) ;
 8002f84:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	7bf9      	ldrb	r1, [r7, #15]
 8002f8a:	79ba      	ldrb	r2, [r7, #6]
 8002f8c:	3205      	adds	r2, #5
 8002f8e:	0052      	lsls	r2, r2, #1
 8002f90:	fa01 f202 	lsl.w	r2, r1, r2
 8002f94:	4611      	mov	r1, r2
 8002f96:	4a77      	ldr	r2, [pc, #476]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6013      	str	r3, [r2, #0]
				GPIOB->OTYPER |= (copy_OTYPER << Copy_Pin );
 8002f9c:	4b75      	ldr	r3, [pc, #468]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	7bb9      	ldrb	r1, [r7, #14]
 8002fa2:	79ba      	ldrb	r2, [r7, #6]
 8002fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4a72      	ldr	r2, [pc, #456]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6053      	str	r3, [r2, #4]
				GPIOB->OSPEEDR |= (copy_OSPEEDR << ( 2*Copy_Pin +1 )) ;
 8002fb0:	4b70      	ldr	r3, [pc, #448]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	7b79      	ldrb	r1, [r7, #13]
 8002fb6:	79ba      	ldrb	r2, [r7, #6]
 8002fb8:	0052      	lsls	r2, r2, #1
 8002fba:	3201      	adds	r2, #1
 8002fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4a6c      	ldr	r2, [pc, #432]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6093      	str	r3, [r2, #8]
				GPIOB->PUPDR  |= (copy_PUPDR<< (2*copy_PUPDR+1 ));
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	7b39      	ldrb	r1, [r7, #12]
 8002fce:	7b3a      	ldrb	r2, [r7, #12]
 8002fd0:	0052      	lsls	r2, r2, #1
 8002fd2:	3201      	adds	r2, #1
 8002fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4a66      	ldr	r2, [pc, #408]	; (8003174 <GPIO_voidSetPinDirection+0x410>)
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	60d3      	str	r3, [r2, #12]
			break;
 8002fe0:	e0be      	b.n	8003160 <GPIO_voidSetPinDirection+0x3fc>
		case PORTC :

			if(Copy_Pin <= PIN7)
 8002fe2:	79bb      	ldrb	r3, [r7, #6]
 8002fe4:	2b07      	cmp	r3, #7
 8002fe6:	d82b      	bhi.n	8003040 <GPIO_voidSetPinDirection+0x2dc>
			{
				/* 			RESET		*/
				GPIOC->MODER |= (copy_u8Moder << 2*Copy_Pin) ;
 8002fe8:	4b63      	ldr	r3, [pc, #396]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	7bf9      	ldrb	r1, [r7, #15]
 8002fee:	79ba      	ldrb	r2, [r7, #6]
 8002ff0:	0052      	lsls	r2, r2, #1
 8002ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4a5f      	ldr	r2, [pc, #380]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	6013      	str	r3, [r2, #0]
				GPIOC->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8002ffe:	4b5e      	ldr	r3, [pc, #376]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	7bb9      	ldrb	r1, [r7, #14]
 8003004:	79ba      	ldrb	r2, [r7, #6]
 8003006:	fa01 f202 	lsl.w	r2, r1, r2
 800300a:	4611      	mov	r1, r2
 800300c:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 800300e:	430b      	orrs	r3, r1
 8003010:	6053      	str	r3, [r2, #4]
				GPIOC->OSPEEDR |= (copy_OSPEEDR << 2*Copy_Pin) ;
 8003012:	4b59      	ldr	r3, [pc, #356]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	7b79      	ldrb	r1, [r7, #13]
 8003018:	79ba      	ldrb	r2, [r7, #6]
 800301a:	0052      	lsls	r2, r2, #1
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	4611      	mov	r1, r2
 8003022:	4a55      	ldr	r2, [pc, #340]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8003024:	430b      	orrs	r3, r1
 8003026:	6093      	str	r3, [r2, #8]
				GPIOC->PUPDR  |= (copy_PUPDR<< 2*copy_PUPDR);
 8003028:	4b53      	ldr	r3, [pc, #332]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	7b39      	ldrb	r1, [r7, #12]
 800302e:	7b3a      	ldrb	r2, [r7, #12]
 8003030:	0052      	lsls	r2, r2, #1
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	4611      	mov	r1, r2
 8003038:	4a4f      	ldr	r2, [pc, #316]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 800303a:	430b      	orrs	r3, r1
 800303c:	60d3      	str	r3, [r2, #12]
 800303e:	e02d      	b.n	800309c <GPIO_voidSetPinDirection+0x338>
			}
			else if (Copy_Pin <= PIN15 )
 8003040:	79bb      	ldrb	r3, [r7, #6]
 8003042:	2b0f      	cmp	r3, #15
 8003044:	d82a      	bhi.n	800309c <GPIO_voidSetPinDirection+0x338>
			{
				GPIOC->MODER |= (copy_u8Moder <<  (2*Copy_Pin)) ;
 8003046:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	7bf9      	ldrb	r1, [r7, #15]
 800304c:	79ba      	ldrb	r2, [r7, #6]
 800304e:	0052      	lsls	r2, r2, #1
 8003050:	fa01 f202 	lsl.w	r2, r1, r2
 8003054:	4611      	mov	r1, r2
 8003056:	4a48      	ldr	r2, [pc, #288]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8003058:	430b      	orrs	r3, r1
 800305a:	6013      	str	r3, [r2, #0]
				GPIOC->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	7bb9      	ldrb	r1, [r7, #14]
 8003062:	79ba      	ldrb	r2, [r7, #6]
 8003064:	fa01 f202 	lsl.w	r2, r1, r2
 8003068:	4611      	mov	r1, r2
 800306a:	4a43      	ldr	r2, [pc, #268]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 800306c:	430b      	orrs	r3, r1
 800306e:	6053      	str	r3, [r2, #4]
				GPIOC->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 8003070:	4b41      	ldr	r3, [pc, #260]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	7b79      	ldrb	r1, [r7, #13]
 8003076:	79ba      	ldrb	r2, [r7, #6]
 8003078:	0052      	lsls	r2, r2, #1
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	4611      	mov	r1, r2
 8003080:	4a3d      	ldr	r2, [pc, #244]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8003082:	430b      	orrs	r3, r1
 8003084:	6093      	str	r3, [r2, #8]
				GPIOC->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 8003086:	4b3c      	ldr	r3, [pc, #240]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	7b39      	ldrb	r1, [r7, #12]
 800308c:	79ba      	ldrb	r2, [r7, #6]
 800308e:	0052      	lsls	r2, r2, #1
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	4611      	mov	r1, r2
 8003096:	4a38      	ldr	r2, [pc, #224]	; (8003178 <GPIO_voidSetPinDirection+0x414>)
 8003098:	430b      	orrs	r3, r1
 800309a:	60d3      	str	r3, [r2, #12]
			{
				/* error */
			}
		case PORTD :

			if(Copy_Pin <= PIN7)
 800309c:	79bb      	ldrb	r3, [r7, #6]
 800309e:	2b07      	cmp	r3, #7
 80030a0:	d82b      	bhi.n	80030fa <GPIO_voidSetPinDirection+0x396>
			{
				/* 			RESET		*/
				GPIOD->MODER |= (copy_u8Moder << 2*Copy_Pin) ;
 80030a2:	4b36      	ldr	r3, [pc, #216]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	7bf9      	ldrb	r1, [r7, #15]
 80030a8:	79ba      	ldrb	r2, [r7, #6]
 80030aa:	0052      	lsls	r2, r2, #1
 80030ac:	fa01 f202 	lsl.w	r2, r1, r2
 80030b0:	4611      	mov	r1, r2
 80030b2:	4a32      	ldr	r2, [pc, #200]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6013      	str	r3, [r2, #0]
				GPIOD->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 80030b8:	4b30      	ldr	r3, [pc, #192]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	7bb9      	ldrb	r1, [r7, #14]
 80030be:	79ba      	ldrb	r2, [r7, #6]
 80030c0:	fa01 f202 	lsl.w	r2, r1, r2
 80030c4:	4611      	mov	r1, r2
 80030c6:	4a2d      	ldr	r2, [pc, #180]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6053      	str	r3, [r2, #4]
				GPIOD->OSPEEDR |= (copy_OSPEEDR << 2*Copy_Pin) ;
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	7b79      	ldrb	r1, [r7, #13]
 80030d2:	79ba      	ldrb	r2, [r7, #6]
 80030d4:	0052      	lsls	r2, r2, #1
 80030d6:	fa01 f202 	lsl.w	r2, r1, r2
 80030da:	4611      	mov	r1, r2
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 80030de:	430b      	orrs	r3, r1
 80030e0:	6093      	str	r3, [r2, #8]
				GPIOD->PUPDR  |= (copy_PUPDR<< 2*copy_PUPDR);
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	7b39      	ldrb	r1, [r7, #12]
 80030e8:	7b3a      	ldrb	r2, [r7, #12]
 80030ea:	0052      	lsls	r2, r2, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	4611      	mov	r1, r2
 80030f2:	4a22      	ldr	r2, [pc, #136]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 80030f4:	430b      	orrs	r3, r1
 80030f6:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 80030f8:	e034      	b.n	8003164 <GPIO_voidSetPinDirection+0x400>
			else if (Copy_Pin <= PIN15 )
 80030fa:	79bb      	ldrb	r3, [r7, #6]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	d831      	bhi.n	8003164 <GPIO_voidSetPinDirection+0x400>
				GPIOD->MODER |= (copy_u8Moder <<  (2*Copy_Pin)) ;
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	7bf9      	ldrb	r1, [r7, #15]
 8003106:	79ba      	ldrb	r2, [r7, #6]
 8003108:	0052      	lsls	r2, r2, #1
 800310a:	fa01 f202 	lsl.w	r2, r1, r2
 800310e:	4611      	mov	r1, r2
 8003110:	4a1a      	ldr	r2, [pc, #104]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 8003112:	430b      	orrs	r3, r1
 8003114:	6013      	str	r3, [r2, #0]
				GPIOD->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	7bb9      	ldrb	r1, [r7, #14]
 800311c:	79ba      	ldrb	r2, [r7, #6]
 800311e:	fa01 f202 	lsl.w	r2, r1, r2
 8003122:	4611      	mov	r1, r2
 8003124:	4a15      	ldr	r2, [pc, #84]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 8003126:	430b      	orrs	r3, r1
 8003128:	6053      	str	r3, [r2, #4]
				GPIOD->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	7b79      	ldrb	r1, [r7, #13]
 8003130:	79ba      	ldrb	r2, [r7, #6]
 8003132:	0052      	lsls	r2, r2, #1
 8003134:	fa01 f202 	lsl.w	r2, r1, r2
 8003138:	4611      	mov	r1, r2
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 800313c:	430b      	orrs	r3, r1
 800313e:	6093      	str	r3, [r2, #8]
				GPIOD->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	7b39      	ldrb	r1, [r7, #12]
 8003146:	79ba      	ldrb	r2, [r7, #6]
 8003148:	0052      	lsls	r2, r2, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	4611      	mov	r1, r2
 8003150:	4a0a      	ldr	r2, [pc, #40]	; (800317c <GPIO_voidSetPinDirection+0x418>)
 8003152:	430b      	orrs	r3, r1
 8003154:	60d3      	str	r3, [r2, #12]
			break;
 8003156:	e005      	b.n	8003164 <GPIO_voidSetPinDirection+0x400>
		default : break ;	
 8003158:	bf00      	nop
 800315a:	e004      	b.n	8003166 <GPIO_voidSetPinDirection+0x402>
			break;
 800315c:	bf00      	nop
 800315e:	e002      	b.n	8003166 <GPIO_voidSetPinDirection+0x402>
			break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <GPIO_voidSetPinDirection+0x402>
			break;
 8003164:	bf00      	nop
	}

}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	48000400 	.word	0x48000400
 8003178:	48000800 	.word	0x48000800
 800317c:	48000c00 	.word	0x48000c00

08003180 <GPIO_voidTogglePinValue>:
		break ;
	}

}
void GPIO_voidTogglePinValue	(u8 Copy_u8Port, Pin_t Copy_Pin)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	460a      	mov	r2, r1
 800318a:	71fb      	strb	r3, [r7, #7]
 800318c:	4613      	mov	r3, r2
 800318e:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Port){
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	2b12      	cmp	r3, #18
 8003194:	d011      	beq.n	80031ba <GPIO_voidTogglePinValue+0x3a>
 8003196:	2b13      	cmp	r3, #19
 8003198:	d01a      	beq.n	80031d0 <GPIO_voidTogglePinValue+0x50>
 800319a:	2b11      	cmp	r3, #17
 800319c:	d000      	beq.n	80031a0 <GPIO_voidTogglePinValue+0x20>
		case PORTC :
			FLIP_BIT(GPIOC->ODR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 800319e:	e022      	b.n	80031e6 <GPIO_voidTogglePinValue+0x66>
			FLIP_BIT(GPIOA->ODR , Copy_Pin ) ;
 80031a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	79ba      	ldrb	r2, [r7, #6]
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	4611      	mov	r1, r2
 80031b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80031b4:	404b      	eors	r3, r1
 80031b6:	6153      	str	r3, [r2, #20]
			break ;
 80031b8:	e015      	b.n	80031e6 <GPIO_voidTogglePinValue+0x66>
			FLIP_BIT(GPIOB->ODR , Copy_Pin ) ;
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <GPIO_voidTogglePinValue+0x74>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	79ba      	ldrb	r2, [r7, #6]
 80031c0:	2101      	movs	r1, #1
 80031c2:	fa01 f202 	lsl.w	r2, r1, r2
 80031c6:	4611      	mov	r1, r2
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <GPIO_voidTogglePinValue+0x74>)
 80031ca:	404b      	eors	r3, r1
 80031cc:	6153      	str	r3, [r2, #20]
			break ;
 80031ce:	e00a      	b.n	80031e6 <GPIO_voidTogglePinValue+0x66>
			FLIP_BIT(GPIOC->ODR , Copy_Pin ) ;
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <GPIO_voidTogglePinValue+0x78>)
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	79ba      	ldrb	r2, [r7, #6]
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	4611      	mov	r1, r2
 80031de:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <GPIO_voidTogglePinValue+0x78>)
 80031e0:	404b      	eors	r3, r1
 80031e2:	6153      	str	r3, [r2, #20]
			break ;
 80031e4:	bf00      	nop

	}


}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	48000400 	.word	0x48000400
 80031f8:	48000800 	.word	0x48000800

080031fc <GPIO_u8GetPinValue>:

u8 GPIO_u8GetPinValue (u8 Copy_u8Port, Pin_t Copy_Pin)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	460a      	mov	r2, r1
 8003206:	71fb      	strb	r3, [r7, #7]
 8003208:	4613      	mov	r3, r2
 800320a:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]
	if(Copy_Pin > 15)
	{
		/* error */
	}
	switch(Copy_u8Port)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	2b12      	cmp	r3, #18
 8003214:	d00f      	beq.n	8003236 <GPIO_u8GetPinValue+0x3a>
 8003216:	2b13      	cmp	r3, #19
 8003218:	d017      	beq.n	800324a <GPIO_u8GetPinValue+0x4e>
 800321a:	2b11      	cmp	r3, #17
 800321c:	d000      	beq.n	8003220 <GPIO_u8GetPinValue+0x24>
		case PORTC :
			LOC_u8Result  = CHECK_BIT(GPIOC->IDR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 800321e:	e01e      	b.n	800325e <GPIO_u8GetPinValue+0x62>
			LOC_u8Result  = CHECK_BIT(GPIOA->IDR , Copy_Pin ) ;
 8003220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	79bb      	ldrb	r3, [r7, #6]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
			break ;
 8003234:	e013      	b.n	800325e <GPIO_u8GetPinValue+0x62>
			LOC_u8Result  = CHECK_BIT(GPIOB->IDR , Copy_Pin ) ;
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <GPIO_u8GetPinValue+0x70>)
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	79bb      	ldrb	r3, [r7, #6]
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
			break ;
 8003248:	e009      	b.n	800325e <GPIO_u8GetPinValue+0x62>
			LOC_u8Result  = CHECK_BIT(GPIOC->IDR , Copy_Pin ) ;
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <GPIO_u8GetPinValue+0x74>)
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	79bb      	ldrb	r3, [r7, #6]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
			break ;
 800325c:	bf00      	nop
	}
	return LOC_u8Result ;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	48000400 	.word	0x48000400
 8003270:	48000800 	.word	0x48000800

08003274 <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	460a      	mov	r2, r1
 800327e:	71fb      	strb	r3, [r7, #7]
 8003280:	4613      	mov	r3, r2
 8003282:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 8003284:	79bb      	ldrb	r3, [r7, #6]
 8003286:	2b1f      	cmp	r3, #31
 8003288:	d828      	bhi.n	80032dc <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d00f      	beq.n	80032b0 <RCC_voidEnableClock+0x3c>
 8003290:	2b02      	cmp	r3, #2
 8003292:	d018      	beq.n	80032c6 <RCC_voidEnableClock+0x52>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d000      	beq.n	800329a <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 8003298:	e020      	b.n	80032dc <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <RCC_voidEnableClock+0x74>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	79ba      	ldrb	r2, [r7, #6]
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	4611      	mov	r1, r2
 80032a8:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <RCC_voidEnableClock+0x74>)
 80032aa:	430b      	orrs	r3, r1
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e015      	b.n	80032dc <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <RCC_voidEnableClock+0x78>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	79ba      	ldrb	r2, [r7, #6]
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	4611      	mov	r1, r2
 80032be:	4a0b      	ldr	r2, [pc, #44]	; (80032ec <RCC_voidEnableClock+0x78>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e00a      	b.n	80032dc <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <RCC_voidEnableClock+0x7c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	79ba      	ldrb	r2, [r7, #6]
 80032cc:	2101      	movs	r1, #1
 80032ce:	fa01 f202 	lsl.w	r2, r1, r2
 80032d2:	4611      	mov	r1, r2
 80032d4:	4a06      	ldr	r2, [pc, #24]	; (80032f0 <RCC_voidEnableClock+0x7c>)
 80032d6:	430b      	orrs	r3, r1
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	bf00      	nop
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40021014 	.word	0x40021014
 80032ec:	4002101c 	.word	0x4002101c
 80032f0:	40021018 	.word	0x40021018

080032f4 <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <RCC_voidInitSysClocks+0x48>)
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <RCC_voidInitSysClocks+0x4c>)
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
		SET_BIT(RCC_CR, RCC_CR_HSEON);
		while(!(CHECK_BIT(RCC_CR, RCC_CR_HSERDY)));   // Wait Until CLK Ready
		RCC_CFGR |= RCC_CFGR_SW_HSE;
	    SET_BIT(RCC_CR, RCC_CR_CSSON);
	#elif  RCC_CLOCK_TYPE == RCC_HSI
	    SET_BIT(RCC_CR, RCC_CR_HSION);
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <RCC_voidInitSysClocks+0x48>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0c      	ldr	r2, [pc, #48]	; (800333c <RCC_voidInitSysClocks+0x48>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6013      	str	r3, [r2, #0]
	//	while(!(CHECK_BIT(RCC_CR, RCC_CR_HSIRDY)));   // Wait Until CLK Ready
        RCC_CFGR |= RCC_CFGR_SW_HSI;
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <RCC_voidInitSysClocks+0x4c>)
 8003312:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <RCC_voidInitSysClocks+0x4c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <RCC_voidInitSysClocks+0x4c>)
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <RCC_voidInitSysClocks+0x4c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <RCC_voidInitSysClocks+0x4c>)
 8003322:	4a07      	ldr	r2, [pc, #28]	; (8003340 <RCC_voidInitSysClocks+0x4c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <RCC_voidInitSysClocks+0x4c>)
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <RCC_voidInitSysClocks+0x4c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	40021004 	.word	0x40021004

08003344 <T1_voidGreenLed>:
/*******************************	Flags	*************************************/
u8 Glob_u8BtnFlag ;

/*******************************	Tasks **************************************/
void T1_voidGreenLed(void * pvParam)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Check Global Flag
		if(Glob_u8BtnFlag == 1)
 800334c:	4b07      	ldr	r3, [pc, #28]	; (800336c <T1_voidGreenLed+0x28>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d106      	bne.n	8003362 <T1_voidGreenLed+0x1e>
		{
			// Reset Global Flag
			Glob_u8BtnFlag = 0 ;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <T1_voidGreenLed+0x28>)
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
			//	Toggle LED
			GPIO_voidTogglePinValue(GREEN_BUILT_IN_LED);
 800335a:	2105      	movs	r1, #5
 800335c:	2011      	movs	r0, #17
 800335e:	f7ff ff0f 	bl	8003180 <GPIO_voidTogglePinValue>
		}
		vTaskDelay(500);
 8003362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003366:	f7fd fe59 	bl	800101c <vTaskDelay>
		if(Glob_u8BtnFlag == 1)
 800336a:	e7ef      	b.n	800334c <T1_voidGreenLed+0x8>
 800336c:	20001dd0 	.word	0x20001dd0

08003370 <T2_voidButtonState>:
	}
}
void T2_voidButtonState(void * pvParam)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	u8 btnState ;

	while(1)
	{
		btnState  = GPIO_u8GetPinValue(INTERNAL_BTN);
 8003378:	210d      	movs	r1, #13
 800337a:	2013      	movs	r0, #19
 800337c:	f7ff ff3e 	bl	80031fc <GPIO_u8GetPinValue>
 8003380:	4603      	mov	r3, r0
 8003382:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive( pushButtonSemaphore ) ;
 8003384:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <T2_voidButtonState+0x58>)
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	f7fd f8bd 	bl	800050c <xQueueGenericSend>
		BaseType_t LOC_u8Error = 	xSemaphoreTake( pushButtonSemaphore, ( TickType_t ) 10 )  ;
 8003392:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <T2_voidButtonState+0x58>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	210a      	movs	r1, #10
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd fa8d 	bl	80008b8 <xQueueSemaphoreTake>
 800339e:	60b8      	str	r0, [r7, #8]

		if( LOC_u8Error == pdTRUE )
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d10c      	bne.n	80033c0 <T2_voidButtonState+0x50>
		{
			if(btnState == 0)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d102      	bne.n	80033b2 <T2_voidButtonState+0x42>
			{
				Glob_u8BtnFlag = 1 ;
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <T2_voidButtonState+0x5c>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
			}
            xSemaphoreGive( pushButtonSemaphore );
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <T2_voidButtonState+0x58>)
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	2300      	movs	r3, #0
 80033b8:	2200      	movs	r2, #0
 80033ba:	2100      	movs	r1, #0
 80033bc:	f7fd f8a6 	bl	800050c <xQueueGenericSend>
		}

		vTaskDelay(50);
 80033c0:	2032      	movs	r0, #50	; 0x32
 80033c2:	f7fd fe2b 	bl	800101c <vTaskDelay>
	{
 80033c6:	e7d7      	b.n	8003378 <T2_voidButtonState+0x8>
 80033c8:	20001dcc 	.word	0x20001dcc
 80033cc:	20001dd0 	.word	0x20001dd0

080033d0 <main>:
	}
}
int main(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af02      	add	r7, sp, #8

	/********************************** Task Configuration *****************************************/
	(void)xTaskCreate(T1_voidGreenLed, "T1_GreenLED", 85 , NULL, 1, &T1_GreenLedHandle) ;
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <main+0x78>)
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	2301      	movs	r3, #1
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	2300      	movs	r3, #0
 80033e0:	2255      	movs	r2, #85	; 0x55
 80033e2:	491a      	ldr	r1, [pc, #104]	; (800344c <main+0x7c>)
 80033e4:	481a      	ldr	r0, [pc, #104]	; (8003450 <main+0x80>)
 80033e6:	f7fd fcbd 	bl	8000d64 <xTaskCreate>
	(void)xTaskCreate(T2_voidButtonState, "T2_Btn"  , 85 , NULL, 2, &T2_ButtonHandle) ;		//	Task 2 Higher priority
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <main+0x84>)
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2302      	movs	r3, #2
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2300      	movs	r3, #0
 80033f4:	2255      	movs	r2, #85	; 0x55
 80033f6:	4918      	ldr	r1, [pc, #96]	; (8003458 <main+0x88>)
 80033f8:	4818      	ldr	r0, [pc, #96]	; (800345c <main+0x8c>)
 80033fa:	f7fd fcb3 	bl	8000d64 <xTaskCreate>
	/********************************** System Inits ***********************************************/
	RCC_voidInitSysClocks() ;		 		// Init Clock
 80033fe:	f7ff ff79 	bl	80032f4 <RCC_voidInitSysClocks>
	RCC_voidEnableClock(RCC_AHB, PORTA);	/*	PORTA	*/
 8003402:	2111      	movs	r1, #17
 8003404:	2000      	movs	r0, #0
 8003406:	f7ff ff35 	bl	8003274 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_AHB, PORTC);	/*	PORTC	*/
 800340a:	2113      	movs	r1, #19
 800340c:	2000      	movs	r0, #0
 800340e:	f7ff ff31 	bl	8003274 <RCC_voidEnableClock>
	GPIO_voidSetPinDirection(GREEN_BUILT_IN_LED, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 8003412:	2220      	movs	r2, #32
 8003414:	2105      	movs	r1, #5
 8003416:	2011      	movs	r0, #17
 8003418:	f7ff fca4 	bl	8002d64 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(YELLOW_EXTERNAL_LED, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 800341c:	2220      	movs	r2, #32
 800341e:	2106      	movs	r1, #6
 8003420:	2011      	movs	r0, #17
 8003422:	f7ff fc9f 	bl	8002d64 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(INTERNAL_BTN, GPIO_DIGITAL_INPUT_FLOAT);
 8003426:	2200      	movs	r2, #0
 8003428:	210d      	movs	r1, #13
 800342a:	2013      	movs	r0, #19
 800342c:	f7ff fc9a 	bl	8002d64 <GPIO_voidSetPinDirection>
	/********************************** Semaphores	 **********************************************/
	pushButtonSemaphore = xSemaphoreCreateBinary();
 8003430:	2203      	movs	r2, #3
 8003432:	2100      	movs	r1, #0
 8003434:	2001      	movs	r0, #1
 8003436:	f7fc fff7 	bl	8000428 <xQueueGenericCreate>
 800343a:	4602      	mov	r2, r0
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <main+0x90>)
 800343e:	601a      	str	r2, [r3, #0]

	/********************************** Start Scheduler ******************************************/
	vTaskStartScheduler();
 8003440:	f7fd fe20 	bl	8001084 <vTaskStartScheduler>
	while(1)
	{
		__asm("NOP");
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <main+0x74>
 8003448:	20001dc4 	.word	0x20001dc4
 800344c:	08003550 	.word	0x08003550
 8003450:	08003345 	.word	0x08003345
 8003454:	20001dc8 	.word	0x20001dc8
 8003458:	0800355c 	.word	0x0800355c
 800345c:	08003371 	.word	0x08003371
 8003460:	20001dcc 	.word	0x20001dcc

08003464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003464:	480d      	ldr	r0, [pc, #52]	; (800349c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003466:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800346c:	480c      	ldr	r0, [pc, #48]	; (80034a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800346e:	490d      	ldr	r1, [pc, #52]	; (80034a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003470:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <LoopForever+0xe>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003474:	e002      	b.n	800347c <LoopCopyDataInit>

08003476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347a:	3304      	adds	r3, #4

0800347c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800347c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800347e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003480:	d3f9      	bcc.n	8003476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003484:	4c0a      	ldr	r4, [pc, #40]	; (80034b0 <LoopForever+0x16>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003488:	e001      	b.n	800348e <LoopFillZerobss>

0800348a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800348c:	3204      	adds	r2, #4

0800348e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800348e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003490:	d3fb      	bcc.n	800348a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003492:	f000 f811 	bl	80034b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003496:	f7ff ff9b 	bl	80033d0 <main>

0800349a <LoopForever>:

LoopForever:
    b LoopForever
 800349a:	e7fe      	b.n	800349a <LoopForever>
  ldr   r0, =_estack
 800349c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80034a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a4:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80034a8:	0800356c 	.word	0x0800356c
  ldr r2, =_sbss
 80034ac:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80034b0:	20001dd4 	.word	0x20001dd4

080034b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034b4:	e7fe      	b.n	80034b4 <ADC1_2_IRQHandler>
	...

080034b8 <__libc_init_array>:
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	4e0d      	ldr	r6, [pc, #52]	; (80034f0 <__libc_init_array+0x38>)
 80034bc:	4c0d      	ldr	r4, [pc, #52]	; (80034f4 <__libc_init_array+0x3c>)
 80034be:	1ba4      	subs	r4, r4, r6
 80034c0:	10a4      	asrs	r4, r4, #2
 80034c2:	2500      	movs	r5, #0
 80034c4:	42a5      	cmp	r5, r4
 80034c6:	d109      	bne.n	80034dc <__libc_init_array+0x24>
 80034c8:	4e0b      	ldr	r6, [pc, #44]	; (80034f8 <__libc_init_array+0x40>)
 80034ca:	4c0c      	ldr	r4, [pc, #48]	; (80034fc <__libc_init_array+0x44>)
 80034cc:	f000 f82c 	bl	8003528 <_init>
 80034d0:	1ba4      	subs	r4, r4, r6
 80034d2:	10a4      	asrs	r4, r4, #2
 80034d4:	2500      	movs	r5, #0
 80034d6:	42a5      	cmp	r5, r4
 80034d8:	d105      	bne.n	80034e6 <__libc_init_array+0x2e>
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034e0:	4798      	blx	r3
 80034e2:	3501      	adds	r5, #1
 80034e4:	e7ee      	b.n	80034c4 <__libc_init_array+0xc>
 80034e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ea:	4798      	blx	r3
 80034ec:	3501      	adds	r5, #1
 80034ee:	e7f2      	b.n	80034d6 <__libc_init_array+0x1e>
 80034f0:	08003564 	.word	0x08003564
 80034f4:	08003564 	.word	0x08003564
 80034f8:	08003564 	.word	0x08003564
 80034fc:	08003568 	.word	0x08003568

08003500 <memcpy>:
 8003500:	b510      	push	{r4, lr}
 8003502:	1e43      	subs	r3, r0, #1
 8003504:	440a      	add	r2, r1
 8003506:	4291      	cmp	r1, r2
 8003508:	d100      	bne.n	800350c <memcpy+0xc>
 800350a:	bd10      	pop	{r4, pc}
 800350c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003510:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003514:	e7f7      	b.n	8003506 <memcpy+0x6>

08003516 <memset>:
 8003516:	4402      	add	r2, r0
 8003518:	4603      	mov	r3, r0
 800351a:	4293      	cmp	r3, r2
 800351c:	d100      	bne.n	8003520 <memset+0xa>
 800351e:	4770      	bx	lr
 8003520:	f803 1b01 	strb.w	r1, [r3], #1
 8003524:	e7f9      	b.n	800351a <memset+0x4>
	...

08003528 <_init>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr

08003534 <_fini>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr
