
NTI_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f0c  08002f0c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002f0c  08002f0c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f0c  08002f0c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f0c  08002f0c  00012f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc8  20000008  08002f1c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd0  08002f1c  00021dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ecd  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012fa  00000000  00000000  00027f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005a8  00000000  00000000  00029200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000500  00000000  00000000  000297a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000014e7  00000000  00000000  00029ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004eb3  00000000  00000000  0002b18f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00011a8c  00000000  00000000  00030042  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00041ace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015b4  00000000  00000000  00041b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002ed0 	.word	0x08002ed0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	08002ed0 	.word	0x08002ed0

080001e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f103 0208 	add.w	r2, r3, #8
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f04f 32ff 	mov.w	r2, #4294967295
 80001f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f103 0208 	add.w	r2, r3, #8
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0208 	add.w	r2, r3, #8
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800023a:	b480      	push	{r7}
 800023c:	b085      	sub	sp, #20
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	689a      	ldr	r2, [r3, #8]
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000282:	b480      	push	{r7}
 8000284:	b085      	sub	sp, #20
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000298:	d103      	bne.n	80002a2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e00c      	b.n	80002bc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3308      	adds	r3, #8
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e002      	b.n	80002b0 <vListInsert+0x2e>
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d2f6      	bcs.n	80002aa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	683a      	ldr	r2, [r7, #0]
 80002d6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	6892      	ldr	r2, [r2, #8]
 800030a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	6852      	ldr	r2, [r2, #4]
 8000314:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	d103      	bne.n	8000328 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	1e5a      	subs	r2, r3, #1
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b087      	sub	sp, #28
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d109      	bne.n	8000374 <xQueueGenericReset+0x2c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000364:	f383 8811 	msr	BASEPRI, r3
 8000368:	f3bf 8f6f 	isb	sy
 800036c:	f3bf 8f4f 	dsb	sy
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	e7fe      	b.n	8000372 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d063      	beq.n	8000442 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800037e:	2b00      	cmp	r3, #0
 8000380:	d05f      	beq.n	8000442 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800038a:	2000      	movs	r0, #0
 800038c:	fba2 1203 	umull	r1, r2, r2, r3
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	f04f 0400 	mov.w	r4, #0
 8000398:	0013      	movs	r3, r2
 800039a:	2400      	movs	r4, #0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d000      	beq.n	80003a2 <xQueueGenericReset+0x5a>
 80003a0:	2001      	movs	r0, #1
 80003a2:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d14c      	bne.n	8000442 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 80003a8:	f001 feda 	bl	8002160 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003b4:	6939      	ldr	r1, [r7, #16]
 80003b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80003b8:	fb01 f303 	mul.w	r3, r1, r3
 80003bc:	441a      	add	r2, r3
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	2200      	movs	r2, #0
 80003c6:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003d8:	3b01      	subs	r3, #1
 80003da:	6939      	ldr	r1, [r7, #16]
 80003dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80003de:	fb01 f303 	mul.w	r3, r1, r3
 80003e2:	441a      	add	r2, r3
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	22ff      	movs	r2, #255	; 0xff
 80003ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	22ff      	movs	r2, #255	; 0xff
 80003f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d114      	bne.n	8000428 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003fe:	693b      	ldr	r3, [r7, #16]
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d01a      	beq.n	800043c <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	3310      	adds	r3, #16
 800040a:	4618      	mov	r0, r3
 800040c:	f001 f862 	bl	80014d4 <xTaskRemoveFromEventList>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d012      	beq.n	800043c <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <xQueueGenericReset+0x124>)
 8000418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	f3bf 8f4f 	dsb	sy
 8000422:	f3bf 8f6f 	isb	sy
 8000426:	e009      	b.n	800043c <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	3310      	adds	r3, #16
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff fed7 	bl	80001e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	3324      	adds	r3, #36	; 0x24
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff fed2 	bl	80001e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800043c:	f001 febe 	bl	80021bc <vPortExitCritical>
 8000440:	e001      	b.n	8000446 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d109      	bne.n	8000460 <xQueueGenericReset+0x118>
 800044c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000450:	f383 8811 	msr	BASEPRI, r3
 8000454:	f3bf 8f6f 	isb	sy
 8000458:	f3bf 8f4f 	dsb	sy
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	e7fe      	b.n	800045e <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000460:	697b      	ldr	r3, [r7, #20]
}
 8000462:	4618      	mov	r0, r3
 8000464:	371c      	adds	r7, #28
 8000466:	46bd      	mov	sp, r7
 8000468:	bd90      	pop	{r4, r7, pc}
 800046a:	bf00      	nop
 800046c:	e000ed04 	.word	0xe000ed04

08000470 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af02      	add	r7, sp, #8
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	4613      	mov	r3, r2
 800047c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d034      	beq.n	80004f2 <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000488:	2000      	movs	r0, #0
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	fba2 1203 	umull	r1, r2, r2, r3
 8000492:	f04f 0300 	mov.w	r3, #0
 8000496:	f04f 0400 	mov.w	r4, #0
 800049a:	0013      	movs	r3, r2
 800049c:	2400      	movs	r4, #0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d000      	beq.n	80004a4 <xQueueGenericCreate+0x34>
 80004a2:	2001      	movs	r0, #1
 80004a4:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d123      	bne.n	80004f2 <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80004b2:	f113 0f49 	cmn.w	r3, #73	; 0x49
 80004b6:	d81c      	bhi.n	80004f2 <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	fb02 f303 	mul.w	r3, r2, r3
 80004c0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004c2:	69bb      	ldr	r3, [r7, #24]
 80004c4:	3348      	adds	r3, #72	; 0x48
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 ff1c 	bl	8002304 <pvPortMalloc>
 80004cc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d01b      	beq.n	800050c <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004d4:	69fb      	ldr	r3, [r7, #28]
 80004d6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	3348      	adds	r3, #72	; 0x48
 80004dc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004de:	79fa      	ldrb	r2, [r7, #7]
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	4613      	mov	r3, r2
 80004e6:	697a      	ldr	r2, [r7, #20]
 80004e8:	68b9      	ldr	r1, [r7, #8]
 80004ea:	68f8      	ldr	r0, [r7, #12]
 80004ec:	f000 f813 	bl	8000516 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80004f0:	e00c      	b.n	800050c <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80004f2:	69fb      	ldr	r3, [r7, #28]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d109      	bne.n	800050c <xQueueGenericCreate+0x9c>
 80004f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fc:	f383 8811 	msr	BASEPRI, r3
 8000500:	f3bf 8f6f 	isb	sy
 8000504:	f3bf 8f4f 	dsb	sy
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	e7fe      	b.n	800050a <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800050c:	69fb      	ldr	r3, [r7, #28]
    }
 800050e:	4618      	mov	r0, r3
 8000510:	3724      	adds	r7, #36	; 0x24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd90      	pop	{r4, r7, pc}

08000516 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b084      	sub	sp, #16
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
 8000522:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d103      	bne.n	8000532 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800052a:	69bb      	ldr	r3, [r7, #24]
 800052c:	69ba      	ldr	r2, [r7, #24]
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	e002      	b.n	8000538 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000544:	2101      	movs	r1, #1
 8000546:	69b8      	ldr	r0, [r7, #24]
 8000548:	f7ff fefe 	bl	8000348 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08c      	sub	sp, #48	; 0x30
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000560:	2300      	movs	r3, #0
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800056a:	2b00      	cmp	r3, #0
 800056c:	d109      	bne.n	8000582 <xQueueReceive+0x2e>
 800056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000572:	f383 8811 	msr	BASEPRI, r3
 8000576:	f3bf 8f6f 	isb	sy
 800057a:	f3bf 8f4f 	dsb	sy
 800057e:	623b      	str	r3, [r7, #32]
 8000580:	e7fe      	b.n	8000580 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d103      	bne.n	8000590 <xQueueReceive+0x3c>
 8000588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	2b00      	cmp	r3, #0
 800058e:	d101      	bne.n	8000594 <xQueueReceive+0x40>
 8000590:	2301      	movs	r3, #1
 8000592:	e000      	b.n	8000596 <xQueueReceive+0x42>
 8000594:	2300      	movs	r3, #0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d109      	bne.n	80005ae <xQueueReceive+0x5a>
 800059a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059e:	f383 8811 	msr	BASEPRI, r3
 80005a2:	f3bf 8f6f 	isb	sy
 80005a6:	f3bf 8f4f 	dsb	sy
 80005aa:	61fb      	str	r3, [r7, #28]
 80005ac:	e7fe      	b.n	80005ac <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80005ae:	f001 f99d 	bl	80018ec <xTaskGetSchedulerState>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <xQueueReceive+0x6a>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <xQueueReceive+0x6e>
 80005be:	2301      	movs	r3, #1
 80005c0:	e000      	b.n	80005c4 <xQueueReceive+0x70>
 80005c2:	2300      	movs	r3, #0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d109      	bne.n	80005dc <xQueueReceive+0x88>
 80005c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005cc:	f383 8811 	msr	BASEPRI, r3
 80005d0:	f3bf 8f6f 	isb	sy
 80005d4:	f3bf 8f4f 	dsb	sy
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	e7fe      	b.n	80005da <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005dc:	f001 fdc0 	bl	8002160 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d01f      	beq.n	800062c <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005ec:	68b9      	ldr	r1, [r7, #8]
 80005ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005f0:	f000 f88c 	bl	800070c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80005f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00f      	beq.n	8000624 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000606:	3310      	adds	r3, #16
 8000608:	4618      	mov	r0, r3
 800060a:	f000 ff63 	bl	80014d4 <xTaskRemoveFromEventList>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d007      	beq.n	8000624 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000614:	4b3c      	ldr	r3, [pc, #240]	; (8000708 <xQueueReceive+0x1b4>)
 8000616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000624:	f001 fdca 	bl	80021bc <vPortExitCritical>
                return pdPASS;
 8000628:	2301      	movs	r3, #1
 800062a:	e069      	b.n	8000700 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000632:	f001 fdc3 	bl	80021bc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000636:	2300      	movs	r3, #0
 8000638:	e062      	b.n	8000700 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800063a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800063c:	2b00      	cmp	r3, #0
 800063e:	d106      	bne.n	800064e <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f81b 	bl	8001680 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800064a:	2301      	movs	r3, #1
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800064e:	f001 fdb5 	bl	80021bc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000652:	f000 fc4f 	bl	8000ef4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000656:	f001 fd83 	bl	8002160 <vPortEnterCritical>
 800065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000660:	b25b      	sxtb	r3, r3
 8000662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000666:	d103      	bne.n	8000670 <xQueueReceive+0x11c>
 8000668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000676:	b25b      	sxtb	r3, r3
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d103      	bne.n	8000686 <xQueueReceive+0x132>
 800067e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000686:	f001 fd99 	bl	80021bc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800068a:	1d3a      	adds	r2, r7, #4
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 f80a 	bl	80016ac <xTaskCheckForTimeOut>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d123      	bne.n	80006e6 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800069e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006a0:	f000 f8ac 	bl	80007fc <prvIsQueueEmpty>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d017      	beq.n	80006da <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80006aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ac:	3324      	adds	r3, #36	; 0x24
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fea6 	bl	8001404 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80006b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006ba:	f000 f84d 	bl	8000758 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80006be:	f000 fc27 	bl	8000f10 <xTaskResumeAll>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d189      	bne.n	80005dc <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <xQueueReceive+0x1b4>)
 80006ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	e780      	b.n	80005dc <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80006da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006dc:	f000 f83c 	bl	8000758 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006e0:	f000 fc16 	bl	8000f10 <xTaskResumeAll>
 80006e4:	e77a      	b.n	80005dc <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80006e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006e8:	f000 f836 	bl	8000758 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006ec:	f000 fc10 	bl	8000f10 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80006f2:	f000 f883 	bl	80007fc <prvIsQueueEmpty>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f43f af6f 	beq.w	80005dc <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000700:	4618      	mov	r0, r3
 8000702:	3730      	adds	r7, #48	; 0x30
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	e000ed04 	.word	0xe000ed04

0800070c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	2b00      	cmp	r3, #0
 800071c:	d018      	beq.n	8000750 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	68da      	ldr	r2, [r3, #12]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	441a      	add	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	68da      	ldr	r2, [r3, #12]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	429a      	cmp	r2, r3
 8000736:	d303      	bcc.n	8000740 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68d9      	ldr	r1, [r3, #12]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	461a      	mov	r2, r3
 800074a:	6838      	ldr	r0, [r7, #0]
 800074c:	f002 fbac 	bl	8002ea8 <memcpy>
    }
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000760:	f001 fcfe 	bl	8002160 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800076a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800076c:	e011      	b.n	8000792 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	2b00      	cmp	r3, #0
 8000774:	d012      	beq.n	800079c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3324      	adds	r3, #36	; 0x24
 800077a:	4618      	mov	r0, r3
 800077c:	f000 feaa 	bl	80014d4 <xTaskRemoveFromEventList>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000786:	f000 fff5 	bl	8001774 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	3b01      	subs	r3, #1
 800078e:	b2db      	uxtb	r3, r3
 8000790:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	2b00      	cmp	r3, #0
 8000798:	dce9      	bgt.n	800076e <prvUnlockQueue+0x16>
 800079a:	e000      	b.n	800079e <prvUnlockQueue+0x46>
                    break;
 800079c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	22ff      	movs	r2, #255	; 0xff
 80007a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80007a6:	f001 fd09 	bl	80021bc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80007aa:	f001 fcd9 	bl	8002160 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80007b4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80007b6:	e011      	b.n	80007dc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d012      	beq.n	80007e6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3310      	adds	r3, #16
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fe85 	bl	80014d4 <xTaskRemoveFromEventList>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80007d0:	f000 ffd0 	bl	8001774 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80007dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	dce9      	bgt.n	80007b8 <prvUnlockQueue+0x60>
 80007e4:	e000      	b.n	80007e8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80007e6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	22ff      	movs	r2, #255	; 0xff
 80007ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80007f0:	f001 fce4 	bl	80021bc <vPortExitCritical>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000804:	f001 fcac 	bl	8002160 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e001      	b.n	800081a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800081a:	f001 fccf 	bl	80021bc <vPortExitCritical>

    return xReturn;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000838:	f001 fc92 	bl	8002160 <vPortEnterCritical>
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000842:	b25b      	sxtb	r3, r3
 8000844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000848:	d103      	bne.n	8000852 <vQueueWaitForMessageRestricted+0x2a>
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000858:	b25b      	sxtb	r3, r3
 800085a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800085e:	d103      	bne.n	8000868 <vQueueWaitForMessageRestricted+0x40>
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000868:	f001 fca8 	bl	80021bc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000870:	2b00      	cmp	r3, #0
 8000872:	d106      	bne.n	8000882 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3324      	adds	r3, #36	; 0x24
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fde5 	bl	800144c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000882:	6978      	ldr	r0, [r7, #20]
 8000884:	f7ff ff68 	bl	8000758 <prvUnlockQueue>
    }
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af04      	add	r7, sp, #16
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4613      	mov	r3, r2
 800089e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 fd2d 	bl	8002304 <pvPortMalloc>
 80008aa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d013      	beq.n	80008da <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80008b2:	2050      	movs	r0, #80	; 0x50
 80008b4:	f001 fd26 	bl	8002304 <pvPortMalloc>
 80008b8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d008      	beq.n	80008d2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80008c0:	2250      	movs	r2, #80	; 0x50
 80008c2:	2100      	movs	r1, #0
 80008c4:	69f8      	ldr	r0, [r7, #28]
 80008c6:	f002 fafa 	bl	8002ebe <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	631a      	str	r2, [r3, #48]	; 0x30
 80008d0:	e005      	b.n	80008de <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f001 fdce 	bl	8002474 <vPortFree>
 80008d8:	e001      	b.n	80008de <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d013      	beq.n	800090c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80008e4:	88fa      	ldrh	r2, [r7, #6]
 80008e6:	2300      	movs	r3, #0
 80008e8:	9303      	str	r3, [sp, #12]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	9302      	str	r3, [sp, #8]
 80008ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	68b9      	ldr	r1, [r7, #8]
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f000 f80e 	bl	800091c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000900:	69f8      	ldr	r0, [r7, #28]
 8000902:	f000 f88f 	bl	8000a24 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	e002      	b.n	8000912 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000912:	69bb      	ldr	r3, [r7, #24]
    }
 8000914:	4618      	mov	r0, r3
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800092a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800092c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000934:	3b01      	subs	r3, #1
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4413      	add	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	f023 0307 	bic.w	r3, r3, #7
 8000942:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	2b00      	cmp	r3, #0
 800094c:	d009      	beq.n	8000962 <prvInitialiseNewTask+0x46>
 800094e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000952:	f383 8811 	msr	BASEPRI, r3
 8000956:	f3bf 8f6f 	isb	sy
 800095a:	f3bf 8f4f 	dsb	sy
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e7fe      	b.n	8000960 <prvInitialiseNewTask+0x44>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d01e      	beq.n	80009a6 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
 800096c:	e012      	b.n	8000994 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	4413      	add	r3, r2
 8000974:	7819      	ldrb	r1, [r3, #0]
 8000976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	4413      	add	r3, r2
 800097c:	3334      	adds	r3, #52	; 0x34
 800097e:	460a      	mov	r2, r1
 8000980:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	4413      	add	r3, r2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d006      	beq.n	800099c <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3301      	adds	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	2b09      	cmp	r3, #9
 8000998:	d9e9      	bls.n	800096e <prvInitialiseNewTask+0x52>
 800099a:	e000      	b.n	800099e <prvInitialiseNewTask+0x82>
            {
                break;
 800099c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800099e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80009a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d909      	bls.n	80009c0 <prvInitialiseNewTask+0xa4>
 80009ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009b0:	f383 8811 	msr	BASEPRI, r3
 80009b4:	f3bf 8f6f 	isb	sy
 80009b8:	f3bf 8f4f 	dsb	sy
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	e7fe      	b.n	80009be <prvInitialiseNewTask+0xa2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80009c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d901      	bls.n	80009ca <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80009c6:	2304      	movs	r3, #4
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80009ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80009d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80009d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d8:	3304      	adds	r3, #4
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fc20 	bl	8000220 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80009e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e2:	3318      	adds	r3, #24
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fc1b 	bl	8000220 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80009ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009ee:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f2:	f1c3 0205 	rsb	r2, r3, #5
 80009f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80009fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	68f9      	ldr	r1, [r7, #12]
 8000a04:	69b8      	ldr	r0, [r7, #24]
 8000a06:	f001 fa81 	bl	8001f0c <pxPortInitialiseStack>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a0e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <prvInitialiseNewTask+0x100>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a1a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000a2c:	f001 fb98 	bl	8002160 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000a30:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <prvAddNewTaskToReadyList+0x108>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	4a3d      	ldr	r2, [pc, #244]	; (8000b2c <prvAddNewTaskToReadyList+0x108>)
 8000a38:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000a3a:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <prvAddNewTaskToReadyList+0x10c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d109      	bne.n	8000a56 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000a42:	4a3b      	ldr	r2, [pc, #236]	; (8000b30 <prvAddNewTaskToReadyList+0x10c>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a48:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <prvAddNewTaskToReadyList+0x108>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d110      	bne.n	8000a72 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a50:	f000 feb4 	bl	80017bc <prvInitialiseTaskLists>
 8000a54:	e00d      	b.n	8000a72 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <prvAddNewTaskToReadyList+0x110>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d109      	bne.n	8000a72 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <prvAddNewTaskToReadyList+0x10c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d802      	bhi.n	8000a72 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000a6c:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <prvAddNewTaskToReadyList+0x10c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <prvAddNewTaskToReadyList+0x114>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <prvAddNewTaskToReadyList+0x114>)
 8000a7a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	2201      	movs	r2, #1
 8000a82:	409a      	lsls	r2, r3
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <prvAddNewTaskToReadyList+0x118>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	; (8000b3c <prvAddNewTaskToReadyList+0x118>)
 8000a8c:	6013      	str	r3, [r2, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a92:	492b      	ldr	r1, [pc, #172]	; (8000b40 <prvAddNewTaskToReadyList+0x11c>)
 8000a94:	4613      	mov	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	440b      	add	r3, r1
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	3204      	adds	r2, #4
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	1d1a      	adds	r2, r3, #4
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <prvAddNewTaskToReadyList+0x11c>)
 8000ad2:	441a      	add	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000adc:	4918      	ldr	r1, [pc, #96]	; (8000b40 <prvAddNewTaskToReadyList+0x11c>)
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	1c59      	adds	r1, r3, #1
 8000aec:	4814      	ldr	r0, [pc, #80]	; (8000b40 <prvAddNewTaskToReadyList+0x11c>)
 8000aee:	4613      	mov	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4413      	add	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4403      	add	r3, r0
 8000af8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000afa:	f001 fb5f 	bl	80021bc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <prvAddNewTaskToReadyList+0x110>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00e      	beq.n	8000b24 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <prvAddNewTaskToReadyList+0x10c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <prvAddNewTaskToReadyList+0x120>)
 8000b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	f3bf 8f4f 	dsb	sy
 8000b20:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000fc 	.word	0x200000fc
 8000b30:	20000024 	.word	0x20000024
 8000b34:	20000108 	.word	0x20000108
 8000b38:	20000118 	.word	0x20000118
 8000b3c:	20000104 	.word	0x20000104
 8000b40:	20000028 	.word	0x20000028
 8000b44:	e000ed04 	.word	0xe000ed04

08000b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d016      	beq.n	8000b88 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <vTaskDelay+0x60>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d009      	beq.n	8000b76 <vTaskDelay+0x2e>
 8000b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b66:	f383 8811 	msr	BASEPRI, r3
 8000b6a:	f3bf 8f6f 	isb	sy
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	e7fe      	b.n	8000b74 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8000b76:	f000 f9bd 	bl	8000ef4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 fed3 	bl	8001928 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000b82:	f000 f9c5 	bl	8000f10 <xTaskResumeAll>
 8000b86:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d107      	bne.n	8000b9e <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <vTaskDelay+0x64>)
 8000b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	f3bf 8f4f 	dsb	sy
 8000b9a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000124 	.word	0x20000124
 8000bac:	e000ed04 	.word	0xe000ed04

08000bb0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000bb8:	f001 fad2 	bl	8002160 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <vTaskSuspend+0x18>
 8000bc2:	4b42      	ldr	r3, [pc, #264]	; (8000ccc <vTaskSuspend+0x11c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	e000      	b.n	8000bca <vTaskSuspend+0x1a>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fb8f 	bl	80002f4 <uxListRemove>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d115      	bne.n	8000c08 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be0:	493b      	ldr	r1, [pc, #236]	; (8000cd0 <vTaskSuspend+0x120>)
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	440b      	add	r3, r1
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10a      	bne.n	8000c08 <vTaskSuspend+0x58>
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43da      	mvns	r2, r3
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <vTaskSuspend+0x124>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4013      	ands	r3, r2
 8000c04:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <vTaskSuspend+0x124>)
 8000c06:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d004      	beq.n	8000c1a <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	3318      	adds	r3, #24
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fb6d 	bl	80002f4 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	482d      	ldr	r0, [pc, #180]	; (8000cd8 <vTaskSuspend+0x128>)
 8000c22:	f7ff fb0a 	bl	800023a <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	e010      	b.n	8000c4e <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	4413      	add	r3, r2
 8000c32:	334c      	adds	r3, #76	; 0x4c
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d105      	bne.n	8000c48 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	4413      	add	r3, r2
 8000c42:	334c      	adds	r3, #76	; 0x4c
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	ddeb      	ble.n	8000c2c <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8000c54:	f001 fab2 	bl	80021bc <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <vTaskSuspend+0x12c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000c60:	f001 fa7e 	bl	8002160 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8000c64:	f000 fe26 	bl	80018b4 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000c68:	f001 faa8 	bl	80021bc <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <vTaskSuspend+0x11c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d126      	bne.n	8000cc4 <vTaskSuspend+0x114>
        {
            if( xSchedulerRunning != pdFALSE )
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <vTaskSuspend+0x12c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d016      	beq.n	8000cac <vTaskSuspend+0xfc>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <vTaskSuspend+0x130>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d009      	beq.n	8000c9a <vTaskSuspend+0xea>
 8000c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c8a:	f383 8811 	msr	BASEPRI, r3
 8000c8e:	f3bf 8f6f 	isb	sy
 8000c92:	f3bf 8f4f 	dsb	sy
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e7fe      	b.n	8000c98 <vTaskSuspend+0xe8>
                portYIELD_WITHIN_API();
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <vTaskSuspend+0x134>)
 8000c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	f3bf 8f4f 	dsb	sy
 8000ca6:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000caa:	e00b      	b.n	8000cc4 <vTaskSuspend+0x114>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <vTaskSuspend+0x128>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <vTaskSuspend+0x138>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d103      	bne.n	8000cc0 <vTaskSuspend+0x110>
                    pxCurrentTCB = NULL;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <vTaskSuspend+0x11c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
    }
 8000cbe:	e001      	b.n	8000cc4 <vTaskSuspend+0x114>
                    vTaskSwitchContext();
 8000cc0:	f000 fb46 	bl	8001350 <vTaskSwitchContext>
    }
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000024 	.word	0x20000024
 8000cd0:	20000028 	.word	0x20000028
 8000cd4:	20000104 	.word	0x20000104
 8000cd8:	200000e8 	.word	0x200000e8
 8000cdc:	20000108 	.word	0x20000108
 8000ce0:	20000124 	.word	0x20000124
 8000ce4:	e000ed04 	.word	0xe000ed04
 8000ce8:	200000fc 	.word	0x200000fc

08000cec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d109      	bne.n	8000d16 <prvTaskIsTaskSuspended+0x2a>
 8000d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d06:	f383 8811 	msr	BASEPRI, r3
 8000d0a:	f3bf 8f6f 	isb	sy
 8000d0e:	f3bf 8f4f 	dsb	sy
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e7fe      	b.n	8000d14 <prvTaskIsTaskSuspended+0x28>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <prvTaskIsTaskSuspended+0x58>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d10a      	bne.n	8000d36 <prvTaskIsTaskSuspended+0x4a>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d24:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <prvTaskIsTaskSuspended+0x5c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d005      	beq.n	8000d36 <prvTaskIsTaskSuspended+0x4a>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <prvTaskIsTaskSuspended+0x4a>
                {
                    xReturn = pdTRUE;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8000d36:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8000d38:	4618      	mov	r0, r3
 8000d3a:	371c      	adds	r7, #28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	200000e8 	.word	0x200000e8
 8000d48:	200000bc 	.word	0x200000bc

08000d4c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d109      	bne.n	8000d72 <vTaskResume+0x26>
 8000d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e7fe      	b.n	8000d70 <vTaskResume+0x24>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8000d72:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <vTaskResume+0xf8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d05f      	beq.n	8000e3c <vTaskResume+0xf0>
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d05c      	beq.n	8000e3c <vTaskResume+0xf0>
        {
            taskENTER_CRITICAL();
 8000d82:	f001 f9ed 	bl	8002160 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ffb0 	bl	8000cec <prvTaskIsTaskSuspended>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d052      	beq.n	8000e38 <vTaskResume+0xec>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3304      	adds	r3, #4
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff faac 	bl	80002f4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da0:	2201      	movs	r2, #1
 8000da2:	409a      	lsls	r2, r3
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <vTaskResume+0xfc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <vTaskResume+0xfc>)
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db2:	4926      	ldr	r1, [pc, #152]	; (8000e4c <vTaskResume+0x100>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	3204      	adds	r2, #4
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	1d1a      	adds	r2, r3, #4
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <vTaskResume+0x100>)
 8000df2:	441a      	add	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfc:	4913      	ldr	r1, [pc, #76]	; (8000e4c <vTaskResume+0x100>)
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	440b      	add	r3, r1
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1c59      	adds	r1, r3, #1
 8000e0c:	480f      	ldr	r0, [pc, #60]	; (8000e4c <vTaskResume+0x100>)
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4403      	add	r3, r0
 8000e18:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <vTaskResume+0xf8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d307      	bcc.n	8000e38 <vTaskResume+0xec>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <vTaskResume+0x104>)
 8000e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	f3bf 8f4f 	dsb	sy
 8000e34:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8000e38:	f001 f9c0 	bl	80021bc <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000024 	.word	0x20000024
 8000e48:	20000104 	.word	0x20000104
 8000e4c:	20000028 	.word	0x20000028
 8000e50:	e000ed04 	.word	0xe000ed04

08000e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <vTaskStartScheduler+0x84>)
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	2246      	movs	r2, #70	; 0x46
 8000e66:	491d      	ldr	r1, [pc, #116]	; (8000edc <vTaskStartScheduler+0x88>)
 8000e68:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <vTaskStartScheduler+0x8c>)
 8000e6a:	f7ff fd11 	bl	8000890 <xTaskCreate>
 8000e6e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d102      	bne.n	8000e7c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000e76:	f000 fdd7 	bl	8001a28 <xTimerCreateTimerTask>
 8000e7a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d115      	bne.n	8000eae <vTaskStartScheduler+0x5a>
 8000e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e86:	f383 8811 	msr	BASEPRI, r3
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	f3bf 8f4f 	dsb	sy
 8000e92:	60bb      	str	r3, [r7, #8]
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <vTaskStartScheduler+0x90>)
 8000e96:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <vTaskStartScheduler+0x94>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <vTaskStartScheduler+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000ea8:	f001 f8bc 	bl	8002024 <xPortStartScheduler>
 8000eac:	e00d      	b.n	8000eca <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d109      	bne.n	8000eca <vTaskStartScheduler+0x76>
 8000eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eba:	f383 8811 	msr	BASEPRI, r3
 8000ebe:	f3bf 8f6f 	isb	sy
 8000ec2:	f3bf 8f4f 	dsb	sy
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	e7fe      	b.n	8000ec8 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <vTaskStartScheduler+0x9c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000120 	.word	0x20000120
 8000edc:	08002ee8 	.word	0x08002ee8
 8000ee0:	0800178d 	.word	0x0800178d
 8000ee4:	2000011c 	.word	0x2000011c
 8000ee8:	20000108 	.word	0x20000108
 8000eec:	20000100 	.word	0x20000100
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <vTaskSuspendAll+0x18>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <vTaskSuspendAll+0x18>)
 8000f00:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000124 	.word	0x20000124

08000f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000f1e:	4b70      	ldr	r3, [pc, #448]	; (80010e0 <xTaskResumeAll+0x1d0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d109      	bne.n	8000f3a <xTaskResumeAll+0x2a>
 8000f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2a:	f383 8811 	msr	BASEPRI, r3
 8000f2e:	f3bf 8f6f 	isb	sy
 8000f32:	f3bf 8f4f 	dsb	sy
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	e7fe      	b.n	8000f38 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000f3a:	f001 f911 	bl	8002160 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000f3e:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <xTaskResumeAll+0x1d0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	4a66      	ldr	r2, [pc, #408]	; (80010e0 <xTaskResumeAll+0x1d0>)
 8000f46:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f48:	4b65      	ldr	r3, [pc, #404]	; (80010e0 <xTaskResumeAll+0x1d0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f040 80c0 	bne.w	80010d2 <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f52:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <xTaskResumeAll+0x1d4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80bb 	beq.w	80010d2 <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f5c:	e08a      	b.n	8001074 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f5e:	4b62      	ldr	r3, [pc, #392]	; (80010e8 <xTaskResumeAll+0x1d8>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	6a12      	ldr	r2, [r2, #32]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	69d2      	ldr	r2, [r2, #28]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	3318      	adds	r3, #24
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d103      	bne.n	8000f94 <xTaskResumeAll+0x84>
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	6a1a      	ldr	r2, [r3, #32]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2200      	movs	r2, #0
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	68d2      	ldr	r2, [r2, #12]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	6892      	ldr	r2, [r2, #8]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d103      	bne.n	8000fd2 <xTaskResumeAll+0xc2>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1e5a      	subs	r2, r3, #1
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <xTaskResumeAll+0x1dc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <xTaskResumeAll+0x1dc>)
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff8:	493d      	ldr	r1, [pc, #244]	; (80010f0 <xTaskResumeAll+0x1e0>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	3304      	adds	r3, #4
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	3204      	adds	r2, #4
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	1d1a      	adds	r2, r3, #4
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4a2e      	ldr	r2, [pc, #184]	; (80010f0 <xTaskResumeAll+0x1e0>)
 8001038:	441a      	add	r2, r3
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001042:	492b      	ldr	r1, [pc, #172]	; (80010f0 <xTaskResumeAll+0x1e0>)
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	1c59      	adds	r1, r3, #1
 8001052:	4827      	ldr	r0, [pc, #156]	; (80010f0 <xTaskResumeAll+0x1e0>)
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4403      	add	r3, r0
 800105e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <xTaskResumeAll+0x1e4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	429a      	cmp	r2, r3
 800106c:	d302      	bcc.n	8001074 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <xTaskResumeAll+0x1e8>)
 8001070:	2201      	movs	r2, #1
 8001072:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <xTaskResumeAll+0x1d8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	f47f af70 	bne.w	8000f5e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001084:	f000 fc16 	bl	80018b4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <xTaskResumeAll+0x1ec>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d010      	beq.n	80010b6 <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001094:	f000 f846 	bl	8001124 <xTaskIncrementTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <xTaskResumeAll+0x1e8>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f1      	bne.n	8001094 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <xTaskResumeAll+0x1ec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <xTaskResumeAll+0x1e8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d009      	beq.n	80010d2 <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <xTaskResumeAll+0x1f0>)
 80010c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	f3bf 8f4f 	dsb	sy
 80010ce:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80010d2:	f001 f873 	bl	80021bc <vPortExitCritical>

    return xAlreadyYielded;
 80010d6:	69bb      	ldr	r3, [r7, #24]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000124 	.word	0x20000124
 80010e4:	200000fc 	.word	0x200000fc
 80010e8:	200000bc 	.word	0x200000bc
 80010ec:	20000104 	.word	0x20000104
 80010f0:	20000028 	.word	0x20000028
 80010f4:	20000024 	.word	0x20000024
 80010f8:	20000110 	.word	0x20000110
 80010fc:	2000010c 	.word	0x2000010c
 8001100:	e000ed04 	.word	0xe000ed04

08001104 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <xTaskGetTickCount+0x1c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000100 	.word	0x20000100

08001124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800112e:	4b7d      	ldr	r3, [pc, #500]	; (8001324 <xTaskIncrementTick+0x200>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 80eb 	bne.w	800130e <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001138:	4b7b      	ldr	r3, [pc, #492]	; (8001328 <xTaskIncrementTick+0x204>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001140:	4a79      	ldr	r2, [pc, #484]	; (8001328 <xTaskIncrementTick+0x204>)
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d11f      	bne.n	800118c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800114c:	4b77      	ldr	r3, [pc, #476]	; (800132c <xTaskIncrementTick+0x208>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <xTaskIncrementTick+0x46>
 8001156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	e7fe      	b.n	8001168 <xTaskIncrementTick+0x44>
 800116a:	4b70      	ldr	r3, [pc, #448]	; (800132c <xTaskIncrementTick+0x208>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	4b6f      	ldr	r3, [pc, #444]	; (8001330 <xTaskIncrementTick+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a6d      	ldr	r2, [pc, #436]	; (800132c <xTaskIncrementTick+0x208>)
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4a6d      	ldr	r2, [pc, #436]	; (8001330 <xTaskIncrementTick+0x20c>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b6d      	ldr	r3, [pc, #436]	; (8001334 <xTaskIncrementTick+0x210>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a6b      	ldr	r2, [pc, #428]	; (8001334 <xTaskIncrementTick+0x210>)
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	f000 fb94 	bl	80018b4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800118c:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <xTaskIncrementTick+0x214>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a3a      	ldr	r2, [r7, #32]
 8001192:	429a      	cmp	r2, r3
 8001194:	f0c0 80a6 	bcc.w	80012e4 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001198:	4b64      	ldr	r3, [pc, #400]	; (800132c <xTaskIncrementTick+0x208>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011a2:	4b65      	ldr	r3, [pc, #404]	; (8001338 <xTaskIncrementTick+0x214>)
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	601a      	str	r2, [r3, #0]
                    break;
 80011aa:	e09b      	b.n	80012e4 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011ac:	4b5f      	ldr	r3, [pc, #380]	; (800132c <xTaskIncrementTick+0x208>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80011bc:	6a3a      	ldr	r2, [r7, #32]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d203      	bcs.n	80011cc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80011c4:	4a5c      	ldr	r2, [pc, #368]	; (8001338 <xTaskIncrementTick+0x214>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80011ca:	e08b      	b.n	80012e4 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	68d2      	ldr	r2, [r2, #12]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	6892      	ldr	r2, [r2, #8]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	3304      	adds	r3, #4
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d103      	bne.n	80011fa <xTaskIncrementTick+0xd6>
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	1e5a      	subs	r2, r3, #1
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120e:	2b00      	cmp	r3, #0
 8001210:	d01e      	beq.n	8001250 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	69db      	ldr	r3, [r3, #28]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	6a12      	ldr	r2, [r2, #32]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	69d2      	ldr	r2, [r2, #28]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	3318      	adds	r3, #24
 8001234:	429a      	cmp	r2, r3
 8001236:	d103      	bne.n	8001240 <xTaskIncrementTick+0x11c>
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6a1a      	ldr	r2, [r3, #32]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	2201      	movs	r2, #1
 8001256:	409a      	lsls	r2, r3
 8001258:	4b38      	ldr	r3, [pc, #224]	; (800133c <xTaskIncrementTick+0x218>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4313      	orrs	r3, r2
 800125e:	4a37      	ldr	r2, [pc, #220]	; (800133c <xTaskIncrementTick+0x218>)
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001266:	4936      	ldr	r1, [pc, #216]	; (8001340 <xTaskIncrementTick+0x21c>)
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3304      	adds	r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	3204      	adds	r2, #4
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1d1a      	adds	r2, r3, #4
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <xTaskIncrementTick+0x21c>)
 80012a6:	441a      	add	r2, r3
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b0:	4923      	ldr	r1, [pc, #140]	; (8001340 <xTaskIncrementTick+0x21c>)
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1c59      	adds	r1, r3, #1
 80012c0:	481f      	ldr	r0, [pc, #124]	; (8001340 <xTaskIncrementTick+0x21c>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4403      	add	r3, r0
 80012cc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <xTaskIncrementTick+0x220>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	429a      	cmp	r2, r3
 80012da:	f67f af5d 	bls.w	8001198 <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 80012de:	2301      	movs	r3, #1
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012e2:	e759      	b.n	8001198 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <xTaskIncrementTick+0x220>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ea:	4915      	ldr	r1, [pc, #84]	; (8001340 <xTaskIncrementTick+0x21c>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d901      	bls.n	8001300 <xTaskIncrementTick+0x1dc>
            {
                xSwitchRequired = pdTRUE;
 80012fc:	2301      	movs	r3, #1
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <xTaskIncrementTick+0x224>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 8001308:	2301      	movs	r3, #1
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
 800130c:	e004      	b.n	8001318 <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <xTaskIncrementTick+0x228>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <xTaskIncrementTick+0x228>)
 8001316:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800131a:	4618      	mov	r0, r3
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000124 	.word	0x20000124
 8001328:	20000100 	.word	0x20000100
 800132c:	200000b4 	.word	0x200000b4
 8001330:	200000b8 	.word	0x200000b8
 8001334:	20000114 	.word	0x20000114
 8001338:	2000011c 	.word	0x2000011c
 800133c:	20000104 	.word	0x20000104
 8001340:	20000028 	.word	0x20000028
 8001344:	20000024 	.word	0x20000024
 8001348:	20000110 	.word	0x20000110
 800134c:	2000010c 	.word	0x2000010c

08001350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <vTaskSwitchContext+0xa0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <vTaskSwitchContext+0xa4>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001364:	e03e      	b.n	80013e4 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <vTaskSwitchContext+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <vTaskSwitchContext+0xa8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	f1c3 031f 	rsb	r3, r3, #31
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	491e      	ldr	r1, [pc, #120]	; (80013fc <vTaskSwitchContext+0xac>)
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <vTaskSwitchContext+0x5a>
        __asm volatile
 8001396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800139a:	f383 8811 	msr	BASEPRI, r3
 800139e:	f3bf 8f6f 	isb	sy
 80013a2:	f3bf 8f4f 	dsb	sy
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	e7fe      	b.n	80013a8 <vTaskSwitchContext+0x58>
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4a11      	ldr	r2, [pc, #68]	; (80013fc <vTaskSwitchContext+0xac>)
 80013b6:	4413      	add	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	3308      	adds	r3, #8
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d104      	bne.n	80013da <vTaskSwitchContext+0x8a>
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <vTaskSwitchContext+0xb0>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20000124 	.word	0x20000124
 80013f4:	20000110 	.word	0x20000110
 80013f8:	20000104 	.word	0x20000104
 80013fc:	20000028 	.word	0x20000028
 8001400:	20000024 	.word	0x20000024

08001404 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <vTaskPlaceOnEventList+0x24>
 8001414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001418:	f383 8811 	msr	BASEPRI, r3
 800141c:	f3bf 8f6f 	isb	sy
 8001420:	f3bf 8f4f 	dsb	sy
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e7fe      	b.n	8001426 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <vTaskPlaceOnEventList+0x44>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3318      	adds	r3, #24
 800142e:	4619      	mov	r1, r3
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7fe ff26 	bl	8000282 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001436:	2101      	movs	r1, #1
 8001438:	6838      	ldr	r0, [r7, #0]
 800143a:	f000 fa75 	bl	8001928 <prvAddCurrentTaskToDelayedList>
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000024 	.word	0x20000024

0800144c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d109      	bne.n	8001472 <vTaskPlaceOnEventListRestricted+0x26>
 800145e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001462:	f383 8811 	msr	BASEPRI, r3
 8001466:	f3bf 8f6f 	isb	sy
 800146a:	f3bf 8f4f 	dsb	sy
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	e7fe      	b.n	8001470 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <vTaskPlaceOnEventListRestricted+0x84>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	61da      	str	r2, [r3, #28]
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <vTaskPlaceOnEventListRestricted+0x84>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	6892      	ldr	r2, [r2, #8]
 8001488:	621a      	str	r2, [r3, #32]
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <vTaskPlaceOnEventListRestricted+0x84>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	3218      	adds	r2, #24
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <vTaskPlaceOnEventListRestricted+0x84>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f103 0218 	add.w	r2, r3, #24
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <vTaskPlaceOnEventListRestricted+0x84>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	f000 fa30 	bl	8001928 <prvAddCurrentTaskToDelayedList>
    }
 80014c8:	bf00      	nop
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000024 	.word	0x20000024

080014d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80014d4:	b480      	push	{r7}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d109      	bne.n	80014fe <xTaskRemoveFromEventList+0x2a>
 80014ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ee:	f383 8811 	msr	BASEPRI, r3
 80014f2:	f3bf 8f6f 	isb	sy
 80014f6:	f3bf 8f4f 	dsb	sy
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e7fe      	b.n	80014fc <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	6a3a      	ldr	r2, [r7, #32]
 800150a:	6a12      	ldr	r2, [r2, #32]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	6a3a      	ldr	r2, [r7, #32]
 8001514:	69d2      	ldr	r2, [r2, #28]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	3318      	adds	r3, #24
 8001520:	429a      	cmp	r2, r3
 8001522:	d103      	bne.n	800152c <xTaskRemoveFromEventList+0x58>
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	6a1a      	ldr	r2, [r3, #32]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	1e5a      	subs	r2, r3, #1
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800153c:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <xTaskRemoveFromEventList+0x194>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d15e      	bne.n	8001602 <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	6a3a      	ldr	r2, [r7, #32]
 8001550:	68d2      	ldr	r2, [r2, #12]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	6a3a      	ldr	r2, [r7, #32]
 800155a:	6892      	ldr	r2, [r2, #8]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	3304      	adds	r3, #4
 8001566:	429a      	cmp	r2, r3
 8001568:	d103      	bne.n	8001572 <xTaskRemoveFromEventList+0x9e>
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	2201      	movs	r2, #1
 8001588:	409a      	lsls	r2, r3
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <xTaskRemoveFromEventList+0x198>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	4a36      	ldr	r2, [pc, #216]	; (800166c <xTaskRemoveFromEventList+0x198>)
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001598:	4935      	ldr	r1, [pc, #212]	; (8001670 <xTaskRemoveFromEventList+0x19c>)
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3304      	adds	r3, #4
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	6a3a      	ldr	r2, [r7, #32]
 80015be:	3204      	adds	r2, #4
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	1d1a      	adds	r2, r3, #4
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4a26      	ldr	r2, [pc, #152]	; (8001670 <xTaskRemoveFromEventList+0x19c>)
 80015d8:	441a      	add	r2, r3
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	615a      	str	r2, [r3, #20]
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e2:	4923      	ldr	r1, [pc, #140]	; (8001670 <xTaskRemoveFromEventList+0x19c>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	1c59      	adds	r1, r3, #1
 80015f2:	481f      	ldr	r0, [pc, #124]	; (8001670 <xTaskRemoveFromEventList+0x19c>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4403      	add	r3, r0
 80015fe:	6019      	str	r1, [r3, #0]
 8001600:	e01b      	b.n	800163a <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <xTaskRemoveFromEventList+0x1a0>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	61da      	str	r2, [r3, #28]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	621a      	str	r2, [r3, #32]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	6a3a      	ldr	r2, [r7, #32]
 800161c:	3218      	adds	r2, #24
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f103 0218 	add.w	r2, r3, #24
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	4a11      	ldr	r2, [pc, #68]	; (8001674 <xTaskRemoveFromEventList+0x1a0>)
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <xTaskRemoveFromEventList+0x1a0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <xTaskRemoveFromEventList+0x1a0>)
 8001638:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <xTaskRemoveFromEventList+0x1a4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	429a      	cmp	r2, r3
 8001646:	d905      	bls.n	8001654 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001648:	2301      	movs	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <xTaskRemoveFromEventList+0x1a8>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e001      	b.n	8001658 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800165a:	4618      	mov	r0, r3
 800165c:	372c      	adds	r7, #44	; 0x2c
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000124 	.word	0x20000124
 800166c:	20000104 	.word	0x20000104
 8001670:	20000028 	.word	0x20000028
 8001674:	200000bc 	.word	0x200000bc
 8001678:	20000024 	.word	0x20000024
 800167c:	20000110 	.word	0x20000110

08001680 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <vTaskInternalSetTimeOutState+0x24>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <vTaskInternalSetTimeOutState+0x28>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	605a      	str	r2, [r3, #4]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20000114 	.word	0x20000114
 80016a8:	20000100 	.word	0x20000100

080016ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <xTaskCheckForTimeOut+0x24>
 80016bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c0:	f383 8811 	msr	BASEPRI, r3
 80016c4:	f3bf 8f6f 	isb	sy
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e7fe      	b.n	80016ce <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <xTaskCheckForTimeOut+0x3e>
 80016d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016da:	f383 8811 	msr	BASEPRI, r3
 80016de:	f3bf 8f6f 	isb	sy
 80016e2:	f3bf 8f4f 	dsb	sy
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e7fe      	b.n	80016e8 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80016ea:	f000 fd39 	bl	8002160 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <xTaskCheckForTimeOut+0xc0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001706:	d102      	bne.n	800170e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	e026      	b.n	800175c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <xTaskCheckForTimeOut+0xc4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d00a      	beq.n	8001730 <xTaskCheckForTimeOut+0x84>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	429a      	cmp	r2, r3
 8001722:	d305      	bcc.n	8001730 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001724:	2301      	movs	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e015      	b.n	800175c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	429a      	cmp	r2, r3
 8001738:	d20b      	bcs.n	8001752 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	1ad2      	subs	r2, r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ff9a 	bl	8001680 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	e004      	b.n	800175c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001758:	2301      	movs	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800175c:	f000 fd2e 	bl	80021bc <vPortExitCritical>

    return xReturn;
 8001760:	69fb      	ldr	r3, [r7, #28]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000100 	.word	0x20000100
 8001770:	20000114 	.word	0x20000114

08001774 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <vTaskMissedYield+0x14>)
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	20000110 	.word	0x20000110

0800178c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001794:	f000 f852 	bl	800183c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <prvIdleTask+0x28>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d9f9      	bls.n	8001794 <prvIdleTask+0x8>
            {
                taskYIELD();
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <prvIdleTask+0x2c>)
 80017a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f3bf 8f4f 	dsb	sy
 80017ac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80017b0:	e7f0      	b.n	8001794 <prvIdleTask+0x8>
 80017b2:	bf00      	nop
 80017b4:	20000028 	.word	0x20000028
 80017b8:	e000ed04 	.word	0xe000ed04

080017bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	e00c      	b.n	80017e2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <prvInitialiseTaskLists+0x60>)
 80017d4:	4413      	add	r3, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fd02 	bl	80001e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3301      	adds	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d9ef      	bls.n	80017c8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <prvInitialiseTaskLists+0x64>)
 80017ea:	f7fe fcf9 	bl	80001e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <prvInitialiseTaskLists+0x68>)
 80017f0:	f7fe fcf6 	bl	80001e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <prvInitialiseTaskLists+0x6c>)
 80017f6:	f7fe fcf3 	bl	80001e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80017fa:	480c      	ldr	r0, [pc, #48]	; (800182c <prvInitialiseTaskLists+0x70>)
 80017fc:	f7fe fcf0 	bl	80001e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <prvInitialiseTaskLists+0x74>)
 8001802:	f7fe fced 	bl	80001e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <prvInitialiseTaskLists+0x78>)
 8001808:	4a05      	ldr	r2, [pc, #20]	; (8001820 <prvInitialiseTaskLists+0x64>)
 800180a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <prvInitialiseTaskLists+0x7c>)
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <prvInitialiseTaskLists+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000028 	.word	0x20000028
 8001820:	2000008c 	.word	0x2000008c
 8001824:	200000a0 	.word	0x200000a0
 8001828:	200000bc 	.word	0x200000bc
 800182c:	200000d0 	.word	0x200000d0
 8001830:	200000e8 	.word	0x200000e8
 8001834:	200000b4 	.word	0x200000b4
 8001838:	200000b8 	.word	0x200000b8

0800183c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001842:	e019      	b.n	8001878 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001844:	f000 fc8c 	bl	8002160 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <prvCheckTasksWaitingTermination+0x4c>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3304      	adds	r3, #4
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fd4d 	bl	80002f4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <prvCheckTasksWaitingTermination+0x50>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3b01      	subs	r3, #1
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <prvCheckTasksWaitingTermination+0x50>)
 8001862:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <prvCheckTasksWaitingTermination+0x54>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3b01      	subs	r3, #1
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <prvCheckTasksWaitingTermination+0x54>)
 800186c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800186e:	f000 fca5 	bl	80021bc <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f80e 	bl	8001894 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <prvCheckTasksWaitingTermination+0x54>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e1      	bne.n	8001844 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200000d0 	.word	0x200000d0
 800188c:	200000fc 	.word	0x200000fc
 8001890:	200000e4 	.word	0x200000e4

08001894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fde7 	bl	8002474 <vPortFree>
            vPortFree( pxTCB );
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 fde4 	bl	8002474 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <prvResetNextTaskUnblockTime+0x30>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d104      	bne.n	80018cc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <prvResetNextTaskUnblockTime+0x34>)
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80018ca:	e005      	b.n	80018d8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <prvResetNextTaskUnblockTime+0x30>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <prvResetNextTaskUnblockTime+0x34>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200000b4 	.word	0x200000b4
 80018e8:	2000011c 	.word	0x2000011c

080018ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <xTaskGetSchedulerState+0x34>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80018fa:	2301      	movs	r3, #1
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	e008      	b.n	8001912 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <xTaskGetSchedulerState+0x38>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001908:	2302      	movs	r3, #2
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	e001      	b.n	8001912 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001912:	687b      	ldr	r3, [r7, #4]
    }
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	20000108 	.word	0x20000108
 8001924:	20000124 	.word	0x20000124

08001928 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001932:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <prvAddCurrentTaskToDelayedList+0xe4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3304      	adds	r3, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcd8 	bl	80002f4 <uxListRemove>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10b      	bne.n	8001962 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	2201      	movs	r2, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <prvAddCurrentTaskToDelayedList+0xec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4013      	ands	r3, r2
 800195e:	4a2d      	ldr	r2, [pc, #180]	; (8001a14 <prvAddCurrentTaskToDelayedList+0xec>)
 8001960:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d124      	bne.n	80019b4 <prvAddCurrentTaskToDelayedList+0x8c>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d021      	beq.n	80019b4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001970:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	6892      	ldr	r2, [r2, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	3204      	adds	r2, #4
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1d1a      	adds	r2, r3, #4
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019a4:	615a      	str	r2, [r3, #20]
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <prvAddCurrentTaskToDelayedList+0xf0>)
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80019b2:	e026      	b.n	8001a02 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d209      	bcs.n	80019e0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <prvAddCurrentTaskToDelayedList+0xf4>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3304      	adds	r3, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f7fe fc52 	bl	8000282 <vListInsert>
}
 80019de:	e010      	b.n	8001a02 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <prvAddCurrentTaskToDelayedList+0xf8>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xe8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3304      	adds	r3, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f7fe fc48 	bl	8000282 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <prvAddCurrentTaskToDelayedList+0xfc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d202      	bcs.n	8001a02 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <prvAddCurrentTaskToDelayedList+0xfc>)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000100 	.word	0x20000100
 8001a10:	20000024 	.word	0x20000024
 8001a14:	20000104 	.word	0x20000104
 8001a18:	200000e8 	.word	0x200000e8
 8001a1c:	200000b8 	.word	0x200000b8
 8001a20:	200000b4 	.word	0x200000b4
 8001a24:	2000011c 	.word	0x2000011c

08001a28 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001a32:	f000 fa41 	bl	8001eb8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <xTimerCreateTimerTask+0x50>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <xTimerCreateTimerTask+0x54>)
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	2303      	movs	r3, #3
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2300      	movs	r3, #0
 8001a48:	2246      	movs	r2, #70	; 0x46
 8001a4a:	490d      	ldr	r1, [pc, #52]	; (8001a80 <xTimerCreateTimerTask+0x58>)
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <xTimerCreateTimerTask+0x5c>)
 8001a4e:	f7fe ff1f 	bl	8000890 <xTaskCreate>
 8001a52:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <xTimerCreateTimerTask+0x46>
 8001a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5e:	f383 8811 	msr	BASEPRI, r3
 8001a62:	f3bf 8f6f 	isb	sy
 8001a66:	f3bf 8f4f 	dsb	sy
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	e7fe      	b.n	8001a6c <xTimerCreateTimerTask+0x44>
        return xReturn;
 8001a6e:	687b      	ldr	r3, [r7, #4]
    }
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000158 	.word	0x20000158
 8001a7c:	2000015c 	.word	0x2000015c
 8001a80:	08002ef0 	.word	0x08002ef0
 8001a84:	08001b29 	.word	0x08001b29

08001a88 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001a94:	e008      	b.n	8001aa8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	699a      	ldr	r2, [r3, #24]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	18d1      	adds	r1, r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f8db 	bl	8001c70 <prvInsertTimerInActiveList>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ea      	bne.n	8001a96 <prvReloadTimer+0xe>
        }
    }
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <prvProcessExpiredTimer+0x5c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3304      	adds	r3, #4
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fc07 	bl	80002f4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff ffc5 	bl	8001a88 <prvReloadTimer>
 8001afe:	e008      	b.n	8001b12 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	4798      	blx	r3
    }
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000150 	.word	0x20000150

08001b28 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f857 	bl	8001be8 <prvGetNextExpireTime>
 8001b3a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f803 	bl	8001b4c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001b46:	f000 f8d5 	bl	8001cf4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001b4a:	e7f1      	b.n	8001b30 <prvTimerTask+0x8>

08001b4c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001b56:	f7ff f9cd 	bl	8000ef4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f866 	bl	8001c30 <prvSampleTimeNow>
 8001b64:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d130      	bne.n	8001bce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10a      	bne.n	8001b88 <prvProcessTimerOrBlockTask+0x3c>
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d806      	bhi.n	8001b88 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001b7a:	f7ff f9c9 	bl	8000f10 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ffa1 	bl	8001ac8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001b86:	e024      	b.n	8001bd2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <prvProcessTimerOrBlockTask+0x90>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <prvProcessTimerOrBlockTask+0x50>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <prvProcessTimerOrBlockTask+0x52>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <prvProcessTimerOrBlockTask+0x94>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe fe3b 	bl	8000828 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001bb2:	f7ff f9ad 	bl	8000f10 <xTaskResumeAll>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <prvProcessTimerOrBlockTask+0x98>)
 8001bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	f3bf 8f6f 	isb	sy
    }
 8001bcc:	e001      	b.n	8001bd2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001bce:	f7ff f99f 	bl	8000f10 <xTaskResumeAll>
    }
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000154 	.word	0x20000154
 8001be0:	20000158 	.word	0x20000158
 8001be4:	e000ed04 	.word	0xe000ed04

08001be8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <prvGetNextExpireTime+0x44>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <prvGetNextExpireTime+0x16>
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	e000      	b.n	8001c00 <prvGetNextExpireTime+0x18>
 8001bfe:	2200      	movs	r2, #0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <prvGetNextExpireTime+0x44>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	e001      	b.n	8001c1c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    }
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000150 	.word	0x20000150

08001c30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001c38:	f7ff fa64 	bl	8001104 <xTaskGetTickCount>
 8001c3c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <prvSampleTimeNow+0x3c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d205      	bcs.n	8001c54 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001c48:	f000 f910 	bl	8001e6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e002      	b.n	8001c5a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <prvSampleTimeNow+0x3c>)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001c60:	68fb      	ldr	r3, [r7, #12]
    }
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000160 	.word	0x20000160

08001c70 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d812      	bhi.n	8001cbc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	1ad2      	subs	r2, r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d302      	bcc.n	8001caa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e01b      	b.n	8001ce2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <prvInsertTimerInActiveList+0x7c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f7fe fae4 	bl	8000282 <vListInsert>
 8001cba:	e012      	b.n	8001ce2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d206      	bcs.n	8001cd2 <prvInsertTimerInActiveList+0x62>
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d302      	bcc.n	8001cd2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e007      	b.n	8001ce2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <prvInsertTimerInActiveList+0x80>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f7fe fad0 	bl	8000282 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001ce2:	697b      	ldr	r3, [r7, #20]
    }
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000154 	.word	0x20000154
 8001cf0:	20000150 	.word	0x20000150

08001cf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001cfa:	e0a5      	b.n	8001e48 <prvProcessReceivedCommands+0x154>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f2c0 80a1 	blt.w	8001e46 <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3304      	adds	r3, #4
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe faed 	bl	80002f4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff87 	bl	8001c30 <prvSampleTimeNow>
 8001d22:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	f200 808d 	bhi.w	8001e48 <prvProcessReceivedCommands+0x154>
 8001d2e:	a201      	add	r2, pc, #4	; (adr r2, 8001d34 <prvProcessReceivedCommands+0x40>)
 8001d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d34:	08001d59 	.word	0x08001d59
 8001d38:	08001d59 	.word	0x08001d59
 8001d3c:	08001dc1 	.word	0x08001dc1
 8001d40:	08001dd5 	.word	0x08001dd5
 8001d44:	08001e1d 	.word	0x08001e1d
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001d59 	.word	0x08001d59
 8001d50:	08001dc1 	.word	0x08001dc1
 8001d54:	08001dd5 	.word	0x08001dd5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	18d1      	adds	r1, r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	69f8      	ldr	r0, [r7, #28]
 8001d78:	f7ff ff7a 	bl	8001c70 <prvInsertTimerInActiveList>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d062      	beq.n	8001e48 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	4413      	add	r3, r2
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	69f8      	ldr	r0, [r7, #28]
 8001d9e:	f7ff fe73 	bl	8001a88 <prvReloadTimer>
 8001da2:	e008      	b.n	8001db6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	69f8      	ldr	r0, [r7, #28]
 8001dbc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001dbe:	e043      	b.n	8001e48 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8001dd2:	e039      	b.n	8001e48 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <prvProcessReceivedCommands+0x114>
 8001df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e7fe      	b.n	8001e06 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	18d1      	adds	r1, r2, r3
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	69f8      	ldr	r0, [r7, #28]
 8001e16:	f7ff ff2b 	bl	8001c70 <prvInsertTimerInActiveList>
                        break;
 8001e1a:	e015      	b.n	8001e48 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 8001e2a:	69f8      	ldr	r0, [r7, #28]
 8001e2c:	f000 fb22 	bl	8002474 <vPortFree>
 8001e30:	e00a      	b.n	8001e48 <prvProcessReceivedCommands+0x154>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001e44:	e000      	b.n	8001e48 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001e46:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <prvProcessReceivedCommands+0x174>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f107 0108 	add.w	r1, r7, #8
 8001e50:	2200      	movs	r2, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb7e 	bl	8000554 <xQueueReceive>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f47f af4e 	bne.w	8001cfc <prvProcessReceivedCommands+0x8>
        }
    }
 8001e60:	bf00      	nop
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000158 	.word	0x20000158

08001e6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001e72:	e009      	b.n	8001e88 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <prvSwitchTimerLists+0x44>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f7ff fe20 	bl	8001ac8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <prvSwitchTimerLists+0x44>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <prvSwitchTimerLists+0x44>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <prvSwitchTimerLists+0x48>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <prvSwitchTimerLists+0x44>)
 8001e9e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <prvSwitchTimerLists+0x48>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
    }
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000150 	.word	0x20000150
 8001eb4:	20000154 	.word	0x20000154

08001eb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001ebc:	f000 f950 	bl	8002160 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <prvCheckForValidListAndQueue+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d113      	bne.n	8001ef0 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <prvCheckForValidListAndQueue+0x44>)
 8001eca:	f7fe f989 	bl	80001e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001ece:	480c      	ldr	r0, [pc, #48]	; (8001f00 <prvCheckForValidListAndQueue+0x48>)
 8001ed0:	f7fe f986 	bl	80001e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <prvCheckForValidListAndQueue+0x4c>)
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <prvCheckForValidListAndQueue+0x44>)
 8001ed8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <prvCheckForValidListAndQueue+0x50>)
 8001edc:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <prvCheckForValidListAndQueue+0x48>)
 8001ede:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	210c      	movs	r1, #12
 8001ee4:	2005      	movs	r0, #5
 8001ee6:	f7fe fac3 	bl	8000470 <xQueueGenericCreate>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b02      	ldr	r3, [pc, #8]	; (8001ef8 <prvCheckForValidListAndQueue+0x40>)
 8001eee:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001ef0:	f000 f964 	bl	80021bc <vPortExitCritical>
    }
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000158 	.word	0x20000158
 8001efc:	20000128 	.word	0x20000128
 8001f00:	2000013c 	.word	0x2000013c
 8001f04:	20000150 	.word	0x20000150
 8001f08:	20000154 	.word	0x20000154

08001f0c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3b04      	subs	r3, #4
 8001f2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f023 0201 	bic.w	r2, r3, #1
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3b04      	subs	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <pxPortInitialiseStack+0x64>)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3b14      	subs	r3, #20
 8001f46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3b04      	subs	r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f06f 0202 	mvn.w	r2, #2
 8001f5a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b20      	subs	r3, #32
 8001f60:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	08001f75 	.word	0x08001f75

08001f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <prvTaskExitError+0x50>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d009      	beq.n	8001f9c <prvTaskExitError+0x28>
 8001f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8c:	f383 8811 	msr	BASEPRI, r3
 8001f90:	f3bf 8f6f 	isb	sy
 8001f94:	f3bf 8f4f 	dsb	sy
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e7fe      	b.n	8001f9a <prvTaskExitError+0x26>
 8001f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa0:	f383 8811 	msr	BASEPRI, r3
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001fae:	bf00      	nop
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0fc      	beq.n	8001fb0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000004 	.word	0x20000004
	...

08001fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <pxCurrentTCBConst2>)
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	6808      	ldr	r0, [r1, #0]
 8001fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fda:	f380 8809 	msr	PSP, r0
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f380 8811 	msr	BASEPRI, r0
 8001fea:	4770      	bx	lr
 8001fec:	f3af 8000 	nop.w

08001ff0 <pxCurrentTCBConst2>:
 8001ff0:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop

08001ff8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <prvPortStartFirstTask+0x24>)
 8001ffa:	6800      	ldr	r0, [r0, #0]
 8001ffc:	6800      	ldr	r0, [r0, #0]
 8001ffe:	f380 8808 	msr	MSP, r0
 8002002:	f04f 0000 	mov.w	r0, #0
 8002006:	f380 8814 	msr	CONTROL, r0
 800200a:	b662      	cpsie	i
 800200c:	b661      	cpsie	f
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	f3bf 8f6f 	isb	sy
 8002016:	df00      	svc	0
 8002018:	bf00      	nop
 800201a:	0000      	.short	0x0000
 800201c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop

08002024 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <xPortStartScheduler+0x118>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a44      	ldr	r2, [pc, #272]	; (8002140 <xPortStartScheduler+0x11c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d109      	bne.n	8002048 <xPortStartScheduler+0x24>
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e7fe      	b.n	8002046 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002048:	4b3c      	ldr	r3, [pc, #240]	; (800213c <xPortStartScheduler+0x118>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <xPortStartScheduler+0x120>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d109      	bne.n	8002066 <xPortStartScheduler+0x42>
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e7fe      	b.n	8002064 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002066:	4b38      	ldr	r3, [pc, #224]	; (8002148 <xPortStartScheduler+0x124>)
 8002068:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	22ff      	movs	r2, #255	; 0xff
 8002076:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b30      	ldr	r3, [pc, #192]	; (800214c <xPortStartScheduler+0x128>)
 800208c:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <xPortStartScheduler+0x12c>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002094:	e009      	b.n	80020aa <xPortStartScheduler+0x86>
        {
            ulMaxPRIGROUPValue--;
 8002096:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <xPortStartScheduler+0x12c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3b01      	subs	r3, #1
 800209c:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <xPortStartScheduler+0x12c>)
 800209e:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b80      	cmp	r3, #128	; 0x80
 80020b4:	d0ef      	beq.n	8002096 <xPortStartScheduler+0x72>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <xPortStartScheduler+0x12c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f1c3 0307 	rsb	r3, r3, #7
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d009      	beq.n	80020d6 <xPortStartScheduler+0xb2>
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	e7fe      	b.n	80020d4 <xPortStartScheduler+0xb0>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <xPortStartScheduler+0x12c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <xPortStartScheduler+0x12c>)
 80020de:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <xPortStartScheduler+0x12c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <xPortStartScheduler+0x12c>)
 80020ea:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <xPortStartScheduler+0x130>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a16      	ldr	r2, [pc, #88]	; (8002154 <xPortStartScheduler+0x130>)
 80020fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020fe:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <xPortStartScheduler+0x130>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <xPortStartScheduler+0x130>)
 8002106:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800210a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800210c:	f000 f8d4 	bl	80022b8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <xPortStartScheduler+0x134>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002116:	f000 f8e9 	bl	80022ec <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <xPortStartScheduler+0x138>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <xPortStartScheduler+0x138>)
 8002120:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002124:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002126:	f7ff ff67 	bl	8001ff8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800212a:	f7ff f911 	bl	8001350 <vTaskSwitchContext>
    prvTaskExitError();
 800212e:	f7ff ff21 	bl	8001f74 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	e000ed00 	.word	0xe000ed00
 8002140:	410fc271 	.word	0x410fc271
 8002144:	410fc270 	.word	0x410fc270
 8002148:	e000e400 	.word	0xe000e400
 800214c:	20000164 	.word	0x20000164
 8002150:	20000168 	.word	0x20000168
 8002154:	e000ed20 	.word	0xe000ed20
 8002158:	20000004 	.word	0x20000004
 800215c:	e000ef34 	.word	0xe000ef34

08002160 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216a:	f383 8811 	msr	BASEPRI, r3
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f3bf 8f4f 	dsb	sy
 8002176:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <vPortEnterCritical+0x54>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <vPortEnterCritical+0x54>)
 8002180:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <vPortEnterCritical+0x54>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d10e      	bne.n	80021a8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <vPortEnterCritical+0x58>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d009      	beq.n	80021a8 <vPortEnterCritical+0x48>
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	e7fe      	b.n	80021a6 <vPortEnterCritical+0x46>
    }
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	20000004 	.word	0x20000004
 80021b8:	e000ed04 	.word	0xe000ed04

080021bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <vPortExitCritical+0x4c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <vPortExitCritical+0x22>
 80021ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ce:	f383 8811 	msr	BASEPRI, r3
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	e7fe      	b.n	80021dc <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <vPortExitCritical+0x4c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	4a08      	ldr	r2, [pc, #32]	; (8002208 <vPortExitCritical+0x4c>)
 80021e6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <vPortExitCritical+0x4c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d104      	bne.n	80021fa <vPortExitCritical+0x3e>
 80021f0:	2300      	movs	r3, #0
 80021f2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000004 	.word	0x20000004
 800220c:	00000000 	.word	0x00000000

08002210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002210:	f3ef 8009 	mrs	r0, PSP
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	4b15      	ldr	r3, [pc, #84]	; (8002270 <pxCurrentTCBConst>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f01e 0f10 	tst.w	lr, #16
 8002220:	bf08      	it	eq
 8002222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222a:	6010      	str	r0, [r2, #0]
 800222c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002234:	f380 8811 	msr	BASEPRI, r0
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f7ff f886 	bl	8001350 <vTaskSwitchContext>
 8002244:	f04f 0000 	mov.w	r0, #0
 8002248:	f380 8811 	msr	BASEPRI, r0
 800224c:	bc09      	pop	{r0, r3}
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	6808      	ldr	r0, [r1, #0]
 8002252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002256:	f01e 0f10 	tst.w	lr, #16
 800225a:	bf08      	it	eq
 800225c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002260:	f380 8809 	msr	PSP, r0
 8002264:	f3bf 8f6f 	isb	sy
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	f3af 8000 	nop.w

08002270 <pxCurrentTCBConst>:
 8002270:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop

08002278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
        __asm volatile
 800227e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002282:	f383 8811 	msr	BASEPRI, r3
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002290:	f7fe ff48 	bl	8001124 <xTaskIncrementTick>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <SysTick_Handler+0x3c>)
 800229c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	e000ed04 	.word	0xe000ed04

080022b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <vPortSetupTimerInterrupt+0x28>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <vPortSetupTimerInterrupt+0x2c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <vPortSetupTimerInterrupt+0x30>)
 80022ca:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80022ce:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <vPortSetupTimerInterrupt+0x28>)
 80022d2:	2207      	movs	r2, #7
 80022d4:	601a      	str	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e010 	.word	0xe000e010
 80022e4:	e000e018 	.word	0xe000e018
 80022e8:	e000e014 	.word	0xe000e014

080022ec <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80022ec:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80022fc <vPortEnableVFP+0x10>
 80022f0:	6801      	ldr	r1, [r0, #0]
 80022f2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80022f6:	6001      	str	r1, [r0, #0]
 80022f8:	4770      	bx	lr
 80022fa:	0000      	.short	0x0000
 80022fc:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop

08002304 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002310:	f7fe fdf0 	bl	8000ef4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002314:	4b52      	ldr	r3, [pc, #328]	; (8002460 <pvPortMalloc+0x15c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800231c:	f000 f904 	bl	8002528 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d012      	beq.n	800234c <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002326:	2208      	movs	r2, #8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	3308      	adds	r3, #8
 8002332:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	43db      	mvns	r3, r3
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	d804      	bhi.n	8002348 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4413      	add	r3, r2
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	e001      	b.n	800234c <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db6f      	blt.n	8002432 <pvPortMalloc+0x12e>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d06c      	beq.n	8002432 <pvPortMalloc+0x12e>
 8002358:	4b42      	ldr	r3, [pc, #264]	; (8002464 <pvPortMalloc+0x160>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d867      	bhi.n	8002432 <pvPortMalloc+0x12e>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002362:	4b41      	ldr	r3, [pc, #260]	; (8002468 <pvPortMalloc+0x164>)
 8002364:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002366:	4b40      	ldr	r3, [pc, #256]	; (8002468 <pvPortMalloc+0x164>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800236c:	e004      	b.n	8002378 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	429a      	cmp	r2, r3
 8002380:	d903      	bls.n	800238a <pvPortMalloc+0x86>
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f1      	bne.n	800236e <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800238a:	4b35      	ldr	r3, [pc, #212]	; (8002460 <pvPortMalloc+0x15c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002390:	429a      	cmp	r2, r3
 8002392:	d04e      	beq.n	8002432 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2208      	movs	r2, #8
 800239a:	4413      	add	r3, r2
 800239c:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	1ad2      	subs	r2, r2, r3
 80023ae:	2308      	movs	r3, #8
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d91e      	bls.n	80023f4 <pvPortMalloc+0xf0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <pvPortMalloc+0xd8>
        __asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	e7fe      	b.n	80023da <pvPortMalloc+0xd6>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	1ad2      	subs	r2, r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f000 f8f6 	bl	80025e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <pvPortMalloc+0x160>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	4a19      	ldr	r2, [pc, #100]	; (8002464 <pvPortMalloc+0x160>)
 8002400:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <pvPortMalloc+0x160>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <pvPortMalloc+0x168>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d203      	bcs.n	8002416 <pvPortMalloc+0x112>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <pvPortMalloc+0x160>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <pvPortMalloc+0x168>)
 8002414:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <pvPortMalloc+0x16c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	4a10      	ldr	r2, [pc, #64]	; (8002470 <pvPortMalloc+0x16c>)
 8002430:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002432:	f7fe fd6d 	bl	8000f10 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <pvPortMalloc+0x150>
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e7fe      	b.n	8002452 <pvPortMalloc+0x14e>
    return pvReturn;
 8002454:	69fb      	ldr	r3, [r7, #28]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3728      	adds	r7, #40	; 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20001d74 	.word	0x20001d74
 8002464:	20001d78 	.word	0x20001d78
 8002468:	20001d6c 	.word	0x20001d6c
 800246c:	20001d7c 	.word	0x20001d7c
 8002470:	20001d80 	.word	0x20001d80

08002474 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d047      	beq.n	8002516 <vPortFree+0xa2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002486:	2308      	movs	r3, #8
 8002488:	425b      	negs	r3, r3
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4413      	add	r3, r2
 800248e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	db09      	blt.n	80024b0 <vPortFree+0x3c>
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	e7fe      	b.n	80024ae <vPortFree+0x3a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <vPortFree+0x58>
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	e7fe      	b.n	80024ca <vPortFree+0x56>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	0fdb      	lsrs	r3, r3, #31
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01c      	beq.n	8002516 <vPortFree+0xa2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d118      	bne.n	8002516 <vPortFree+0xa2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80024f0:	f7fe fd00 	bl	8000ef4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <vPortFree+0xac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a08      	ldr	r2, [pc, #32]	; (8002520 <vPortFree+0xac>)
 8002500:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002502:	6938      	ldr	r0, [r7, #16]
 8002504:	f000 f86c 	bl	80025e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <vPortFree+0xb0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	4a05      	ldr	r2, [pc, #20]	; (8002524 <vPortFree+0xb0>)
 8002510:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002512:	f7fe fcfd 	bl	8000f10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20001d78 	.word	0x20001d78
 8002524:	20001d84 	.word	0x20001d84

08002528 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800252e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002532:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <prvHeapInit+0xa4>)
 8002536:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3307      	adds	r3, #7
 8002546:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0307 	bic.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <prvHeapInit+0xa4>)
 8002558:	4413      	add	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002560:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <prvHeapInit+0xa8>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <prvHeapInit+0xa8>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	4413      	add	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002574:	2208      	movs	r2, #8
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0307 	bic.w	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <prvHeapInit+0xac>)
 8002588:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <prvHeapInit+0xac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <prvHeapInit+0xac>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	1ad2      	subs	r2, r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <prvHeapInit+0xac>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <prvHeapInit+0xb0>)
 80025b6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a07      	ldr	r2, [pc, #28]	; (80025dc <prvHeapInit+0xb4>)
 80025be:	6013      	str	r3, [r2, #0]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	2000016c 	.word	0x2000016c
 80025d0:	20001d6c 	.word	0x20001d6c
 80025d4:	20001d74 	.word	0x20001d74
 80025d8:	20001d7c 	.word	0x20001d7c
 80025dc:	20001d78 	.word	0x20001d78

080025e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80025e8:	4b28      	ldr	r3, [pc, #160]	; (800268c <prvInsertBlockIntoFreeList+0xac>)
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e002      	b.n	80025f4 <prvInsertBlockIntoFreeList+0x14>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d8f7      	bhi.n	80025ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d108      	bne.n	8002622 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	441a      	add	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	441a      	add	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d118      	bne.n	8002668 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <prvInsertBlockIntoFreeList+0xb0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d00d      	beq.n	800265e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	441a      	add	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e008      	b.n	8002670 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <prvInsertBlockIntoFreeList+0xb0>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e003      	b.n	8002670 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	d002      	beq.n	800267e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20001d6c 	.word	0x20001d6c
 8002690:	20001d74 	.word	0x20001d74

08002694 <extint_clearFlag>:
		}
	extint0_Callback[lineId]=clbk;
	}
}
void extint_clearFlag(u8 lineId)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
	if (lineId>=0 && lineId<32)
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2b1f      	cmp	r3, #31
 80026a2:	d80a      	bhi.n	80026ba <extint_clearFlag+0x26>
	{
		/* clearing Interrupt on the line */
		SET_BIT(EXTI_PR1_REG, lineId);
 80026a4:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <extint_clearFlag+0x48>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f202 	lsl.w	r2, r1, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <extint_clearFlag+0x48>)
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6013      	str	r3, [r2, #0]
	}
	else
	{
		SET_BIT(EXTI_PR2_REG, lineId);
	}
}
 80026b8:	e009      	b.n	80026ce <extint_clearFlag+0x3a>
		SET_BIT(EXTI_PR2_REG, lineId);
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <extint_clearFlag+0x4c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	79fa      	ldrb	r2, [r7, #7]
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f202 	lsl.w	r2, r1, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <extint_clearFlag+0x4c>)
 80026ca:	430b      	orrs	r3, r1
 80026cc:	6013      	str	r3, [r2, #0]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40010414 	.word	0x40010414
 80026e0:	40010434 	.word	0x40010434

080026e4 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
		extint_clearFlag(EXTI0);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff ffd3 	bl	8002694 <extint_clearFlag>
		if (extint0_Callback[EXTI0] != NULL)
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <EXTI0_IRQHandler+0x1c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <EXTI0_IRQHandler+0x18>
		{
			extint0_Callback[EXTI0]();
 80026f6:	4b02      	ldr	r3, [pc, #8]	; (8002700 <EXTI0_IRQHandler+0x1c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4798      	blx	r3
		}
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20001d88 	.word	0x20001d88

08002704 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
		extint_clearFlag(EXTI13);
 8002708:	200d      	movs	r0, #13
 800270a:	f7ff ffc3 	bl	8002694 <extint_clearFlag>
		if (extint0_Callback[EXTI13] != NULL)
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <EXTI15_10_IRQHandler+0x1c>)
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <EXTI15_10_IRQHandler+0x18>
		{
			extint0_Callback[EXTI13]();
 8002716:	4b02      	ldr	r3, [pc, #8]	; (8002720 <EXTI15_10_IRQHandler+0x1c>)
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	4798      	blx	r3
		}
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20001d88 	.word	0x20001d88

08002724 <GPIO_voidSetPinDirection>:
/******************************************************************************
* Function Prototypes
*******************************************************************************/

void GPIO_voidSetPinDirection	(u8 Copy_u8Port, Pin_t Copy_Pin , u8 Copy_u8Mode)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
 800272e:	460b      	mov	r3, r1
 8002730:	71bb      	strb	r3, [r7, #6]
 8002732:	4613      	mov	r3, r2
 8002734:	717b      	strb	r3, [r7, #5]
	u8 copy_u8Moder = 0, copy_OTYPER= 0 , copy_OSPEEDR = 0 , copy_PUPDR = 0  ;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	2300      	movs	r3, #0
 800273c:	73bb      	strb	r3, [r7, #14]
 800273e:	2300      	movs	r3, #0
 8002740:	737b      	strb	r3, [r7, #13]
 8002742:	2300      	movs	r3, #0
 8002744:	733b      	strb	r3, [r7, #12]

	copy_u8Moder |= (CHECK_BIT(Copy_u8Mode,6)<<1) | CHECK_BIT(Copy_u8Mode,5) ;
 8002746:	797b      	ldrb	r3, [r7, #5]
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	b2db      	uxtb	r3, r3
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	b25b      	sxtb	r3, r3
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	b25a      	sxtb	r2, r3
 8002756:	797b      	ldrb	r3, [r7, #5]
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	b2db      	uxtb	r3, r3
 800275c:	b25b      	sxtb	r3, r3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	b25b      	sxtb	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	b25a      	sxtb	r2, r3
 8002768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276c:	4313      	orrs	r3, r2
 800276e:	b25b      	sxtb	r3, r3
 8002770:	73fb      	strb	r3, [r7, #15]
	copy_OTYPER  |= CHECK_BIT(Copy_u8Mode,4);
 8002772:	797b      	ldrb	r3, [r7, #5]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	b2db      	uxtb	r3, r3
 8002778:	b25b      	sxtb	r3, r3
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	b25a      	sxtb	r2, r3
 8002780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002784:	4313      	orrs	r3, r2
 8002786:	b25b      	sxtb	r3, r3
 8002788:	73bb      	strb	r3, [r7, #14]
	copy_OSPEEDR |= (CHECK_BIT(Copy_u8Mode,3)<<1) | CHECK_BIT(Copy_u8Mode,2) ;
 800278a:	797b      	ldrb	r3, [r7, #5]
 800278c:	08db      	lsrs	r3, r3, #3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	b25b      	sxtb	r3, r3
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	b25a      	sxtb	r2, r3
 800279a:	797b      	ldrb	r3, [r7, #5]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	b25b      	sxtb	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b25a      	sxtb	r2, r3
 80027ac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	737b      	strb	r3, [r7, #13]
	copy_PUPDR   |=(CHECK_BIT(Copy_u8Mode,1)<<1) | CHECK_BIT(Copy_u8Mode,0) ;
 80027b6:	797b      	ldrb	r3, [r7, #5]
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	b25a      	sxtb	r2, r3
 80027c6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	b25b      	sxtb	r3, r3
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b25a      	sxtb	r2, r3
 80027d4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	733b      	strb	r3, [r7, #12]
	switch(Copy_u8Port)
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	3b11      	subs	r3, #17
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	f200 8198 	bhi.w	8002b18 <GPIO_voidSetPinDirection+0x3f4>
 80027e8:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <GPIO_voidSetPinDirection+0xcc>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002801 	.word	0x08002801
 80027f4:	080028df 	.word	0x080028df
 80027f8:	080029a3 	.word	0x080029a3
 80027fc:	08002a5d 	.word	0x08002a5d
	{
		case PORTA :

			if(Copy_Pin <= PIN7)
 8002800:	79bb      	ldrb	r3, [r7, #6]
 8002802:	2b07      	cmp	r3, #7
 8002804:	d833      	bhi.n	800286e <GPIO_voidSetPinDirection+0x14a>
			{
				/* 			RESET		*/
				GPIOA->MODER |= (copy_u8Moder << 2*Copy_Pin) ;
 8002806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	7bf9      	ldrb	r1, [r7, #15]
 800280e:	79ba      	ldrb	r2, [r7, #6]
 8002810:	0052      	lsls	r2, r2, #1
 8002812:	fa01 f202 	lsl.w	r2, r1, r2
 8002816:	4611      	mov	r1, r2
 8002818:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800281c:	430b      	orrs	r3, r1
 800281e:	6013      	str	r3, [r2, #0]
				GPIOA->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8002820:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	7bb9      	ldrb	r1, [r7, #14]
 8002828:	79ba      	ldrb	r2, [r7, #6]
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4611      	mov	r1, r2
 8002830:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002834:	430b      	orrs	r3, r1
 8002836:	6053      	str	r3, [r2, #4]
				GPIOA->OSPEEDR |= (copy_OSPEEDR << 2*Copy_Pin) ;
 8002838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	7b79      	ldrb	r1, [r7, #13]
 8002840:	79ba      	ldrb	r2, [r7, #6]
 8002842:	0052      	lsls	r2, r2, #1
 8002844:	fa01 f202 	lsl.w	r2, r1, r2
 8002848:	4611      	mov	r1, r2
 800284a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800284e:	430b      	orrs	r3, r1
 8002850:	6093      	str	r3, [r2, #8]
				GPIOA->PUPDR  |= (copy_PUPDR<< 2*copy_PUPDR);
 8002852:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	7b39      	ldrb	r1, [r7, #12]
 800285a:	7b3a      	ldrb	r2, [r7, #12]
 800285c:	0052      	lsls	r2, r2, #1
 800285e:	fa01 f202 	lsl.w	r2, r1, r2
 8002862:	4611      	mov	r1, r2
 8002864:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002868:	430b      	orrs	r3, r1
 800286a:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 800286c:	e156      	b.n	8002b1c <GPIO_voidSetPinDirection+0x3f8>
			else if (Copy_Pin <= PIN15 )
 800286e:	79bb      	ldrb	r3, [r7, #6]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	f200 8153 	bhi.w	8002b1c <GPIO_voidSetPinDirection+0x3f8>
				GPIOA->MODER |= (copy_u8Moder <<  (2*Copy_Pin));
 8002876:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	7bf9      	ldrb	r1, [r7, #15]
 800287e:	79ba      	ldrb	r2, [r7, #6]
 8002880:	0052      	lsls	r2, r2, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4611      	mov	r1, r2
 8002888:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800288c:	430b      	orrs	r3, r1
 800288e:	6013      	str	r3, [r2, #0]
				GPIOA->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8002890:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	7bb9      	ldrb	r1, [r7, #14]
 8002898:	79ba      	ldrb	r2, [r7, #6]
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	4611      	mov	r1, r2
 80028a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6053      	str	r3, [r2, #4]
				GPIOA->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 80028a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	7b79      	ldrb	r1, [r7, #13]
 80028b0:	79ba      	ldrb	r2, [r7, #6]
 80028b2:	0052      	lsls	r2, r2, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4611      	mov	r1, r2
 80028ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028be:	430b      	orrs	r3, r1
 80028c0:	6093      	str	r3, [r2, #8]
				GPIOA->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 80028c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	7b39      	ldrb	r1, [r7, #12]
 80028ca:	79ba      	ldrb	r2, [r7, #6]
 80028cc:	0052      	lsls	r2, r2, #1
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	4611      	mov	r1, r2
 80028d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028d8:	430b      	orrs	r3, r1
 80028da:	60d3      	str	r3, [r2, #12]
			break;
 80028dc:	e11e      	b.n	8002b1c <GPIO_voidSetPinDirection+0x3f8>
		case PORTB :

			if(Copy_Pin <= PIN7)
 80028de:	79bb      	ldrb	r3, [r7, #6]
 80028e0:	2b07      	cmp	r3, #7
 80028e2:	d82b      	bhi.n	800293c <GPIO_voidSetPinDirection+0x218>
			{
				/* 			RESET		*/
				GPIOB->MODER |= (copy_u8Moder << 2*Copy_Pin) ;
 80028e4:	4b93      	ldr	r3, [pc, #588]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	7bf9      	ldrb	r1, [r7, #15]
 80028ea:	79ba      	ldrb	r2, [r7, #6]
 80028ec:	0052      	lsls	r2, r2, #1
 80028ee:	fa01 f202 	lsl.w	r2, r1, r2
 80028f2:	4611      	mov	r1, r2
 80028f4:	4a8f      	ldr	r2, [pc, #572]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 80028f6:	430b      	orrs	r3, r1
 80028f8:	6013      	str	r3, [r2, #0]
				GPIOB->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 80028fa:	4b8e      	ldr	r3, [pc, #568]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	7bb9      	ldrb	r1, [r7, #14]
 8002900:	79ba      	ldrb	r2, [r7, #6]
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	4611      	mov	r1, r2
 8002908:	4a8a      	ldr	r2, [pc, #552]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 800290a:	430b      	orrs	r3, r1
 800290c:	6053      	str	r3, [r2, #4]
				GPIOB->OSPEEDR |= (copy_OSPEEDR << 2*Copy_Pin) ;
 800290e:	4b89      	ldr	r3, [pc, #548]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	7b79      	ldrb	r1, [r7, #13]
 8002914:	79ba      	ldrb	r2, [r7, #6]
 8002916:	0052      	lsls	r2, r2, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	4611      	mov	r1, r2
 800291e:	4a85      	ldr	r2, [pc, #532]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 8002920:	430b      	orrs	r3, r1
 8002922:	6093      	str	r3, [r2, #8]
				GPIOB->PUPDR  |= (copy_PUPDR<< 2*copy_PUPDR);
 8002924:	4b83      	ldr	r3, [pc, #524]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	7b39      	ldrb	r1, [r7, #12]
 800292a:	7b3a      	ldrb	r2, [r7, #12]
 800292c:	0052      	lsls	r2, r2, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4611      	mov	r1, r2
 8002934:	4a7f      	ldr	r2, [pc, #508]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 8002936:	430b      	orrs	r3, r1
 8002938:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 800293a:	e0f1      	b.n	8002b20 <GPIO_voidSetPinDirection+0x3fc>
			else if (Copy_Pin <= PIN15 )
 800293c:	79bb      	ldrb	r3, [r7, #6]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f200 80ee 	bhi.w	8002b20 <GPIO_voidSetPinDirection+0x3fc>
				GPIOB->MODER |= (copy_u8Moder << (2*Copy_Pin+10)) ;
 8002944:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	7bf9      	ldrb	r1, [r7, #15]
 800294a:	79ba      	ldrb	r2, [r7, #6]
 800294c:	3205      	adds	r2, #5
 800294e:	0052      	lsls	r2, r2, #1
 8002950:	fa01 f202 	lsl.w	r2, r1, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4a77      	ldr	r2, [pc, #476]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 8002958:	430b      	orrs	r3, r1
 800295a:	6013      	str	r3, [r2, #0]
				GPIOB->OTYPER |= (copy_OTYPER << Copy_Pin );
 800295c:	4b75      	ldr	r3, [pc, #468]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	7bb9      	ldrb	r1, [r7, #14]
 8002962:	79ba      	ldrb	r2, [r7, #6]
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4611      	mov	r1, r2
 800296a:	4a72      	ldr	r2, [pc, #456]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 800296c:	430b      	orrs	r3, r1
 800296e:	6053      	str	r3, [r2, #4]
				GPIOB->OSPEEDR |= (copy_OSPEEDR << ( 2*Copy_Pin +1 )) ;
 8002970:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	7b79      	ldrb	r1, [r7, #13]
 8002976:	79ba      	ldrb	r2, [r7, #6]
 8002978:	0052      	lsls	r2, r2, #1
 800297a:	3201      	adds	r2, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	4611      	mov	r1, r2
 8002982:	4a6c      	ldr	r2, [pc, #432]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 8002984:	430b      	orrs	r3, r1
 8002986:	6093      	str	r3, [r2, #8]
				GPIOB->PUPDR  |= (copy_PUPDR<< (2*copy_PUPDR+1 ));
 8002988:	4b6a      	ldr	r3, [pc, #424]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	7b39      	ldrb	r1, [r7, #12]
 800298e:	7b3a      	ldrb	r2, [r7, #12]
 8002990:	0052      	lsls	r2, r2, #1
 8002992:	3201      	adds	r2, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	4611      	mov	r1, r2
 800299a:	4a66      	ldr	r2, [pc, #408]	; (8002b34 <GPIO_voidSetPinDirection+0x410>)
 800299c:	430b      	orrs	r3, r1
 800299e:	60d3      	str	r3, [r2, #12]
			break;
 80029a0:	e0be      	b.n	8002b20 <GPIO_voidSetPinDirection+0x3fc>
		case PORTC :

			if(Copy_Pin <= PIN7)
 80029a2:	79bb      	ldrb	r3, [r7, #6]
 80029a4:	2b07      	cmp	r3, #7
 80029a6:	d82b      	bhi.n	8002a00 <GPIO_voidSetPinDirection+0x2dc>
			{
				/* 			RESET		*/
				GPIOC->MODER |= (copy_u8Moder << 2*Copy_Pin) ;
 80029a8:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	7bf9      	ldrb	r1, [r7, #15]
 80029ae:	79ba      	ldrb	r2, [r7, #6]
 80029b0:	0052      	lsls	r2, r2, #1
 80029b2:	fa01 f202 	lsl.w	r2, r1, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4a5f      	ldr	r2, [pc, #380]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 80029ba:	430b      	orrs	r3, r1
 80029bc:	6013      	str	r3, [r2, #0]
				GPIOC->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 80029be:	4b5e      	ldr	r3, [pc, #376]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	7bb9      	ldrb	r1, [r7, #14]
 80029c4:	79ba      	ldrb	r2, [r7, #6]
 80029c6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ca:	4611      	mov	r1, r2
 80029cc:	4a5a      	ldr	r2, [pc, #360]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 80029ce:	430b      	orrs	r3, r1
 80029d0:	6053      	str	r3, [r2, #4]
				GPIOC->OSPEEDR |= (copy_OSPEEDR << 2*Copy_Pin) ;
 80029d2:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	7b79      	ldrb	r1, [r7, #13]
 80029d8:	79ba      	ldrb	r2, [r7, #6]
 80029da:	0052      	lsls	r2, r2, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	4611      	mov	r1, r2
 80029e2:	4a55      	ldr	r2, [pc, #340]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6093      	str	r3, [r2, #8]
				GPIOC->PUPDR  |= (copy_PUPDR<< 2*copy_PUPDR);
 80029e8:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	7b39      	ldrb	r1, [r7, #12]
 80029ee:	7b3a      	ldrb	r2, [r7, #12]
 80029f0:	0052      	lsls	r2, r2, #1
 80029f2:	fa01 f202 	lsl.w	r2, r1, r2
 80029f6:	4611      	mov	r1, r2
 80029f8:	4a4f      	ldr	r2, [pc, #316]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 80029fa:	430b      	orrs	r3, r1
 80029fc:	60d3      	str	r3, [r2, #12]
 80029fe:	e02d      	b.n	8002a5c <GPIO_voidSetPinDirection+0x338>
			}
			else if (Copy_Pin <= PIN15 )
 8002a00:	79bb      	ldrb	r3, [r7, #6]
 8002a02:	2b0f      	cmp	r3, #15
 8002a04:	d82a      	bhi.n	8002a5c <GPIO_voidSetPinDirection+0x338>
			{
				GPIOC->MODER |= (copy_u8Moder <<  (2*Copy_Pin)) ;
 8002a06:	4b4c      	ldr	r3, [pc, #304]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	7bf9      	ldrb	r1, [r7, #15]
 8002a0c:	79ba      	ldrb	r2, [r7, #6]
 8002a0e:	0052      	lsls	r2, r2, #1
 8002a10:	fa01 f202 	lsl.w	r2, r1, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6013      	str	r3, [r2, #0]
				GPIOC->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8002a1c:	4b46      	ldr	r3, [pc, #280]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	7bb9      	ldrb	r1, [r7, #14]
 8002a22:	79ba      	ldrb	r2, [r7, #6]
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4a43      	ldr	r2, [pc, #268]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6053      	str	r3, [r2, #4]
				GPIOC->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 8002a30:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	7b79      	ldrb	r1, [r7, #13]
 8002a36:	79ba      	ldrb	r2, [r7, #6]
 8002a38:	0052      	lsls	r2, r2, #1
 8002a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4a3d      	ldr	r2, [pc, #244]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 8002a42:	430b      	orrs	r3, r1
 8002a44:	6093      	str	r3, [r2, #8]
				GPIOC->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 8002a46:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	7b39      	ldrb	r1, [r7, #12]
 8002a4c:	79ba      	ldrb	r2, [r7, #6]
 8002a4e:	0052      	lsls	r2, r2, #1
 8002a50:	fa01 f202 	lsl.w	r2, r1, r2
 8002a54:	4611      	mov	r1, r2
 8002a56:	4a38      	ldr	r2, [pc, #224]	; (8002b38 <GPIO_voidSetPinDirection+0x414>)
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	60d3      	str	r3, [r2, #12]
			{
				/* error */
			}
		case PORTD :

			if(Copy_Pin <= PIN7)
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	d82b      	bhi.n	8002aba <GPIO_voidSetPinDirection+0x396>
			{
				/* 			RESET		*/
				GPIOD->MODER |= (copy_u8Moder << 2*Copy_Pin) ;
 8002a62:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	7bf9      	ldrb	r1, [r7, #15]
 8002a68:	79ba      	ldrb	r2, [r7, #6]
 8002a6a:	0052      	lsls	r2, r2, #1
 8002a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a70:	4611      	mov	r1, r2
 8002a72:	4a32      	ldr	r2, [pc, #200]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6013      	str	r3, [r2, #0]
				GPIOD->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	7bb9      	ldrb	r1, [r7, #14]
 8002a7e:	79ba      	ldrb	r2, [r7, #6]
 8002a80:	fa01 f202 	lsl.w	r2, r1, r2
 8002a84:	4611      	mov	r1, r2
 8002a86:	4a2d      	ldr	r2, [pc, #180]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6053      	str	r3, [r2, #4]
				GPIOD->OSPEEDR |= (copy_OSPEEDR << 2*Copy_Pin) ;
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	7b79      	ldrb	r1, [r7, #13]
 8002a92:	79ba      	ldrb	r2, [r7, #6]
 8002a94:	0052      	lsls	r2, r2, #1
 8002a96:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	6093      	str	r3, [r2, #8]
				GPIOD->PUPDR  |= (copy_PUPDR<< 2*copy_PUPDR);
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	7b39      	ldrb	r1, [r7, #12]
 8002aa8:	7b3a      	ldrb	r2, [r7, #12]
 8002aaa:	0052      	lsls	r2, r2, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4a22      	ldr	r2, [pc, #136]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	60d3      	str	r3, [r2, #12]
			}
			else 
			{
				/* error */ 
			}
			break;
 8002ab8:	e034      	b.n	8002b24 <GPIO_voidSetPinDirection+0x400>
			else if (Copy_Pin <= PIN15 )
 8002aba:	79bb      	ldrb	r3, [r7, #6]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d831      	bhi.n	8002b24 <GPIO_voidSetPinDirection+0x400>
				GPIOD->MODER |= (copy_u8Moder <<  (2*Copy_Pin)) ;
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	7bf9      	ldrb	r1, [r7, #15]
 8002ac6:	79ba      	ldrb	r2, [r7, #6]
 8002ac8:	0052      	lsls	r2, r2, #1
 8002aca:	fa01 f202 	lsl.w	r2, r1, r2
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	6013      	str	r3, [r2, #0]
				GPIOD->OTYPER |= (copy_OTYPER << Copy_Pin) ;
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	7bb9      	ldrb	r1, [r7, #14]
 8002adc:	79ba      	ldrb	r2, [r7, #6]
 8002ade:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4a15      	ldr	r2, [pc, #84]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	6053      	str	r3, [r2, #4]
				GPIOD->OSPEEDR |= (copy_OSPEEDR << (2*Copy_Pin ) ) ;
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	7b79      	ldrb	r1, [r7, #13]
 8002af0:	79ba      	ldrb	r2, [r7, #6]
 8002af2:	0052      	lsls	r2, r2, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4611      	mov	r1, r2
 8002afa:	4a10      	ldr	r2, [pc, #64]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6093      	str	r3, [r2, #8]
				GPIOD->PUPDR  |= (copy_PUPDR<<   (2*Copy_Pin) );
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	7b39      	ldrb	r1, [r7, #12]
 8002b06:	79ba      	ldrb	r2, [r7, #6]
 8002b08:	0052      	lsls	r2, r2, #1
 8002b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <GPIO_voidSetPinDirection+0x418>)
 8002b12:	430b      	orrs	r3, r1
 8002b14:	60d3      	str	r3, [r2, #12]
			break;
 8002b16:	e005      	b.n	8002b24 <GPIO_voidSetPinDirection+0x400>
		default : break ;	
 8002b18:	bf00      	nop
 8002b1a:	e004      	b.n	8002b26 <GPIO_voidSetPinDirection+0x402>
			break;
 8002b1c:	bf00      	nop
 8002b1e:	e002      	b.n	8002b26 <GPIO_voidSetPinDirection+0x402>
			break;
 8002b20:	bf00      	nop
 8002b22:	e000      	b.n	8002b26 <GPIO_voidSetPinDirection+0x402>
			break;
 8002b24:	bf00      	nop
	}

}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	48000400 	.word	0x48000400
 8002b38:	48000800 	.word	0x48000800
 8002b3c:	48000c00 	.word	0x48000c00

08002b40 <GPIO_voidTogglePinValue>:
		break ;
	}

}
void GPIO_voidTogglePinValue	(u8 Copy_u8Port, Pin_t Copy_Pin)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	460a      	mov	r2, r1
 8002b4a:	71fb      	strb	r3, [r7, #7]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71bb      	strb	r3, [r7, #6]
	switch(Copy_u8Port){
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	2b12      	cmp	r3, #18
 8002b54:	d011      	beq.n	8002b7a <GPIO_voidTogglePinValue+0x3a>
 8002b56:	2b13      	cmp	r3, #19
 8002b58:	d01a      	beq.n	8002b90 <GPIO_voidTogglePinValue+0x50>
 8002b5a:	2b11      	cmp	r3, #17
 8002b5c:	d000      	beq.n	8002b60 <GPIO_voidTogglePinValue+0x20>
		case PORTC :
			FLIP_BIT(GPIOC->ODR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 8002b5e:	e022      	b.n	8002ba6 <GPIO_voidTogglePinValue+0x66>
			FLIP_BIT(GPIOA->ODR , Copy_Pin ) ;
 8002b60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	79ba      	ldrb	r2, [r7, #6]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6e:	4611      	mov	r1, r2
 8002b70:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002b74:	404b      	eors	r3, r1
 8002b76:	6153      	str	r3, [r2, #20]
			break ;
 8002b78:	e015      	b.n	8002ba6 <GPIO_voidTogglePinValue+0x66>
			FLIP_BIT(GPIOB->ODR , Copy_Pin ) ;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <GPIO_voidTogglePinValue+0x74>)
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	79ba      	ldrb	r2, [r7, #6]
 8002b80:	2101      	movs	r1, #1
 8002b82:	fa01 f202 	lsl.w	r2, r1, r2
 8002b86:	4611      	mov	r1, r2
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <GPIO_voidTogglePinValue+0x74>)
 8002b8a:	404b      	eors	r3, r1
 8002b8c:	6153      	str	r3, [r2, #20]
			break ;
 8002b8e:	e00a      	b.n	8002ba6 <GPIO_voidTogglePinValue+0x66>
			FLIP_BIT(GPIOC->ODR , Copy_Pin ) ;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <GPIO_voidTogglePinValue+0x78>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	79ba      	ldrb	r2, [r7, #6]
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <GPIO_voidTogglePinValue+0x78>)
 8002ba0:	404b      	eors	r3, r1
 8002ba2:	6153      	str	r3, [r2, #20]
			break ;
 8002ba4:	bf00      	nop

	}


}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	48000400 	.word	0x48000400
 8002bb8:	48000800 	.word	0x48000800

08002bbc <GPIO_u8GetPinValue>:

u8 GPIO_u8GetPinValue (u8 Copy_u8Port, Pin_t Copy_Pin)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	71fb      	strb	r3, [r7, #7]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
	if(Copy_Pin > 15)
	{
		/* error */
	}
	switch(Copy_u8Port)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	2b12      	cmp	r3, #18
 8002bd4:	d00f      	beq.n	8002bf6 <GPIO_u8GetPinValue+0x3a>
 8002bd6:	2b13      	cmp	r3, #19
 8002bd8:	d017      	beq.n	8002c0a <GPIO_u8GetPinValue+0x4e>
 8002bda:	2b11      	cmp	r3, #17
 8002bdc:	d000      	beq.n	8002be0 <GPIO_u8GetPinValue+0x24>
		case PORTC :
			LOC_u8Result  = CHECK_BIT(GPIOC->IDR , Copy_Pin ) ;
			break ;
		default :
			/* error */
			break ;
 8002bde:	e01e      	b.n	8002c1e <GPIO_u8GetPinValue+0x62>
			LOC_u8Result  = CHECK_BIT(GPIOA->IDR , Copy_Pin ) ;
 8002be0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	79bb      	ldrb	r3, [r7, #6]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
			break ;
 8002bf4:	e013      	b.n	8002c1e <GPIO_u8GetPinValue+0x62>
			LOC_u8Result  = CHECK_BIT(GPIOB->IDR , Copy_Pin ) ;
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <GPIO_u8GetPinValue+0x70>)
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
			break ;
 8002c08:	e009      	b.n	8002c1e <GPIO_u8GetPinValue+0x62>
			LOC_u8Result  = CHECK_BIT(GPIOC->IDR , Copy_Pin ) ;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <GPIO_u8GetPinValue+0x74>)
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	79bb      	ldrb	r3, [r7, #6]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
			break ;
 8002c1c:	bf00      	nop
	}
	return LOC_u8Result ;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	48000400 	.word	0x48000400
 8002c30:	48000800 	.word	0x48000800

08002c34 <RCC_voidEnableClock>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void RCC_voidEnableClock(Bus_t Copy_BusId, u8 Copy_u8BperId) 
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	71fb      	strb	r3, [r7, #7]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71bb      	strb	r3, [r7, #6]
    if(Copy_u8BperId <= 31)
 8002c44:	79bb      	ldrb	r3, [r7, #6]
 8002c46:	2b1f      	cmp	r3, #31
 8002c48:	d828      	bhi.n	8002c9c <RCC_voidEnableClock+0x68>
	{
		switch(Copy_BusId)
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d00f      	beq.n	8002c70 <RCC_voidEnableClock+0x3c>
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d018      	beq.n	8002c86 <RCC_voidEnableClock+0x52>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d000      	beq.n	8002c5a <RCC_voidEnableClock+0x26>
	else
	{
		//TODO: Return Error Code
	}
	
}
 8002c58:	e020      	b.n	8002c9c <RCC_voidEnableClock+0x68>
			case RCC_AHB  : SET_BIT(RCC_AHBENR,  Copy_u8BperId); break;
 8002c5a:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <RCC_voidEnableClock+0x74>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	79ba      	ldrb	r2, [r7, #6]
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	4611      	mov	r1, r2
 8002c68:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <RCC_voidEnableClock+0x74>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e015      	b.n	8002c9c <RCC_voidEnableClock+0x68>
			case RCC_APB1 : SET_BIT(RCC_APB1ENR, Copy_u8BperId); break;
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <RCC_voidEnableClock+0x78>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	79ba      	ldrb	r2, [r7, #6]
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <RCC_voidEnableClock+0x78>)
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e00a      	b.n	8002c9c <RCC_voidEnableClock+0x68>
			case RCC_APB2 : SET_BIT(RCC_APB2ENR, Copy_u8BperId); break;
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <RCC_voidEnableClock+0x7c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	79ba      	ldrb	r2, [r7, #6]
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	4611      	mov	r1, r2
 8002c94:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <RCC_voidEnableClock+0x7c>)
 8002c96:	430b      	orrs	r3, r1
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	bf00      	nop
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	40021014 	.word	0x40021014
 8002cac:	4002101c 	.word	0x4002101c
 8002cb0:	40021018 	.word	0x40021018

08002cb4 <RCC_voidInitSysClocks>:
	}
	
}

void RCC_voidInitSysClocks(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
/*      MAIN BUS SYSTEM INIT             */
    RCC_CR   = 0X00000080;                    
 8002cb8:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <RCC_voidInitSysClocks+0x48>)
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	601a      	str	r2, [r3, #0]
	RCC_CFGR = 0X00000000;                    
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <RCC_voidInitSysClocks+0x4c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
		SET_BIT(RCC_CR, RCC_CR_HSEON);
		while(!(CHECK_BIT(RCC_CR, RCC_CR_HSERDY)));   // Wait Until CLK Ready
		RCC_CFGR |= RCC_CFGR_SW_HSE;
	    SET_BIT(RCC_CR, RCC_CR_CSSON);
	#elif  RCC_CLOCK_TYPE == RCC_HSI
	    SET_BIT(RCC_CR, RCC_CR_HSION);
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <RCC_voidInitSysClocks+0x48>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <RCC_voidInitSysClocks+0x48>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6013      	str	r3, [r2, #0]
	//	while(!(CHECK_BIT(RCC_CR, RCC_CR_HSIRDY)));   // Wait Until CLK Ready
        RCC_CFGR |= RCC_CFGR_SW_HSI;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <RCC_voidInitSysClocks+0x4c>)
 8002cd2:	4a0b      	ldr	r2, [pc, #44]	; (8002d00 <RCC_voidInitSysClocks+0x4c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PLLSRC_HSI_Div2;
    #endif

/********************** AHB BUS PRESCALER ****************/ 
	#if   RCC_AHB_PRESCALER == RCC_AHB_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <RCC_voidInitSysClocks+0x4c>)
 8002cda:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <RCC_voidInitSysClocks+0x4c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_HPRE_DIV1;
		#warning(Wrong HPRE....DIV1 is default)
	#endif
/********************* AB1 BUS PRESCALER   ************************/ 
	#if   RCC_APB1_PRESCALER == RCC_APB1_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <RCC_voidInitSysClocks+0x4c>)
 8002ce2:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <RCC_voidInitSysClocks+0x4c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= RCC_CFGR_PPRE1_DIV1;
		#warning(Wrong PPRE1....DIV1 is default)
	#endif
/********************* ABP2 BUS PRESCALER   ************************/ 
	#if   RCC_APB2_PRESCALER == RCC_APB2_PRESCALER_DEV_1
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <RCC_voidInitSysClocks+0x4c>)
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <RCC_voidInitSysClocks+0x4c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_CFGR_PPRE2_DIV16;
	#else
	    RCC_CFGR |= RCC_CFGR_PPRE2_DIV1;
		#warning(Wrong PRE2....DIV1 is default)
	#endif
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40021004 	.word	0x40021004

08002d04 <T1_voidGreenLed>:
/*******************************	Flags	*************************************/
u8 Glob_u8BtnFlag ;

/*******************************	Tasks **************************************/
void T1_voidGreenLed(void * pvParam)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Check Global Flag
		if(Glob_u8BtnFlag == 1)
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <T1_voidGreenLed+0x54>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d11c      	bne.n	8002d4e <T1_voidGreenLed+0x4a>
		{
			// Suspend BTN Task
			vTaskSuspend(T2_ButtonHandle) ;
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <T1_voidGreenLed+0x58>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd ff49 	bl	8000bb0 <vTaskSuspend>
			// Reset Global Flag
			Glob_u8BtnFlag = 0 ;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <T1_voidGreenLed+0x54>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
			//	Toggle LED
			GPIO_voidTogglePinValue(GREEN_BUILT_IN_LED);
 8002d24:	2105      	movs	r1, #5
 8002d26:	2011      	movs	r0, #17
 8002d28:	f7ff ff0a 	bl	8002b40 <GPIO_voidTogglePinValue>
			// Delay (3000 Sec )
			vTaskDelay(3000);
 8002d2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d30:	f7fd ff0a 	bl	8000b48 <vTaskDelay>
			//	Toggle LED
			GPIO_voidTogglePinValue(GREEN_BUILT_IN_LED);
 8002d34:	2105      	movs	r1, #5
 8002d36:	2011      	movs	r0, #17
 8002d38:	f7ff ff02 	bl	8002b40 <GPIO_voidTogglePinValue>
			// Delay (3000 Sec )
			vTaskDelay(3000);
 8002d3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d40:	f7fd ff02 	bl	8000b48 <vTaskDelay>
			// Resume Task
			vTaskResume(T2_ButtonHandle);
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <T1_voidGreenLed+0x58>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd ffff 	bl	8000d4c <vTaskResume>
		}
		vTaskDelay(100);
 8002d4e:	2064      	movs	r0, #100	; 0x64
 8002d50:	f7fd fefa 	bl	8000b48 <vTaskDelay>
		if(Glob_u8BtnFlag == 1)
 8002d54:	e7da      	b.n	8002d0c <T1_voidGreenLed+0x8>
 8002d56:	bf00      	nop
 8002d58:	20001dcc 	.word	0x20001dcc
 8002d5c:	20001dc8 	.word	0x20001dc8

08002d60 <T2_voidButtonState>:
	}
}
void T2_voidButtonState(void * pvParam)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	u8 btnState ;
	while(1)
	{
		btnState  = GPIO_u8GetPinValue(INTERNAL_BTN);
 8002d68:	210d      	movs	r1, #13
 8002d6a:	2013      	movs	r0, #19
 8002d6c:	f7ff ff26 	bl	8002bbc <GPIO_u8GetPinValue>
 8002d70:	4603      	mov	r3, r0
 8002d72:	73fb      	strb	r3, [r7, #15]
		if(btnState == 0)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <T2_voidButtonState+0x20>
		{
			Glob_u8BtnFlag = 1 ;
 8002d7a:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <T2_voidButtonState+0x28>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(25);
 8002d80:	2019      	movs	r0, #25
 8002d82:	f7fd fee1 	bl	8000b48 <vTaskDelay>
		btnState  = GPIO_u8GetPinValue(INTERNAL_BTN);
 8002d86:	e7ef      	b.n	8002d68 <T2_voidButtonState+0x8>
 8002d88:	20001dcc 	.word	0x20001dcc

08002d8c <main>:
	}
}
int main(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af02      	add	r7, sp, #8

	/********************************** Task Configuration *****************************************/
	(void)xTaskCreate(T1_voidGreenLed, "T1_GreenLED", 85 , NULL, 1, &T1_GreenLedHandle) ;
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <main+0x68>)
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	2301      	movs	r3, #1
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2255      	movs	r2, #85	; 0x55
 8002d9e:	4916      	ldr	r1, [pc, #88]	; (8002df8 <main+0x6c>)
 8002da0:	4816      	ldr	r0, [pc, #88]	; (8002dfc <main+0x70>)
 8002da2:	f7fd fd75 	bl	8000890 <xTaskCreate>
	(void)xTaskCreate(T2_voidButtonState, "T2_Btn"  , 85 , NULL, 2, &T2_ButtonHandle) ;		//	Task 2 Higher priority
 8002da6:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <main+0x74>)
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2302      	movs	r3, #2
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	2255      	movs	r2, #85	; 0x55
 8002db2:	4914      	ldr	r1, [pc, #80]	; (8002e04 <main+0x78>)
 8002db4:	4814      	ldr	r0, [pc, #80]	; (8002e08 <main+0x7c>)
 8002db6:	f7fd fd6b 	bl	8000890 <xTaskCreate>
	/********************************** System Inits ***********************************************/
	RCC_voidInitSysClocks() ;		 		// Init Clock
 8002dba:	f7ff ff7b 	bl	8002cb4 <RCC_voidInitSysClocks>
	RCC_voidEnableClock(RCC_AHB, PORTA);	/*	PORTA	*/
 8002dbe:	2111      	movs	r1, #17
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7ff ff37 	bl	8002c34 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_AHB, PORTC);	/*	PORTC	*/
 8002dc6:	2113      	movs	r1, #19
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7ff ff33 	bl	8002c34 <RCC_voidEnableClock>
	GPIO_voidSetPinDirection(GREEN_BUILT_IN_LED, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 8002dce:	2220      	movs	r2, #32
 8002dd0:	2105      	movs	r1, #5
 8002dd2:	2011      	movs	r0, #17
 8002dd4:	f7ff fca6 	bl	8002724 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(YELLOW_EXTERNAL_LED, GPIO_OUTPUT_LOW_SPD_PUSH_PULL);
 8002dd8:	2220      	movs	r2, #32
 8002dda:	2106      	movs	r1, #6
 8002ddc:	2011      	movs	r0, #17
 8002dde:	f7ff fca1 	bl	8002724 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(INTERNAL_BTN, GPIO_DIGITAL_INPUT_FLOAT);
 8002de2:	2200      	movs	r2, #0
 8002de4:	210d      	movs	r1, #13
 8002de6:	2013      	movs	r0, #19
 8002de8:	f7ff fc9c 	bl	8002724 <GPIO_voidSetPinDirection>

	/********************************** Start Scheduler ******************************************/
	vTaskStartScheduler();
 8002dec:	f7fe f832 	bl	8000e54 <vTaskStartScheduler>
	while(1)
	{
		__asm("NOP");
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <main+0x64>
 8002df4:	20001dc4 	.word	0x20001dc4
 8002df8:	08002ef8 	.word	0x08002ef8
 8002dfc:	08002d05 	.word	0x08002d05
 8002e00:	20001dc8 	.word	0x20001dc8
 8002e04:	08002f04 	.word	0x08002f04
 8002e08:	08002d61 	.word	0x08002d61

08002e0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e0c:	480d      	ldr	r0, [pc, #52]	; (8002e44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e0e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e14:	480c      	ldr	r0, [pc, #48]	; (8002e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e16:	490d      	ldr	r1, [pc, #52]	; (8002e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <LoopForever+0xe>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e1c:	e002      	b.n	8002e24 <LoopCopyDataInit>

08002e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e22:	3304      	adds	r3, #4

08002e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e28:	d3f9      	bcc.n	8002e1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	; (8002e58 <LoopForever+0x16>)
  movs r3, #0
 8002e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e30:	e001      	b.n	8002e36 <LoopFillZerobss>

08002e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e34:	3204      	adds	r2, #4

08002e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e38:	d3fb      	bcc.n	8002e32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e3a:	f000 f811 	bl	8002e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e3e:	f7ff ffa5 	bl	8002d8c <main>

08002e42 <LoopForever>:

LoopForever:
    b LoopForever
 8002e42:	e7fe      	b.n	8002e42 <LoopForever>
  ldr   r0, =_estack
 8002e44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e4c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002e50:	08002f14 	.word	0x08002f14
  ldr r2, =_sbss
 8002e54:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002e58:	20001dd0 	.word	0x20001dd0

08002e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e5c:	e7fe      	b.n	8002e5c <ADC1_2_IRQHandler>
	...

08002e60 <__libc_init_array>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	4e0d      	ldr	r6, [pc, #52]	; (8002e98 <__libc_init_array+0x38>)
 8002e64:	4c0d      	ldr	r4, [pc, #52]	; (8002e9c <__libc_init_array+0x3c>)
 8002e66:	1ba4      	subs	r4, r4, r6
 8002e68:	10a4      	asrs	r4, r4, #2
 8002e6a:	2500      	movs	r5, #0
 8002e6c:	42a5      	cmp	r5, r4
 8002e6e:	d109      	bne.n	8002e84 <__libc_init_array+0x24>
 8002e70:	4e0b      	ldr	r6, [pc, #44]	; (8002ea0 <__libc_init_array+0x40>)
 8002e72:	4c0c      	ldr	r4, [pc, #48]	; (8002ea4 <__libc_init_array+0x44>)
 8002e74:	f000 f82c 	bl	8002ed0 <_init>
 8002e78:	1ba4      	subs	r4, r4, r6
 8002e7a:	10a4      	asrs	r4, r4, #2
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	42a5      	cmp	r5, r4
 8002e80:	d105      	bne.n	8002e8e <__libc_init_array+0x2e>
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
 8002e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e88:	4798      	blx	r3
 8002e8a:	3501      	adds	r5, #1
 8002e8c:	e7ee      	b.n	8002e6c <__libc_init_array+0xc>
 8002e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e92:	4798      	blx	r3
 8002e94:	3501      	adds	r5, #1
 8002e96:	e7f2      	b.n	8002e7e <__libc_init_array+0x1e>
 8002e98:	08002f0c 	.word	0x08002f0c
 8002e9c:	08002f0c 	.word	0x08002f0c
 8002ea0:	08002f0c 	.word	0x08002f0c
 8002ea4:	08002f10 	.word	0x08002f10

08002ea8 <memcpy>:
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	1e43      	subs	r3, r0, #1
 8002eac:	440a      	add	r2, r1
 8002eae:	4291      	cmp	r1, r2
 8002eb0:	d100      	bne.n	8002eb4 <memcpy+0xc>
 8002eb2:	bd10      	pop	{r4, pc}
 8002eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002eb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ebc:	e7f7      	b.n	8002eae <memcpy+0x6>

08002ebe <memset>:
 8002ebe:	4402      	add	r2, r0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d100      	bne.n	8002ec8 <memset+0xa>
 8002ec6:	4770      	bx	lr
 8002ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8002ecc:	e7f9      	b.n	8002ec2 <memset+0x4>
	...

08002ed0 <_init>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr

08002edc <_fini>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr
