
NTI_Projects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00001f2e  00001fc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  008000b8  008000b8  0000201a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000201a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b24  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b92  00000000  00000000  00003dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015cb  00000000  00000000  0000493e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  00005f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b9f  00000000  00000000  00006620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ee6  00000000  00000000  000071bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  000080a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_12>
      34:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2f 07 	call	0xe5e	; 0xe5e <main>
      8a:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enablePulse>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/

static void enablePulse(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	ae 97       	sbiw	r28, 0x2e	; 46
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_HIGH);
      a6:	41 e0       	ldi	r20, 0x01	; 1
      a8:	62 e0       	ldi	r22, 0x02	; 2
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
      b0:	80 e0       	ldi	r24, 0x00	; 0
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	a0 e8       	ldi	r26, 0x80	; 128
      b6:	bf e3       	ldi	r27, 0x3F	; 63
      b8:	89 83       	std	Y+1, r24	; 0x01
      ba:	9a 83       	std	Y+2, r25	; 0x02
      bc:	ab 83       	std	Y+3, r26	; 0x03
      be:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
      c0:	2b ea       	ldi	r18, 0xAB	; 171
      c2:	3a ea       	ldi	r19, 0xAA	; 170
      c4:	4a ea       	ldi	r20, 0xAA	; 170
      c6:	50 e4       	ldi	r21, 0x40	; 64
      c8:	69 81       	ldd	r22, Y+1	; 0x01
      ca:	7a 81       	ldd	r23, Y+2	; 0x02
      cc:	8b 81       	ldd	r24, Y+3	; 0x03
      ce:	9c 81       	ldd	r25, Y+4	; 0x04
      d0:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
      d4:	dc 01       	movw	r26, r24
      d6:	cb 01       	movw	r24, r22
      d8:	8b 8b       	std	Y+19, r24	; 0x13
      da:	9c 8b       	std	Y+20, r25	; 0x14
      dc:	ad 8b       	std	Y+21, r26	; 0x15
      de:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	40 e8       	ldi	r20, 0x80	; 128
      e6:	50 e4       	ldi	r21, 0x40	; 64
      e8:	69 81       	ldd	r22, Y+1	; 0x01
      ea:	7a 81       	ldd	r23, Y+2	; 0x02
      ec:	8b 81       	ldd	r24, Y+3	; 0x03
      ee:	9c 81       	ldd	r25, Y+4	; 0x04
      f0:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
      f4:	dc 01       	movw	r26, r24
      f6:	cb 01       	movw	r24, r22
      f8:	8f 8b       	std	Y+23, r24	; 0x17
      fa:	98 8f       	std	Y+24, r25	; 0x18
      fc:	a9 8f       	std	Y+25, r26	; 0x19
      fe:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	40 e8       	ldi	r20, 0x80	; 128
     106:	5f e3       	ldi	r21, 0x3F	; 63
     108:	6b 89       	ldd	r22, Y+19	; 0x13
     10a:	7c 89       	ldd	r23, Y+20	; 0x14
     10c:	8d 89       	ldd	r24, Y+21	; 0x15
     10e:	9e 89       	ldd	r25, Y+22	; 0x16
     110:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     114:	88 23       	and	r24, r24
     116:	1c f4       	brge	.+6      	; 0x11e <enablePulse+0x8c>
		__ticks = 1;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	8b 8f       	std	Y+27, r24	; 0x1b
     11c:	b2 c0       	rjmp	.+356    	; 0x282 <enablePulse+0x1f0>
	else if (__tmp2 > 65535)
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	3f ef       	ldi	r19, 0xFF	; 255
     122:	4f e7       	ldi	r20, 0x7F	; 127
     124:	57 e4       	ldi	r21, 0x47	; 71
     126:	6f 89       	ldd	r22, Y+23	; 0x17
     128:	78 8d       	ldd	r23, Y+24	; 0x18
     12a:	89 8d       	ldd	r24, Y+25	; 0x19
     12c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     12e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     132:	18 16       	cp	r1, r24
     134:	0c f0       	brlt	.+2      	; 0x138 <enablePulse+0xa6>
     136:	7b c0       	rjmp	.+246    	; 0x22e <enablePulse+0x19c>
	{
		_delay_ms(__us / 1000.0);
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	4a e7       	ldi	r20, 0x7A	; 122
     13e:	54 e4       	ldi	r21, 0x44	; 68
     140:	69 81       	ldd	r22, Y+1	; 0x01
     142:	7a 81       	ldd	r23, Y+2	; 0x02
     144:	8b 81       	ldd	r24, Y+3	; 0x03
     146:	9c 81       	ldd	r25, Y+4	; 0x04
     148:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__divsf3>
     14c:	dc 01       	movw	r26, r24
     14e:	cb 01       	movw	r24, r22
     150:	8c 8f       	std	Y+28, r24	; 0x1c
     152:	9d 8f       	std	Y+29, r25	; 0x1d
     154:	ae 8f       	std	Y+30, r26	; 0x1e
     156:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	4a e7       	ldi	r20, 0x7A	; 122
     15e:	55 e4       	ldi	r21, 0x45	; 69
     160:	6c 8d       	ldd	r22, Y+28	; 0x1c
     162:	7d 8d       	ldd	r23, Y+29	; 0x1d
     164:	8e 8d       	ldd	r24, Y+30	; 0x1e
     166:	9f 8d       	ldd	r25, Y+31	; 0x1f
     168:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	88 a3       	std	Y+32, r24	; 0x20
     172:	99 a3       	std	Y+33, r25	; 0x21
     174:	aa a3       	std	Y+34, r26	; 0x22
     176:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	40 e8       	ldi	r20, 0x80	; 128
     17e:	5f e3       	ldi	r21, 0x3F	; 63
     180:	68 a1       	ldd	r22, Y+32	; 0x20
     182:	79 a1       	ldd	r23, Y+33	; 0x21
     184:	8a a1       	ldd	r24, Y+34	; 0x22
     186:	9b a1       	ldd	r25, Y+35	; 0x23
     188:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     18c:	88 23       	and	r24, r24
     18e:	2c f4       	brge	.+10     	; 0x19a <enablePulse+0x108>
		__ticks = 1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	9d a3       	std	Y+37, r25	; 0x25
     196:	8c a3       	std	Y+36, r24	; 0x24
     198:	3f c0       	rjmp	.+126    	; 0x218 <enablePulse+0x186>
	else if (__tmp > 65535)
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	3f ef       	ldi	r19, 0xFF	; 255
     19e:	4f e7       	ldi	r20, 0x7F	; 127
     1a0:	57 e4       	ldi	r21, 0x47	; 71
     1a2:	68 a1       	ldd	r22, Y+32	; 0x20
     1a4:	79 a1       	ldd	r23, Y+33	; 0x21
     1a6:	8a a1       	ldd	r24, Y+34	; 0x22
     1a8:	9b a1       	ldd	r25, Y+35	; 0x23
     1aa:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     1ae:	18 16       	cp	r1, r24
     1b0:	4c f5       	brge	.+82     	; 0x204 <enablePulse+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	40 e2       	ldi	r20, 0x20	; 32
     1b8:	51 e4       	ldi	r21, 0x41	; 65
     1ba:	6c 8d       	ldd	r22, Y+28	; 0x1c
     1bc:	7d 8d       	ldd	r23, Y+29	; 0x1d
     1be:	8e 8d       	ldd	r24, Y+30	; 0x1e
     1c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     1c2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     1c6:	dc 01       	movw	r26, r24
     1c8:	cb 01       	movw	r24, r22
     1ca:	bc 01       	movw	r22, r24
     1cc:	cd 01       	movw	r24, r26
     1ce:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     1d2:	dc 01       	movw	r26, r24
     1d4:	cb 01       	movw	r24, r22
     1d6:	9d a3       	std	Y+37, r25	; 0x25
     1d8:	8c a3       	std	Y+36, r24	; 0x24
     1da:	0f c0       	rjmp	.+30     	; 0x1fa <enablePulse+0x168>
     1dc:	80 e9       	ldi	r24, 0x90	; 144
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	9f a3       	std	Y+39, r25	; 0x27
     1e2:	8e a3       	std	Y+38, r24	; 0x26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1e4:	8e a1       	ldd	r24, Y+38	; 0x26
     1e6:	9f a1       	ldd	r25, Y+39	; 0x27
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <enablePulse+0x156>
     1ec:	9f a3       	std	Y+39, r25	; 0x27
     1ee:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f0:	8c a1       	ldd	r24, Y+36	; 0x24
     1f2:	9d a1       	ldd	r25, Y+37	; 0x25
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	9d a3       	std	Y+37, r25	; 0x25
     1f8:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1fa:	8c a1       	ldd	r24, Y+36	; 0x24
     1fc:	9d a1       	ldd	r25, Y+37	; 0x25
     1fe:	89 2b       	or	r24, r25
     200:	69 f7       	brne	.-38     	; 0x1dc <enablePulse+0x14a>
     202:	3f c0       	rjmp	.+126    	; 0x282 <enablePulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     204:	68 a1       	ldd	r22, Y+32	; 0x20
     206:	79 a1       	ldd	r23, Y+33	; 0x21
     208:	8a a1       	ldd	r24, Y+34	; 0x22
     20a:	9b a1       	ldd	r25, Y+35	; 0x23
     20c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	9d a3       	std	Y+37, r25	; 0x25
     216:	8c a3       	std	Y+36, r24	; 0x24
     218:	8c a1       	ldd	r24, Y+36	; 0x24
     21a:	9d a1       	ldd	r25, Y+37	; 0x25
     21c:	99 a7       	std	Y+41, r25	; 0x29
     21e:	88 a7       	std	Y+40, r24	; 0x28
     220:	88 a5       	ldd	r24, Y+40	; 0x28
     222:	99 a5       	ldd	r25, Y+41	; 0x29
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <enablePulse+0x192>
     228:	99 a7       	std	Y+41, r25	; 0x29
     22a:	88 a7       	std	Y+40, r24	; 0x28
     22c:	2a c0       	rjmp	.+84     	; 0x282 <enablePulse+0x1f0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	4f e7       	ldi	r20, 0x7F	; 127
     234:	53 e4       	ldi	r21, 0x43	; 67
     236:	6b 89       	ldd	r22, Y+19	; 0x13
     238:	7c 89       	ldd	r23, Y+20	; 0x14
     23a:	8d 89       	ldd	r24, Y+21	; 0x15
     23c:	9e 89       	ldd	r25, Y+22	; 0x16
     23e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     242:	18 16       	cp	r1, r24
     244:	ac f4       	brge	.+42     	; 0x270 <enablePulse+0x1de>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     246:	6f 89       	ldd	r22, Y+23	; 0x17
     248:	78 8d       	ldd	r23, Y+24	; 0x18
     24a:	89 8d       	ldd	r24, Y+25	; 0x19
     24c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     24e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     252:	dc 01       	movw	r26, r24
     254:	cb 01       	movw	r24, r22
     256:	9b a7       	std	Y+43, r25	; 0x2b
     258:	8a a7       	std	Y+42, r24	; 0x2a
     25a:	8a a5       	ldd	r24, Y+42	; 0x2a
     25c:	9b a5       	ldd	r25, Y+43	; 0x2b
     25e:	9d a7       	std	Y+45, r25	; 0x2d
     260:	8c a7       	std	Y+44, r24	; 0x2c
     262:	8c a5       	ldd	r24, Y+44	; 0x2c
     264:	9d a5       	ldd	r25, Y+45	; 0x2d
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <enablePulse+0x1d4>
     26a:	9d a7       	std	Y+45, r25	; 0x2d
     26c:	8c a7       	std	Y+44, r24	; 0x2c
     26e:	0f c0       	rjmp	.+30     	; 0x28e <enablePulse+0x1fc>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     270:	6b 89       	ldd	r22, Y+19	; 0x13
     272:	7c 89       	ldd	r23, Y+20	; 0x14
     274:	8d 89       	ldd	r24, Y+21	; 0x15
     276:	9e 89       	ldd	r25, Y+22	; 0x16
     278:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     27c:	dc 01       	movw	r26, r24
     27e:	cb 01       	movw	r24, r22
     280:	8b 8f       	std	Y+27, r24	; 0x1b
     282:	8b 8d       	ldd	r24, Y+27	; 0x1b
     284:	8e a7       	std	Y+46, r24	; 0x2e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     286:	8e a5       	ldd	r24, Y+46	; 0x2e
     288:	8a 95       	dec	r24
     28a:	f1 f7       	brne	.-4      	; 0x288 <enablePulse+0x1f6>
     28c:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_us(1);
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_LOW);
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	62 e0       	ldi	r22, 0x02	; 2
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	a0 e0       	ldi	r26, 0x00	; 0
     29e:	b0 e4       	ldi	r27, 0x40	; 64
     2a0:	8d 83       	std	Y+5, r24	; 0x05
     2a2:	9e 83       	std	Y+6, r25	; 0x06
     2a4:	af 83       	std	Y+7, r26	; 0x07
     2a6:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	4a e7       	ldi	r20, 0x7A	; 122
     2ae:	55 e4       	ldi	r21, 0x45	; 69
     2b0:	6d 81       	ldd	r22, Y+5	; 0x05
     2b2:	7e 81       	ldd	r23, Y+6	; 0x06
     2b4:	8f 81       	ldd	r24, Y+7	; 0x07
     2b6:	98 85       	ldd	r25, Y+8	; 0x08
     2b8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     2bc:	dc 01       	movw	r26, r24
     2be:	cb 01       	movw	r24, r22
     2c0:	89 87       	std	Y+9, r24	; 0x09
     2c2:	9a 87       	std	Y+10, r25	; 0x0a
     2c4:	ab 87       	std	Y+11, r26	; 0x0b
     2c6:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e8       	ldi	r20, 0x80	; 128
     2ce:	5f e3       	ldi	r21, 0x3F	; 63
     2d0:	69 85       	ldd	r22, Y+9	; 0x09
     2d2:	7a 85       	ldd	r23, Y+10	; 0x0a
     2d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     2d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     2d8:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     2dc:	88 23       	and	r24, r24
     2de:	2c f4       	brge	.+10     	; 0x2ea <enablePulse+0x258>
		__ticks = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	9e 87       	std	Y+14, r25	; 0x0e
     2e6:	8d 87       	std	Y+13, r24	; 0x0d
     2e8:	3f c0       	rjmp	.+126    	; 0x368 <enablePulse+0x2d6>
	else if (__tmp > 65535)
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	3f ef       	ldi	r19, 0xFF	; 255
     2ee:	4f e7       	ldi	r20, 0x7F	; 127
     2f0:	57 e4       	ldi	r21, 0x47	; 71
     2f2:	69 85       	ldd	r22, Y+9	; 0x09
     2f4:	7a 85       	ldd	r23, Y+10	; 0x0a
     2f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     2fa:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     2fe:	18 16       	cp	r1, r24
     300:	4c f5       	brge	.+82     	; 0x354 <enablePulse+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e2       	ldi	r20, 0x20	; 32
     308:	51 e4       	ldi	r21, 0x41	; 65
     30a:	6d 81       	ldd	r22, Y+5	; 0x05
     30c:	7e 81       	ldd	r23, Y+6	; 0x06
     30e:	8f 81       	ldd	r24, Y+7	; 0x07
     310:	98 85       	ldd	r25, Y+8	; 0x08
     312:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	bc 01       	movw	r22, r24
     31c:	cd 01       	movw	r24, r26
     31e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	9e 87       	std	Y+14, r25	; 0x0e
     328:	8d 87       	std	Y+13, r24	; 0x0d
     32a:	0f c0       	rjmp	.+30     	; 0x34a <enablePulse+0x2b8>
     32c:	80 e9       	ldi	r24, 0x90	; 144
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	98 8b       	std	Y+16, r25	; 0x10
     332:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     334:	8f 85       	ldd	r24, Y+15	; 0x0f
     336:	98 89       	ldd	r25, Y+16	; 0x10
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <enablePulse+0x2a6>
     33c:	98 8b       	std	Y+16, r25	; 0x10
     33e:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     340:	8d 85       	ldd	r24, Y+13	; 0x0d
     342:	9e 85       	ldd	r25, Y+14	; 0x0e
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	9e 87       	std	Y+14, r25	; 0x0e
     348:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     34a:	8d 85       	ldd	r24, Y+13	; 0x0d
     34c:	9e 85       	ldd	r25, Y+14	; 0x0e
     34e:	89 2b       	or	r24, r25
     350:	69 f7       	brne	.-38     	; 0x32c <enablePulse+0x29a>
	_delay_ms(2);
}
     352:	14 c0       	rjmp	.+40     	; 0x37c <enablePulse+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     354:	69 85       	ldd	r22, Y+9	; 0x09
     356:	7a 85       	ldd	r23, Y+10	; 0x0a
     358:	8b 85       	ldd	r24, Y+11	; 0x0b
     35a:	9c 85       	ldd	r25, Y+12	; 0x0c
     35c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     360:	dc 01       	movw	r26, r24
     362:	cb 01       	movw	r24, r22
     364:	9e 87       	std	Y+14, r25	; 0x0e
     366:	8d 87       	std	Y+13, r24	; 0x0d
     368:	8d 85       	ldd	r24, Y+13	; 0x0d
     36a:	9e 85       	ldd	r25, Y+14	; 0x0e
     36c:	9a 8b       	std	Y+18, r25	; 0x12
     36e:	89 8b       	std	Y+17, r24	; 0x11
     370:	89 89       	ldd	r24, Y+17	; 0x11
     372:	9a 89       	ldd	r25, Y+18	; 0x12
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	f1 f7       	brne	.-4      	; 0x374 <enablePulse+0x2e2>
     378:	9a 8b       	std	Y+18, r25	; 0x12
     37a:	89 8b       	std	Y+17, r24	; 0x11
     37c:	00 00       	nop
     37e:	ae 96       	adiw	r28, 0x2e	; 46
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	f8 94       	cli
     384:	de bf       	out	0x3e, r29	; 62
     386:	0f be       	out	0x3f, r0	; 63
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <lcd_vidInit>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidInit(void)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	ec 97       	sbiw	r28, 0x3c	; 60
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
	dio_vidConfigChannel(LCD_RS_PORT, LCD_RS_CHANNEL, OUTPUT);
     3a4:	41 e0       	ldi	r20, 0x01	; 1
     3a6:	63 e0       	ldi	r22, 0x03	; 3
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_EN_PORT, LCD_EN_CHANNEL, OUTPUT);
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	62 e0       	ldi	r22, 0x02	; 2
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>

	dio_vidConfigChannel(LCD_D4_PORT, LCD_D4_CHANNEL, OUTPUT);
     3b8:	41 e0       	ldi	r20, 0x01	; 1
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D5_PORT, LCD_D5_CHANNEL, OUTPUT);
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D6_PORT, LCD_D6_CHANNEL, OUTPUT);
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D7_PORT, LCD_D7_CHANNEL, OUTPUT);
     3d6:	41 e0       	ldi	r20, 0x01	; 1
     3d8:	63 e0       	ldi	r22, 0x03	; 3
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	a0 ea       	ldi	r26, 0xA0	; 160
     3e6:	b1 e4       	ldi	r27, 0x41	; 65
     3e8:	89 83       	std	Y+1, r24	; 0x01
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	ab 83       	std	Y+3, r26	; 0x03
     3ee:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	4a e7       	ldi	r20, 0x7A	; 122
     3f6:	55 e4       	ldi	r21, 0x45	; 69
     3f8:	69 81       	ldd	r22, Y+1	; 0x01
     3fa:	7a 81       	ldd	r23, Y+2	; 0x02
     3fc:	8b 81       	ldd	r24, Y+3	; 0x03
     3fe:	9c 81       	ldd	r25, Y+4	; 0x04
     400:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     404:	dc 01       	movw	r26, r24
     406:	cb 01       	movw	r24, r22
     408:	8b ab       	std	Y+51, r24	; 0x33
     40a:	9c ab       	std	Y+52, r25	; 0x34
     40c:	ad ab       	std	Y+53, r26	; 0x35
     40e:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 e8       	ldi	r20, 0x80	; 128
     416:	5f e3       	ldi	r21, 0x3F	; 63
     418:	6b a9       	ldd	r22, Y+51	; 0x33
     41a:	7c a9       	ldd	r23, Y+52	; 0x34
     41c:	8d a9       	ldd	r24, Y+53	; 0x35
     41e:	9e a9       	ldd	r25, Y+54	; 0x36
     420:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     424:	88 23       	and	r24, r24
     426:	2c f4       	brge	.+10     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		__ticks = 1;
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	98 af       	std	Y+56, r25	; 0x38
     42e:	8f ab       	std	Y+55, r24	; 0x37
     430:	3f c0       	rjmp	.+126    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
	else if (__tmp > 65535)
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	3f ef       	ldi	r19, 0xFF	; 255
     436:	4f e7       	ldi	r20, 0x7F	; 127
     438:	57 e4       	ldi	r21, 0x47	; 71
     43a:	6b a9       	ldd	r22, Y+51	; 0x33
     43c:	7c a9       	ldd	r23, Y+52	; 0x34
     43e:	8d a9       	ldd	r24, Y+53	; 0x35
     440:	9e a9       	ldd	r25, Y+54	; 0x36
     442:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     446:	18 16       	cp	r1, r24
     448:	4c f5       	brge	.+82     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e2       	ldi	r20, 0x20	; 32
     450:	51 e4       	ldi	r21, 0x41	; 65
     452:	69 81       	ldd	r22, Y+1	; 0x01
     454:	7a 81       	ldd	r23, Y+2	; 0x02
     456:	8b 81       	ldd	r24, Y+3	; 0x03
     458:	9c 81       	ldd	r25, Y+4	; 0x04
     45a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     45e:	dc 01       	movw	r26, r24
     460:	cb 01       	movw	r24, r22
     462:	bc 01       	movw	r22, r24
     464:	cd 01       	movw	r24, r26
     466:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     46a:	dc 01       	movw	r26, r24
     46c:	cb 01       	movw	r24, r22
     46e:	98 af       	std	Y+56, r25	; 0x38
     470:	8f ab       	std	Y+55, r24	; 0x37
     472:	0f c0       	rjmp	.+30     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     474:	80 e9       	ldi	r24, 0x90	; 144
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	9a af       	std	Y+58, r25	; 0x3a
     47a:	89 af       	std	Y+57, r24	; 0x39
     47c:	89 ad       	ldd	r24, Y+57	; 0x39
     47e:	9a ad       	ldd	r25, Y+58	; 0x3a
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     484:	9a af       	std	Y+58, r25	; 0x3a
     486:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     488:	8f a9       	ldd	r24, Y+55	; 0x37
     48a:	98 ad       	ldd	r25, Y+56	; 0x38
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	98 af       	std	Y+56, r25	; 0x38
     490:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     492:	8f a9       	ldd	r24, Y+55	; 0x37
     494:	98 ad       	ldd	r25, Y+56	; 0x38
     496:	89 2b       	or	r24, r25
     498:	69 f7       	brne	.-38     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     49a:	14 c0       	rjmp	.+40     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     49c:	6b a9       	ldd	r22, Y+51	; 0x33
     49e:	7c a9       	ldd	r23, Y+52	; 0x34
     4a0:	8d a9       	ldd	r24, Y+53	; 0x35
     4a2:	9e a9       	ldd	r25, Y+54	; 0x36
     4a4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     4a8:	dc 01       	movw	r26, r24
     4aa:	cb 01       	movw	r24, r22
     4ac:	98 af       	std	Y+56, r25	; 0x38
     4ae:	8f ab       	std	Y+55, r24	; 0x37
     4b0:	8f a9       	ldd	r24, Y+55	; 0x37
     4b2:	98 ad       	ldd	r25, Y+56	; 0x38
     4b4:	9c af       	std	Y+60, r25	; 0x3c
     4b6:	8b af       	std	Y+59, r24	; 0x3b
     4b8:	8b ad       	ldd	r24, Y+59	; 0x3b
     4ba:	9c ad       	ldd	r25, Y+60	; 0x3c
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4c0:	9c af       	std	Y+60, r25	; 0x3c
     4c2:	8b af       	std	Y+59, r24	; 0x3b

	_delay_ms(20);

	lcd_vidSendCmd(0x03);
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	a0 ea       	ldi	r26, 0xA0	; 160
     4d0:	b0 e4       	ldi	r27, 0x40	; 64
     4d2:	8d 83       	std	Y+5, r24	; 0x05
     4d4:	9e 83       	std	Y+6, r25	; 0x06
     4d6:	af 83       	std	Y+7, r26	; 0x07
     4d8:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	4a e7       	ldi	r20, 0x7A	; 122
     4e0:	55 e4       	ldi	r21, 0x45	; 69
     4e2:	6d 81       	ldd	r22, Y+5	; 0x05
     4e4:	7e 81       	ldd	r23, Y+6	; 0x06
     4e6:	8f 81       	ldd	r24, Y+7	; 0x07
     4e8:	98 85       	ldd	r25, Y+8	; 0x08
     4ea:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     4ee:	dc 01       	movw	r26, r24
     4f0:	cb 01       	movw	r24, r22
     4f2:	89 a7       	std	Y+41, r24	; 0x29
     4f4:	9a a7       	std	Y+42, r25	; 0x2a
     4f6:	ab a7       	std	Y+43, r26	; 0x2b
     4f8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e8       	ldi	r20, 0x80	; 128
     500:	5f e3       	ldi	r21, 0x3F	; 63
     502:	69 a5       	ldd	r22, Y+41	; 0x29
     504:	7a a5       	ldd	r23, Y+42	; 0x2a
     506:	8b a5       	ldd	r24, Y+43	; 0x2b
     508:	9c a5       	ldd	r25, Y+44	; 0x2c
     50a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	2c f4       	brge	.+10     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
		__ticks = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	9e a7       	std	Y+46, r25	; 0x2e
     518:	8d a7       	std	Y+45, r24	; 0x2d
     51a:	3f c0       	rjmp	.+126    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
	else if (__tmp > 65535)
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	3f ef       	ldi	r19, 0xFF	; 255
     520:	4f e7       	ldi	r20, 0x7F	; 127
     522:	57 e4       	ldi	r21, 0x47	; 71
     524:	69 a5       	ldd	r22, Y+41	; 0x29
     526:	7a a5       	ldd	r23, Y+42	; 0x2a
     528:	8b a5       	ldd	r24, Y+43	; 0x2b
     52a:	9c a5       	ldd	r25, Y+44	; 0x2c
     52c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     530:	18 16       	cp	r1, r24
     532:	4c f5       	brge	.+82     	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	6d 81       	ldd	r22, Y+5	; 0x05
     53e:	7e 81       	ldd	r23, Y+6	; 0x06
     540:	8f 81       	ldd	r24, Y+7	; 0x07
     542:	98 85       	ldd	r25, Y+8	; 0x08
     544:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	9e a7       	std	Y+46, r25	; 0x2e
     55a:	8d a7       	std	Y+45, r24	; 0x2d
     55c:	0f c0       	rjmp	.+30     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
     55e:	80 e9       	ldi	r24, 0x90	; 144
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	98 ab       	std	Y+48, r25	; 0x30
     564:	8f a7       	std	Y+47, r24	; 0x2f
     566:	8f a5       	ldd	r24, Y+47	; 0x2f
     568:	98 a9       	ldd	r25, Y+48	; 0x30
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
     56e:	98 ab       	std	Y+48, r25	; 0x30
     570:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     572:	8d a5       	ldd	r24, Y+45	; 0x2d
     574:	9e a5       	ldd	r25, Y+46	; 0x2e
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	9e a7       	std	Y+46, r25	; 0x2e
     57a:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57c:	8d a5       	ldd	r24, Y+45	; 0x2d
     57e:	9e a5       	ldd	r25, Y+46	; 0x2e
     580:	89 2b       	or	r24, r25
     582:	69 f7       	brne	.-38     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
     584:	14 c0       	rjmp	.+40     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     586:	69 a5       	ldd	r22, Y+41	; 0x29
     588:	7a a5       	ldd	r23, Y+42	; 0x2a
     58a:	8b a5       	ldd	r24, Y+43	; 0x2b
     58c:	9c a5       	ldd	r25, Y+44	; 0x2c
     58e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	9e a7       	std	Y+46, r25	; 0x2e
     598:	8d a7       	std	Y+45, r24	; 0x2d
     59a:	8d a5       	ldd	r24, Y+45	; 0x2d
     59c:	9e a5       	ldd	r25, Y+46	; 0x2e
     59e:	9a ab       	std	Y+50, r25	; 0x32
     5a0:	89 ab       	std	Y+49, r24	; 0x31
     5a2:	89 a9       	ldd	r24, Y+49	; 0x31
     5a4:	9a a9       	ldd	r25, Y+50	; 0x32
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
     5aa:	9a ab       	std	Y+50, r25	; 0x32
     5ac:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	a8 ec       	ldi	r26, 0xC8	; 200
     5ba:	b2 e4       	ldi	r27, 0x42	; 66
     5bc:	89 87       	std	Y+9, r24	; 0x09
     5be:	9a 87       	std	Y+10, r25	; 0x0a
     5c0:	ab 87       	std	Y+11, r26	; 0x0b
     5c2:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     5c4:	2b ea       	ldi	r18, 0xAB	; 171
     5c6:	3a ea       	ldi	r19, 0xAA	; 170
     5c8:	4a ea       	ldi	r20, 0xAA	; 170
     5ca:	50 e4       	ldi	r21, 0x40	; 64
     5cc:	69 85       	ldd	r22, Y+9	; 0x09
     5ce:	7a 85       	ldd	r23, Y+10	; 0x0a
     5d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5d2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5d4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	8d 87       	std	Y+13, r24	; 0x0d
     5de:	9e 87       	std	Y+14, r25	; 0x0e
     5e0:	af 87       	std	Y+15, r26	; 0x0f
     5e2:	b8 8b       	std	Y+16, r27	; 0x10
	__tmp2 = ((F_CPU) / 4e6) * __us;
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e8       	ldi	r20, 0x80	; 128
     5ea:	50 e4       	ldi	r21, 0x40	; 64
     5ec:	69 85       	ldd	r22, Y+9	; 0x09
     5ee:	7a 85       	ldd	r23, Y+10	; 0x0a
     5f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	89 8b       	std	Y+17, r24	; 0x11
     5fe:	9a 8b       	std	Y+18, r25	; 0x12
     600:	ab 8b       	std	Y+19, r26	; 0x13
     602:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 e8       	ldi	r20, 0x80	; 128
     60a:	5f e3       	ldi	r21, 0x3F	; 63
     60c:	6d 85       	ldd	r22, Y+13	; 0x0d
     60e:	7e 85       	ldd	r23, Y+14	; 0x0e
     610:	8f 85       	ldd	r24, Y+15	; 0x0f
     612:	98 89       	ldd	r25, Y+16	; 0x10
     614:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     618:	88 23       	and	r24, r24
     61a:	1c f4       	brge	.+6      	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
		__ticks = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	8d 8b       	std	Y+21, r24	; 0x15
     620:	b2 c0       	rjmp	.+356    	; 0x786 <__EEPROM_REGION_LENGTH__+0x386>
	else if (__tmp2 > 65535)
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	3f ef       	ldi	r19, 0xFF	; 255
     626:	4f e7       	ldi	r20, 0x7F	; 127
     628:	57 e4       	ldi	r21, 0x47	; 71
     62a:	69 89       	ldd	r22, Y+17	; 0x11
     62c:	7a 89       	ldd	r23, Y+18	; 0x12
     62e:	8b 89       	ldd	r24, Y+19	; 0x13
     630:	9c 89       	ldd	r25, Y+20	; 0x14
     632:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     636:	18 16       	cp	r1, r24
     638:	0c f0       	brlt	.+2      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
     63a:	7b c0       	rjmp	.+246    	; 0x732 <__EEPROM_REGION_LENGTH__+0x332>
	{
		_delay_ms(__us / 1000.0);
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	4a e7       	ldi	r20, 0x7A	; 122
     642:	54 e4       	ldi	r21, 0x44	; 68
     644:	69 85       	ldd	r22, Y+9	; 0x09
     646:	7a 85       	ldd	r23, Y+10	; 0x0a
     648:	8b 85       	ldd	r24, Y+11	; 0x0b
     64a:	9c 85       	ldd	r25, Y+12	; 0x0c
     64c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__divsf3>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	8e 8b       	std	Y+22, r24	; 0x16
     656:	9f 8b       	std	Y+23, r25	; 0x17
     658:	a8 8f       	std	Y+24, r26	; 0x18
     65a:	b9 8f       	std	Y+25, r27	; 0x19

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	4a e7       	ldi	r20, 0x7A	; 122
     662:	55 e4       	ldi	r21, 0x45	; 69
     664:	6e 89       	ldd	r22, Y+22	; 0x16
     666:	7f 89       	ldd	r23, Y+23	; 0x17
     668:	88 8d       	ldd	r24, Y+24	; 0x18
     66a:	99 8d       	ldd	r25, Y+25	; 0x19
     66c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	8a 8f       	std	Y+26, r24	; 0x1a
     676:	9b 8f       	std	Y+27, r25	; 0x1b
     678:	ac 8f       	std	Y+28, r26	; 0x1c
     67a:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e8       	ldi	r20, 0x80	; 128
     682:	5f e3       	ldi	r21, 0x3F	; 63
     684:	6a 8d       	ldd	r22, Y+26	; 0x1a
     686:	7b 8d       	ldd	r23, Y+27	; 0x1b
     688:	8c 8d       	ldd	r24, Y+28	; 0x1c
     68a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     68c:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     690:	88 23       	and	r24, r24
     692:	2c f4       	brge	.+10     	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
		__ticks = 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	9f 8f       	std	Y+31, r25	; 0x1f
     69a:	8e 8f       	std	Y+30, r24	; 0x1e
     69c:	3f c0       	rjmp	.+126    	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
	else if (__tmp > 65535)
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	3f ef       	ldi	r19, 0xFF	; 255
     6a2:	4f e7       	ldi	r20, 0x7F	; 127
     6a4:	57 e4       	ldi	r21, 0x47	; 71
     6a6:	6a 8d       	ldd	r22, Y+26	; 0x1a
     6a8:	7b 8d       	ldd	r23, Y+27	; 0x1b
     6aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6ae:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     6b2:	18 16       	cp	r1, r24
     6b4:	4c f5       	brge	.+82     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	40 e2       	ldi	r20, 0x20	; 32
     6bc:	51 e4       	ldi	r21, 0x41	; 65
     6be:	6e 89       	ldd	r22, Y+22	; 0x16
     6c0:	7f 89       	ldd	r23, Y+23	; 0x17
     6c2:	88 8d       	ldd	r24, Y+24	; 0x18
     6c4:	99 8d       	ldd	r25, Y+25	; 0x19
     6c6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     6ca:	dc 01       	movw	r26, r24
     6cc:	cb 01       	movw	r24, r22
     6ce:	bc 01       	movw	r22, r24
     6d0:	cd 01       	movw	r24, r26
     6d2:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9f 8f       	std	Y+31, r25	; 0x1f
     6dc:	8e 8f       	std	Y+30, r24	; 0x1e
     6de:	0f c0       	rjmp	.+30     	; 0x6fe <__EEPROM_REGION_LENGTH__+0x2fe>
     6e0:	80 e9       	ldi	r24, 0x90	; 144
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	99 a3       	std	Y+33, r25	; 0x21
     6e6:	88 a3       	std	Y+32, r24	; 0x20
     6e8:	88 a1       	ldd	r24, Y+32	; 0x20
     6ea:	99 a1       	ldd	r25, Y+33	; 0x21
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <__EEPROM_REGION_LENGTH__+0x2ec>
     6f0:	99 a3       	std	Y+33, r25	; 0x21
     6f2:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	9f 8f       	std	Y+31, r25	; 0x1f
     6fc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     700:	9f 8d       	ldd	r25, Y+31	; 0x1f
     702:	89 2b       	or	r24, r25
     704:	69 f7       	brne	.-38     	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
     706:	3f c0       	rjmp	.+126    	; 0x786 <__EEPROM_REGION_LENGTH__+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     708:	6a 8d       	ldd	r22, Y+26	; 0x1a
     70a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     70c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     70e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     710:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	9f 8f       	std	Y+31, r25	; 0x1f
     71a:	8e 8f       	std	Y+30, r24	; 0x1e
     71c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     71e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     720:	9b a3       	std	Y+35, r25	; 0x23
     722:	8a a3       	std	Y+34, r24	; 0x22
     724:	8a a1       	ldd	r24, Y+34	; 0x22
     726:	9b a1       	ldd	r25, Y+35	; 0x23
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <__EEPROM_REGION_LENGTH__+0x328>
     72c:	9b a3       	std	Y+35, r25	; 0x23
     72e:	8a a3       	std	Y+34, r24	; 0x22
     730:	2a c0       	rjmp	.+84     	; 0x786 <__EEPROM_REGION_LENGTH__+0x386>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	4f e7       	ldi	r20, 0x7F	; 127
     738:	53 e4       	ldi	r21, 0x43	; 67
     73a:	6d 85       	ldd	r22, Y+13	; 0x0d
     73c:	7e 85       	ldd	r23, Y+14	; 0x0e
     73e:	8f 85       	ldd	r24, Y+15	; 0x0f
     740:	98 89       	ldd	r25, Y+16	; 0x10
     742:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     746:	18 16       	cp	r1, r24
     748:	ac f4       	brge	.+42     	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     74a:	69 89       	ldd	r22, Y+17	; 0x11
     74c:	7a 89       	ldd	r23, Y+18	; 0x12
     74e:	8b 89       	ldd	r24, Y+19	; 0x13
     750:	9c 89       	ldd	r25, Y+20	; 0x14
     752:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	9d a3       	std	Y+37, r25	; 0x25
     75c:	8c a3       	std	Y+36, r24	; 0x24
     75e:	8c a1       	ldd	r24, Y+36	; 0x24
     760:	9d a1       	ldd	r25, Y+37	; 0x25
     762:	9f a3       	std	Y+39, r25	; 0x27
     764:	8e a3       	std	Y+38, r24	; 0x26
     766:	8e a1       	ldd	r24, Y+38	; 0x26
     768:	9f a1       	ldd	r25, Y+39	; 0x27
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <__EEPROM_REGION_LENGTH__+0x36a>
     76e:	9f a3       	std	Y+39, r25	; 0x27
     770:	8e a3       	std	Y+38, r24	; 0x26
     772:	0f c0       	rjmp	.+30     	; 0x792 <__EEPROM_REGION_LENGTH__+0x392>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     774:	6d 85       	ldd	r22, Y+13	; 0x0d
     776:	7e 85       	ldd	r23, Y+14	; 0x0e
     778:	8f 85       	ldd	r24, Y+15	; 0x0f
     77a:	98 89       	ldd	r25, Y+16	; 0x10
     77c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     780:	dc 01       	movw	r26, r24
     782:	cb 01       	movw	r24, r22
     784:	8d 8b       	std	Y+21, r24	; 0x15
     786:	8d 89       	ldd	r24, Y+21	; 0x15
     788:	88 a7       	std	Y+40, r24	; 0x28
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     78a:	88 a5       	ldd	r24, Y+40	; 0x28
     78c:	8a 95       	dec	r24
     78e:	f1 f7       	brne	.-4      	; 0x78c <__EEPROM_REGION_LENGTH__+0x38c>
     790:	88 a7       	std	Y+40, r24	; 0x28
	_delay_us(100);
	lcd_vidSendCmd(0x03);
     792:	83 e0       	ldi	r24, 0x03	; 3
     794:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
	lcd_vidSendCmd(0x02);
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_4BIT_MODE);
     79e:	88 e2       	ldi	r24, 0x28	; 40
     7a0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_CURSOR_OFF);
     7a4:	8c e0       	ldi	r24, 0x0C	; 12
     7a6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
	lcd_vidCustomWrite();
     7aa:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <lcd_vidCustomWrite>
	lcd_vidGotoRowColumn(0, 0);
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_vidGotoRowColumn>
}
     7b6:	00 00       	nop
     7b8:	ec 96       	adiw	r28, 0x3c	; 60
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <lcd_vidSendCmd>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : cmd	-> LCD command ID                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendCmd(lcd_cmd_t cmd)
{
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	2f 97       	sbiw	r28, 0x0f	; 15
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	8f 87       	std	Y+15, r24	; 0x0f
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a0 e8       	ldi	r26, 0x80	; 128
     7e6:	bf e3       	ldi	r27, 0x3F	; 63
     7e8:	89 83       	std	Y+1, r24	; 0x01
     7ea:	9a 83       	std	Y+2, r25	; 0x02
     7ec:	ab 83       	std	Y+3, r26	; 0x03
     7ee:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	4a e7       	ldi	r20, 0x7A	; 122
     7f6:	55 e4       	ldi	r21, 0x45	; 69
     7f8:	69 81       	ldd	r22, Y+1	; 0x01
     7fa:	7a 81       	ldd	r23, Y+2	; 0x02
     7fc:	8b 81       	ldd	r24, Y+3	; 0x03
     7fe:	9c 81       	ldd	r25, Y+4	; 0x04
     800:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     804:	dc 01       	movw	r26, r24
     806:	cb 01       	movw	r24, r22
     808:	8d 83       	std	Y+5, r24	; 0x05
     80a:	9e 83       	std	Y+6, r25	; 0x06
     80c:	af 83       	std	Y+7, r26	; 0x07
     80e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e8       	ldi	r20, 0x80	; 128
     816:	5f e3       	ldi	r21, 0x3F	; 63
     818:	6d 81       	ldd	r22, Y+5	; 0x05
     81a:	7e 81       	ldd	r23, Y+6	; 0x06
     81c:	8f 81       	ldd	r24, Y+7	; 0x07
     81e:	98 85       	ldd	r25, Y+8	; 0x08
     820:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     824:	88 23       	and	r24, r24
     826:	2c f4       	brge	.+10     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		__ticks = 1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	9a 87       	std	Y+10, r25	; 0x0a
     82e:	89 87       	std	Y+9, r24	; 0x09
     830:	3f c0       	rjmp	.+126    	; 0x8b0 <__stack+0x51>
	else if (__tmp > 65535)
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	3f ef       	ldi	r19, 0xFF	; 255
     836:	4f e7       	ldi	r20, 0x7F	; 127
     838:	57 e4       	ldi	r21, 0x47	; 71
     83a:	6d 81       	ldd	r22, Y+5	; 0x05
     83c:	7e 81       	ldd	r23, Y+6	; 0x06
     83e:	8f 81       	ldd	r24, Y+7	; 0x07
     840:	98 85       	ldd	r25, Y+8	; 0x08
     842:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     846:	18 16       	cp	r1, r24
     848:	4c f5       	brge	.+82     	; 0x89c <__stack+0x3d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 e2       	ldi	r20, 0x20	; 32
     850:	51 e4       	ldi	r21, 0x41	; 65
     852:	69 81       	ldd	r22, Y+1	; 0x01
     854:	7a 81       	ldd	r23, Y+2	; 0x02
     856:	8b 81       	ldd	r24, Y+3	; 0x03
     858:	9c 81       	ldd	r25, Y+4	; 0x04
     85a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	bc 01       	movw	r22, r24
     864:	cd 01       	movw	r24, r26
     866:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     86a:	dc 01       	movw	r26, r24
     86c:	cb 01       	movw	r24, r22
     86e:	9a 87       	std	Y+10, r25	; 0x0a
     870:	89 87       	std	Y+9, r24	; 0x09
     872:	0f c0       	rjmp	.+30     	; 0x892 <__stack+0x33>
     874:	80 e9       	ldi	r24, 0x90	; 144
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	9c 87       	std	Y+12, r25	; 0x0c
     87a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     87c:	8b 85       	ldd	r24, Y+11	; 0x0b
     87e:	9c 85       	ldd	r25, Y+12	; 0x0c
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <__stack+0x21>
     884:	9c 87       	std	Y+12, r25	; 0x0c
     886:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     888:	89 85       	ldd	r24, Y+9	; 0x09
     88a:	9a 85       	ldd	r25, Y+10	; 0x0a
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	9a 87       	std	Y+10, r25	; 0x0a
     890:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     892:	89 85       	ldd	r24, Y+9	; 0x09
     894:	9a 85       	ldd	r25, Y+10	; 0x0a
     896:	89 2b       	or	r24, r25
     898:	69 f7       	brne	.-38     	; 0x874 <__stack+0x15>
     89a:	14 c0       	rjmp	.+40     	; 0x8c4 <__stack+0x65>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     89c:	6d 81       	ldd	r22, Y+5	; 0x05
     89e:	7e 81       	ldd	r23, Y+6	; 0x06
     8a0:	8f 81       	ldd	r24, Y+7	; 0x07
     8a2:	98 85       	ldd	r25, Y+8	; 0x08
     8a4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	9a 87       	std	Y+10, r25	; 0x0a
     8ae:	89 87       	std	Y+9, r24	; 0x09
     8b0:	89 85       	ldd	r24, Y+9	; 0x09
     8b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b4:	9e 87       	std	Y+14, r25	; 0x0e
     8b6:	8d 87       	std	Y+13, r24	; 0x0d
     8b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <__stack+0x5d>
     8c0:	9e 87       	std	Y+14, r25	; 0x0e
     8c2:	8d 87       	std	Y+13, r24	; 0x0d
	/*	RS -> Command Mode	*/
	_delay_ms(1);
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_LOW);
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	63 e0       	ldi	r22, 0x03	; 3
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,4));
     8ce:	8f 85       	ldd	r24, Y+15	; 0x0f
     8d0:	82 95       	swap	r24
     8d2:	8f 70       	andi	r24, 0x0F	; 15
     8d4:	81 70       	andi	r24, 0x01	; 1
     8d6:	48 2f       	mov	r20, r24
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D5_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,5));
     8e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e2:	82 95       	swap	r24
     8e4:	86 95       	lsr	r24
     8e6:	87 70       	andi	r24, 0x07	; 7
     8e8:	81 70       	andi	r24, 0x01	; 1
     8ea:	48 2f       	mov	r20, r24
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D6_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,6));
     8f4:	8f 85       	ldd	r24, Y+15	; 0x0f
     8f6:	82 95       	swap	r24
     8f8:	86 95       	lsr	r24
     8fa:	86 95       	lsr	r24
     8fc:	83 70       	andi	r24, 0x03	; 3
     8fe:	81 70       	andi	r24, 0x01	; 1
     900:	48 2f       	mov	r20, r24
     902:	62 e0       	ldi	r22, 0x02	; 2
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D7_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,7));
     90a:	8f 85       	ldd	r24, Y+15	; 0x0f
     90c:	88 1f       	adc	r24, r24
     90e:	88 27       	eor	r24, r24
     910:	88 1f       	adc	r24, r24
     912:	48 2f       	mov	r20, r24
     914:	63 e0       	ldi	r22, 0x03	; 3
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	
	enablePulse();
     91c:	0e 94 49 00 	call	0x92	; 0x92 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,0));
     920:	8f 85       	ldd	r24, Y+15	; 0x0f
     922:	81 70       	andi	r24, 0x01	; 1
     924:	48 2f       	mov	r20, r24
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D5_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,1));
     92e:	8f 85       	ldd	r24, Y+15	; 0x0f
     930:	86 95       	lsr	r24
     932:	81 70       	andi	r24, 0x01	; 1
     934:	48 2f       	mov	r20, r24
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D6_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,2));
     93e:	8f 85       	ldd	r24, Y+15	; 0x0f
     940:	86 95       	lsr	r24
     942:	86 95       	lsr	r24
     944:	81 70       	andi	r24, 0x01	; 1
     946:	48 2f       	mov	r20, r24
     948:	62 e0       	ldi	r22, 0x02	; 2
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D7_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,3));
     950:	8f 85       	ldd	r24, Y+15	; 0x0f
     952:	86 95       	lsr	r24
     954:	86 95       	lsr	r24
     956:	86 95       	lsr	r24
     958:	81 70       	andi	r24, 0x01	; 1
     95a:	48 2f       	mov	r20, r24
     95c:	63 e0       	ldi	r22, 0x03	; 3
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	
	enablePulse();
     964:	0e 94 49 00 	call	0x92	; 0x92 <enablePulse>
}
     968:	00 00       	nop
     96a:	2f 96       	adiw	r28, 0x0f	; 15
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <lcd_vidSendData>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : data	-> LCD data input                                                                       
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendData(u8 data)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	1f 92       	push	r1
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	89 83       	std	Y+1, r24	; 0x01
	/*	RS -> Data Mode	*/
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_HIGH);
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	63 e0       	ldi	r22, 0x03	; 3
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,4));
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	82 95       	swap	r24
     996:	8f 70       	andi	r24, 0x0F	; 15
     998:	81 70       	andi	r24, 0x01	; 1
     99a:	48 2f       	mov	r20, r24
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,5));
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	82 95       	swap	r24
     9a8:	86 95       	lsr	r24
     9aa:	87 70       	andi	r24, 0x07	; 7
     9ac:	81 70       	andi	r24, 0x01	; 1
     9ae:	48 2f       	mov	r20, r24
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,6));
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	82 95       	swap	r24
     9bc:	86 95       	lsr	r24
     9be:	86 95       	lsr	r24
     9c0:	83 70       	andi	r24, 0x03	; 3
     9c2:	81 70       	andi	r24, 0x01	; 1
     9c4:	48 2f       	mov	r20, r24
     9c6:	62 e0       	ldi	r22, 0x02	; 2
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,7));
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	88 1f       	adc	r24, r24
     9d2:	88 27       	eor	r24, r24
     9d4:	88 1f       	adc	r24, r24
     9d6:	48 2f       	mov	r20, r24
     9d8:	63 e0       	ldi	r22, 0x03	; 3
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	
	enablePulse();
     9e0:	0e 94 49 00 	call	0x92	; 0x92 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,0));
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	81 70       	andi	r24, 0x01	; 1
     9e8:	48 2f       	mov	r20, r24
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,1));
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	86 95       	lsr	r24
     9f6:	81 70       	andi	r24, 0x01	; 1
     9f8:	48 2f       	mov	r20, r24
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,2));
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	86 95       	lsr	r24
     a06:	86 95       	lsr	r24
     a08:	81 70       	andi	r24, 0x01	; 1
     a0a:	48 2f       	mov	r20, r24
     a0c:	62 e0       	ldi	r22, 0x02	; 2
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,3));
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	86 95       	lsr	r24
     a18:	86 95       	lsr	r24
     a1a:	86 95       	lsr	r24
     a1c:	81 70       	andi	r24, 0x01	; 1
     a1e:	48 2f       	mov	r20, r24
     a20:	63 e0       	ldi	r22, 0x03	; 3
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
	
	enablePulse();
     a28:	0e 94 49 00 	call	0x92	; 0x92 <enablePulse>
	
}
     a2c:	00 00       	nop
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <lcd_vidGotoRowColumn>:
* \Parameters (in) : row	-> LCD row ID
					 column -> LCD column ID															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidGotoRowColumn(u8 row, u8 column)
{
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <lcd_vidGotoRowColumn+0x6>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	89 83       	std	Y+1, r24	; 0x01
     a42:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	88 2f       	mov	r24, r24
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	91 05       	cpc	r25, r1
     a4e:	89 f0       	breq	.+34     	; 0xa72 <lcd_vidGotoRowColumn+0x3c>
     a50:	82 30       	cpi	r24, 0x02	; 2
     a52:	91 05       	cpc	r25, r1
     a54:	1c f4       	brge	.+6      	; 0xa5c <lcd_vidGotoRowColumn+0x26>
     a56:	89 2b       	or	r24, r25
     a58:	39 f0       	breq	.+14     	; 0xa68 <lcd_vidGotoRowColumn+0x32>
	/* Row 1 */
	lcd_vidSendCmd(0xD4+column);
	break;	
		
	}	
}
     a5a:	1a c0       	rjmp	.+52     	; 0xa90 <lcd_vidGotoRowColumn+0x5a>
					 column -> LCD column ID															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidGotoRowColumn(u8 row, u8 column)
{
	switch (row)
     a5c:	82 30       	cpi	r24, 0x02	; 2
     a5e:	91 05       	cpc	r25, r1
     a60:	69 f0       	breq	.+26     	; 0xa7c <lcd_vidGotoRowColumn+0x46>
     a62:	03 97       	sbiw	r24, 0x03	; 3
     a64:	81 f0       	breq	.+32     	; 0xa86 <lcd_vidGotoRowColumn+0x50>
	/* Row 1 */
	lcd_vidSendCmd(0xD4+column);
	break;	
		
	}	
}
     a66:	14 c0       	rjmp	.+40     	; 0xa90 <lcd_vidGotoRowColumn+0x5a>
{
	switch (row)
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
     a68:	8a 81       	ldd	r24, Y+2	; 0x02
     a6a:	80 58       	subi	r24, 0x80	; 128
     a6c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
		break;
     a70:	0f c0       	rjmp	.+30     	; 0xa90 <lcd_vidGotoRowColumn+0x5a>
	case 1:
		/* Row 1 */
		lcd_vidSendCmd(0xC0+column);
     a72:	8a 81       	ldd	r24, Y+2	; 0x02
     a74:	80 54       	subi	r24, 0x40	; 64
     a76:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
		break;
     a7a:	0a c0       	rjmp	.+20     	; 0xa90 <lcd_vidGotoRowColumn+0x5a>
	case 2:
	/* Row 1 */
	lcd_vidSendCmd(0x94+column);
     a7c:	8a 81       	ldd	r24, Y+2	; 0x02
     a7e:	8c 56       	subi	r24, 0x6C	; 108
     a80:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
	break;
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <lcd_vidGotoRowColumn+0x5a>
	
	case 3:
	/* Row 1 */
	lcd_vidSendCmd(0xD4+column);
     a86:	8a 81       	ldd	r24, Y+2	; 0x02
     a88:	8c 52       	subi	r24, 0x2C	; 44
     a8a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
	break;	
     a8e:	00 00       	nop
		
	}	
}
     a90:	00 00       	nop
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <lcd_vidDisplyChar>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	1f 92       	push	r1
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	89 83       	std	Y+1, r24	; 0x01
	lcd_vidSendData(chr);
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	0e 94 be 04 	call	0x97c	; 0x97c <lcd_vidSendData>
}
     aae:	00 00       	nop
     ab0:	0f 90       	pop	r0
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <lcd_vidDisplyStr>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	00 d0       	rcall	.+0      	; 0xabe <lcd_vidDisplyStr+0x6>
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	9a 83       	std	Y+2, r25	; 0x02
     ac4:	89 83       	std	Y+1, r24	; 0x01
	while (*str != '\0')
     ac6:	0b c0       	rjmp	.+22     	; 0xade <lcd_vidDisplyStr+0x26>
	{
		lcd_vidDisplyChar(*str);
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	9a 81       	ldd	r25, Y+2	; 0x02
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <lcd_vidDisplyChar>
		str++;
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	9a 83       	std	Y+2, r25	; 0x02
     adc:	89 83       	std	Y+1, r24	; 0x01
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	9a 81       	ldd	r25, Y+2	; 0x02
     ae2:	fc 01       	movw	r30, r24
     ae4:	80 81       	ld	r24, Z
     ae6:	88 23       	and	r24, r24
     ae8:	79 f7       	brne	.-34     	; 0xac8 <lcd_vidDisplyStr+0x10>
	{
		lcd_vidDisplyChar(*str);
		str++;
	}
}
     aea:	00 00       	nop
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <lcd_vidCustomWrite>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidCustomWrite(void)
{
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	00 d0       	rcall	.+0      	; 0xafc <lcd_vidCustomWrite+0x6>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
     b00:	19 82       	std	Y+1, r1	; 0x01
	u8 loc_CharIndx=0;
     b02:	1a 82       	std	Y+2, r1	; 0x02
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
     b04:	1a 82       	std	Y+2, r1	; 0x02
     b06:	28 c0       	rjmp	.+80     	; 0xb58 <lcd_vidCustomWrite+0x62>
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
     b08:	8a 81       	ldd	r24, Y+2	; 0x02
     b0a:	88 2f       	mov	r24, r24
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	08 96       	adiw	r24, 0x08	; 8
     b10:	88 0f       	add	r24, r24
     b12:	88 0f       	add	r24, r24
     b14:	88 0f       	add	r24, r24
     b16:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
     b1a:	19 82       	std	Y+1, r1	; 0x01
     b1c:	17 c0       	rjmp	.+46     	; 0xb4c <lcd_vidCustomWrite+0x56>
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	28 2f       	mov	r18, r24
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	88 2f       	mov	r24, r24
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	22 0f       	add	r18, r18
     b2c:	33 1f       	adc	r19, r19
     b2e:	22 0f       	add	r18, r18
     b30:	33 1f       	adc	r19, r19
     b32:	22 0f       	add	r18, r18
     b34:	33 1f       	adc	r19, r19
     b36:	82 0f       	add	r24, r18
     b38:	93 1f       	adc	r25, r19
     b3a:	80 5a       	subi	r24, 0xA0	; 160
     b3c:	9f 4f       	sbci	r25, 0xFF	; 255
     b3e:	fc 01       	movw	r30, r24
     b40:	80 81       	ld	r24, Z
     b42:	0e 94 4e 05 	call	0xa9c	; 0xa9c <lcd_vidDisplyChar>
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	8f 5f       	subi	r24, 0xFF	; 255
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	88 30       	cpi	r24, 0x08	; 8
     b50:	30 f3       	brcs	.-52     	; 0xb1e <lcd_vidCustomWrite+0x28>
void lcd_vidCustomWrite(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
     b52:	8a 81       	ldd	r24, Y+2	; 0x02
     b54:	8f 5f       	subi	r24, 0xFF	; 255
     b56:	8a 83       	std	Y+2, r24	; 0x02
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	88 30       	cpi	r24, 0x08	; 8
     b5c:	a8 f2       	brcs	.-86     	; 0xb08 <lcd_vidCustomWrite+0x12>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
     b5e:	00 00       	nop
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <lcd_vidClrDislay>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidClrDislay(void)
{
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	2e 97       	sbiw	r28, 0x0e	; 14
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
	lcd_vidSendCmd(_LCD_CLEAR);
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	0e 94 e5 03 	call	0x7ca	; 0x7ca <lcd_vidSendCmd>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 ea       	ldi	r26, 0xA0	; 160
     b8a:	b0 e4       	ldi	r27, 0x40	; 64
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	ab 83       	std	Y+3, r26	; 0x03
     b92:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	4a e7       	ldi	r20, 0x7A	; 122
     b9a:	55 e4       	ldi	r21, 0x45	; 69
     b9c:	69 81       	ldd	r22, Y+1	; 0x01
     b9e:	7a 81       	ldd	r23, Y+2	; 0x02
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
     bac:	8d 83       	std	Y+5, r24	; 0x05
     bae:	9e 83       	std	Y+6, r25	; 0x06
     bb0:	af 83       	std	Y+7, r26	; 0x07
     bb2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e8       	ldi	r20, 0x80	; 128
     bba:	5f e3       	ldi	r21, 0x3F	; 63
     bbc:	6d 81       	ldd	r22, Y+5	; 0x05
     bbe:	7e 81       	ldd	r23, Y+6	; 0x06
     bc0:	8f 81       	ldd	r24, Y+7	; 0x07
     bc2:	98 85       	ldd	r25, Y+8	; 0x08
     bc4:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     bc8:	88 23       	and	r24, r24
     bca:	2c f4       	brge	.+10     	; 0xbd6 <lcd_vidClrDislay+0x6c>
		__ticks = 1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	9a 87       	std	Y+10, r25	; 0x0a
     bd2:	89 87       	std	Y+9, r24	; 0x09
     bd4:	3f c0       	rjmp	.+126    	; 0xc54 <lcd_vidClrDislay+0xea>
	else if (__tmp > 65535)
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	6d 81       	ldd	r22, Y+5	; 0x05
     be0:	7e 81       	ldd	r23, Y+6	; 0x06
     be2:	8f 81       	ldd	r24, Y+7	; 0x07
     be4:	98 85       	ldd	r25, Y+8	; 0x08
     be6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     bea:	18 16       	cp	r1, r24
     bec:	4c f5       	brge	.+82     	; 0xc40 <lcd_vidClrDislay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e2       	ldi	r20, 0x20	; 32
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	69 81       	ldd	r22, Y+1	; 0x01
     bf8:	7a 81       	ldd	r23, Y+2	; 0x02
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	bc 01       	movw	r22, r24
     c08:	cd 01       	movw	r24, r26
     c0a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	9a 87       	std	Y+10, r25	; 0x0a
     c14:	89 87       	std	Y+9, r24	; 0x09
     c16:	0f c0       	rjmp	.+30     	; 0xc36 <lcd_vidClrDislay+0xcc>
     c18:	80 e9       	ldi	r24, 0x90	; 144
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	9c 87       	std	Y+12, r25	; 0x0c
     c1e:	8b 87       	std	Y+11, r24	; 0x0b
     c20:	8b 85       	ldd	r24, Y+11	; 0x0b
     c22:	9c 85       	ldd	r25, Y+12	; 0x0c
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <lcd_vidClrDislay+0xba>
     c28:	9c 87       	std	Y+12, r25	; 0x0c
     c2a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2c:	89 85       	ldd	r24, Y+9	; 0x09
     c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	9a 87       	std	Y+10, r25	; 0x0a
     c34:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c36:	89 85       	ldd	r24, Y+9	; 0x09
     c38:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3a:	89 2b       	or	r24, r25
     c3c:	69 f7       	brne	.-38     	; 0xc18 <lcd_vidClrDislay+0xae>
	_delay_ms(5);
}
     c3e:	14 c0       	rjmp	.+40     	; 0xc68 <lcd_vidClrDislay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c40:	6d 81       	ldd	r22, Y+5	; 0x05
     c42:	7e 81       	ldd	r23, Y+6	; 0x06
     c44:	8f 81       	ldd	r24, Y+7	; 0x07
     c46:	98 85       	ldd	r25, Y+8	; 0x08
     c48:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	9a 87       	std	Y+10, r25	; 0x0a
     c52:	89 87       	std	Y+9, r24	; 0x09
     c54:	89 85       	ldd	r24, Y+9	; 0x09
     c56:	9a 85       	ldd	r25, Y+10	; 0x0a
     c58:	9e 87       	std	Y+14, r25	; 0x0e
     c5a:	8d 87       	std	Y+13, r24	; 0x0d
     c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <lcd_vidClrDislay+0xf6>
     c64:	9e 87       	std	Y+14, r25	; 0x0e
     c66:	8d 87       	std	Y+13, r24	; 0x0d
     c68:	00 00       	nop
     c6a:	2e 96       	adiw	r28, 0x0e	; 14
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <TX_Complete>:
										// Buffer For Received Data

// Prototypes 
void ExchangeDataISR(u8 ComingData);
void TX_Complete(void)
{
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62

}
     c84:	00 00       	nop
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <SendStringThroughSpi>:
void SendStringThroughSpi(u8 *ptrString)
{
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	00 d0       	rcall	.+0      	; 0xc92 <SendStringThroughSpi+0x6>
     c92:	1f 92       	push	r1
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	9b 83       	std	Y+3, r25	; 0x03
     c9a:	8a 83       	std	Y+2, r24	; 0x02
	// This Function Will Send Whole string with '\0'
	u8 LOC_u8Counter = 0; 
     c9c:	19 82       	std	Y+1, r1	; 0x01
	// Send Next Character  
	spi_masterSendByteUsingIRQ(ptrString[LOC_u8Counter]);
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	88 2f       	mov	r24, r24
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	2a 81       	ldd	r18, Y+2	; 0x02
     ca6:	3b 81       	ldd	r19, Y+3	; 0x03
     ca8:	82 0f       	add	r24, r18
     caa:	93 1f       	adc	r25, r19
     cac:	fc 01       	movw	r30, r24
     cae:	80 81       	ld	r24, Z
     cb0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <spi_masterSendByteUsingIRQ>
	do
	{
		// Send Next Character  
		spi_masterSendByteUsingIRQ(ptrString[LOC_u8Counter]);
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	88 2f       	mov	r24, r24
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	2a 81       	ldd	r18, Y+2	; 0x02
     cbc:	3b 81       	ldd	r19, Y+3	; 0x03
     cbe:	82 0f       	add	r24, r18
     cc0:	93 1f       	adc	r25, r19
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <spi_masterSendByteUsingIRQ>
		// Wait to exchange
		SPI_DataExchangeHappens = 0 ; 
     cca:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <SPI_DataExchangeHappens>
		while(SPI_DataExchangeHappens==0);
     cce:	00 00       	nop
     cd0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <SPI_DataExchangeHappens>
     cd4:	88 23       	and	r24, r24
     cd6:	e1 f3       	breq	.-8      	; 0xcd0 <SendStringThroughSpi+0x44>
		// Increase Ccounter 
		LOC_u8Counter++;
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	89 83       	std	Y+1, r24	; 0x01
	}while(ptrString[LOC_u8Counter-1] != '\0' );
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	2a 81       	ldd	r18, Y+2	; 0x02
     ce8:	3b 81       	ldd	r19, Y+3	; 0x03
     cea:	82 0f       	add	r24, r18
     cec:	93 1f       	adc	r25, r19
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	88 23       	and	r24, r24
     cf4:	f9 f6       	brne	.-66     	; 0xcb4 <SendStringThroughSpi+0x28>
	// Reset SPI_DataExchangeHappens
	SPI_DataExchangeHappens = 0  ;
     cf6:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <SPI_DataExchangeHappens>
	// Reset Flag 
	Exist_UART_Msg = 0 ;
     cfa:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Exist_UART_Msg>
}
     cfe:	00 00       	nop
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <ReceiveStringThroughSpi>:

void ReceiveStringThroughSpi(u8 *ptrString)
{
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	00 d0       	rcall	.+0      	; 0xd12 <ReceiveStringThroughSpi+0x6>
     d12:	1f 92       	push	r1
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	9b 83       	std	Y+3, r25	; 0x03
     d1a:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Counter = 0 ;
     d1c:	19 82       	std	Y+1, r1	; 0x01
	// While Is_SPI_Request_Transmit = 1 and The Received String Doesn't Reach to the SLVE_STRING_END_CHAR 
	if(Is_SPI_Request_Transmit == 1)
     d1e:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Is_SPI_Request_Transmit>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	09 f0       	breq	.+2      	; 0xd28 <ReceiveStringThroughSpi+0x1c>
     d26:	41 c0       	rjmp	.+130    	; 0xdaa <ReceiveStringThroughSpi+0x9e>
	{
		do
		{
			// Send Dummy Byte First
			spi_masterReceiveByteUsingIRQ(MSTR_AVILABLE_TO_RECEIVE); 
     d28:	84 e2       	ldi	r24, 0x24	; 36
     d2a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_masterReceiveByteUsingIRQ>
			// Wait Until Exchange Happens
			SPI_DataExchangeHappens = 0 ; 
     d2e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <SPI_DataExchangeHappens>
			while(SPI_DataExchangeHappens==0);
     d32:	00 00       	nop
     d34:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <SPI_DataExchangeHappens>
     d38:	88 23       	and	r24, r24
     d3a:	e1 f3       	breq	.-8      	; 0xd34 <ReceiveStringThroughSpi+0x28>
			// Store Received Data To Buffer 
			ptrString[LOC_u8Counter] = SPI_ComingData ; 
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	2a 81       	ldd	r18, Y+2	; 0x02
     d44:	3b 81       	ldd	r19, Y+3	; 0x03
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <SPI_ComingData>
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
			// Increase Counter 
			LOC_u8Counter++;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	89 83       	std	Y+1, r24	; 0x01
		}while(ptrString[LOC_u8Counter-1] != SLVE_STRING_END_CHAR );
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	2a 81       	ldd	r18, Y+2	; 0x02
     d62:	3b 81       	ldd	r19, Y+3	; 0x03
     d64:	82 0f       	add	r24, r18
     d66:	93 1f       	adc	r25, r19
     d68:	fc 01       	movw	r30, r24
     d6a:	80 81       	ld	r24, Z
     d6c:	83 32       	cpi	r24, 0x23	; 35
     d6e:	e1 f6       	brne	.-72     	; 0xd28 <ReceiveStringThroughSpi+0x1c>
		
		// Send Dummy Byte First
		spi_masterReceiveByteUsingIRQ(MSTR_AVILABLE_TO_RECEIVE); 
     d70:	84 e2       	ldi	r24, 0x24	; 36
     d72:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <spi_masterReceiveByteUsingIRQ>
		
		// Set End with '\0'
		ptrString[LOC_u8Counter-1] = '\0'; 
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	88 2f       	mov	r24, r24
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	2a 81       	ldd	r18, Y+2	; 0x02
     d80:	3b 81       	ldd	r19, Y+3	; 0x03
     d82:	82 0f       	add	r24, r18
     d84:	93 1f       	adc	r25, r19
     d86:	fc 01       	movw	r30, r24
     d88:	10 82       	st	Z, r1
		
		// Reset SPI_DataExchangeHappens
		SPI_DataExchangeHappens = 0  ;
     d8a:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <SPI_DataExchangeHappens>
		
		// Reset Is_SPI_Request_Transmit 
		Is_SPI_Request_Transmit = 0 ;
     d8e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Is_SPI_Request_Transmit>
		#if DEBUG_ENABLE == 1 
		// Display Buffer 
		lcd_vidClrDislay();
		lcd_vidDisplyStr((u8*)ptrString); 
		#endif 
		UART_voidTransmitStringAsynch("\r\n",TX_Complete);
     d92:	6e e3       	ldi	r22, 0x3E	; 62
     d94:	76 e0       	ldi	r23, 0x06	; 6
     d96:	80 ea       	ldi	r24, 0xA0	; 160
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 af 0c 	call	0x195e	; 0x195e <UART_voidTransmitStringAsynch>
		UART_voidTransmitStringAsynch(&ptrString[0], TX_Complete) ;
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	9b 81       	ldd	r25, Y+3	; 0x03
     da2:	6e e3       	ldi	r22, 0x3E	; 62
     da4:	76 e0       	ldi	r23, 0x06	; 6
     da6:	0e 94 af 0c 	call	0x195e	; 0x195e <UART_voidTransmitStringAsynch>
	}
	
}
     daa:	00 00       	nop
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <RX_CompleteString>:

void RX_CompleteString(u8 *ptrBuffer , u8 BufferSize)
{
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <RX_CompleteString+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <RX_CompleteString+0x8>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	9b 83       	std	Y+3, r25	; 0x03
     dc6:	8a 83       	std	Y+2, r24	; 0x02
     dc8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Locu8Counter=0 ; 
     dca:	19 82       	std	Y+1, r1	; 0x01
	lcd_vidClrDislay();
     dcc:	0e 94 b5 05 	call	0xb6a	; 0xb6a <lcd_vidClrDislay>
	lcd_vidDisplyStr((u8*)"Received String -- "); 
     dd0:	83 ea       	ldi	r24, 0xA3	; 163
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 5c 05 	call	0xab8	; 0xab8 <lcd_vidDisplyStr>
	lcd_vidGotoRowColumn(1,4);	
     dd8:	64 e0       	ldi	r22, 0x04	; 4
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_vidGotoRowColumn>
	lcd_vidDisplyStr((u8*)ptrBuffer); 
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	9b 81       	ldd	r25, Y+3	; 0x03
     de4:	0e 94 5c 05 	call	0xab8	; 0xab8 <lcd_vidDisplyStr>
	ReceievedFromUART = ptrBuffer ; 
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__data_end+0x1>
     df0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__data_end>
	Exist_UART_Msg = 1 ;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <Exist_UART_Msg>
	// Shift String By Space 
    // Shift array by 1 position to the right
    for (Locu8Counter = BufferSize; Locu8Counter >= 1; Locu8Counter--) {
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	17 c0       	rjmp	.+46     	; 0xe2e <RX_CompleteString+0x76>
        ptrBuffer[Locu8Counter] = ptrBuffer[Locu8Counter-1];
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	2a 81       	ldd	r18, Y+2	; 0x02
     e08:	3b 81       	ldd	r19, Y+3	; 0x03
     e0a:	82 0f       	add	r24, r18
     e0c:	93 1f       	adc	r25, r19
     e0e:	29 81       	ldd	r18, Y+1	; 0x01
     e10:	22 2f       	mov	r18, r18
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	21 50       	subi	r18, 0x01	; 1
     e16:	31 09       	sbc	r19, r1
     e18:	4a 81       	ldd	r20, Y+2	; 0x02
     e1a:	5b 81       	ldd	r21, Y+3	; 0x03
     e1c:	24 0f       	add	r18, r20
     e1e:	35 1f       	adc	r19, r21
     e20:	f9 01       	movw	r30, r18
     e22:	20 81       	ld	r18, Z
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
	lcd_vidDisplyStr((u8*)ptrBuffer); 
	ReceievedFromUART = ptrBuffer ; 
	Exist_UART_Msg = 1 ;
	// Shift String By Space 
    // Shift array by 1 position to the right
    for (Locu8Counter = BufferSize; Locu8Counter >= 1; Locu8Counter--) {
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	81 50       	subi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	88 23       	and	r24, r24
     e32:	31 f7       	brne	.-52     	; 0xe00 <RX_CompleteString+0x48>
        ptrBuffer[Locu8Counter] = ptrBuffer[Locu8Counter-1];
    }
	ptrBuffer[0] = '>' ;
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
     e38:	2e e3       	ldi	r18, 0x3E	; 62
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
	UART_TransmitString("\r\n");
     e3e:	80 ea       	ldi	r24, 0xA0	; 160
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 75 0c 	call	0x18ea	; 0x18ea <UART_TransmitString>
	UART_TransmitString(ptrBuffer);
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	9b 81       	ldd	r25, Y+3	; 0x03
     e4a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <UART_TransmitString>
}
     e4e:	00 00       	nop
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <main>:
int main(void)
{
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	2e 97       	sbiw	r28, 0x0e	; 14
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
	// LCD Init 
	lcd_vidInit();
     e72:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_vidInit>
	
	// UART Init
	dio_vidConfigChannel(DIO_PORTD,DIO_PIN1,OUTPUT);
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
	UART_Init(UART_BAUDRATE_9600);
     e80:	87 e6       	ldi	r24, 0x67	; 103
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Init>
	// Call Asynch Function
	UART_ReceiveStringAsynch(RX_CompleteString);
     e88:	8c ed       	ldi	r24, 0xDC	; 220
     e8a:	96 e0       	ldi	r25, 0x06	; 6
     e8c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <UART_ReceiveStringAsynch>
	UART_voidTransmitStringAsynch(ReceievedFromUART, TX_Complete) ;
     e90:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
     e94:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x1>
     e98:	6e e3       	ldi	r22, 0x3E	; 62
     e9a:	76 e0       	ldi	r23, 0x06	; 6
     e9c:	0e 94 af 0c 	call	0x195e	; 0x195e <UART_voidTransmitStringAsynch>

	// SPI 
	spi_masterInit(ExchangeDataISR); 
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	98 e0       	ldi	r25, 0x08	; 8
     ea4:	0e 94 97 0b 	call	0x172e	; 0x172e <spi_masterInit>
	
	// External Interrupt  PINA0 Input-Pull Up
	dio_vidConfigChannel(DIO_PORTD,DIO_PIN2,INPUT);
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	62 e0       	ldi	r22, 0x02	; 2
     eac:	83 e0       	ldi	r24, 0x03	; 3
     eae:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
	dio_vidEnablePullUp(DIO_PORTD,DIO_PIN2);
     eb2:	62 e0       	ldi	r22, 0x02	; 2
     eb4:	83 e0       	ldi	r24, 0x03	; 3
     eb6:	0e 94 1f 0a 	call	0x143e	; 0x143e <dio_vidEnablePullUp>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	aa e7       	ldi	r26, 0x7A	; 122
     ec0:	b4 e4       	ldi	r27, 0x44	; 68
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	ab 83       	std	Y+3, r26	; 0x03
     ec8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	4a e7       	ldi	r20, 0x7A	; 122
     ed0:	55 e4       	ldi	r21, 0x45	; 69
     ed2:	69 81       	ldd	r22, Y+1	; 0x01
     ed4:	7a 81       	ldd	r23, Y+2	; 0x02
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	9c 81       	ldd	r25, Y+4	; 0x04
     eda:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	8d 83       	std	Y+5, r24	; 0x05
     ee4:	9e 83       	std	Y+6, r25	; 0x06
     ee6:	af 83       	std	Y+7, r26	; 0x07
     ee8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e8       	ldi	r20, 0x80	; 128
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	6d 81       	ldd	r22, Y+5	; 0x05
     ef4:	7e 81       	ldd	r23, Y+6	; 0x06
     ef6:	8f 81       	ldd	r24, Y+7	; 0x07
     ef8:	98 85       	ldd	r25, Y+8	; 0x08
     efa:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__cmpsf2>
     efe:	88 23       	and	r24, r24
     f00:	2c f4       	brge	.+10     	; 0xf0c <main+0xae>
		__ticks = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9a 87       	std	Y+10, r25	; 0x0a
     f08:	89 87       	std	Y+9, r24	; 0x09
     f0a:	3f c0       	rjmp	.+126    	; 0xf8a <main+0x12c>
	else if (__tmp > 65535)
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	57 e4       	ldi	r21, 0x47	; 71
     f14:	6d 81       	ldd	r22, Y+5	; 0x05
     f16:	7e 81       	ldd	r23, Y+6	; 0x06
     f18:	8f 81       	ldd	r24, Y+7	; 0x07
     f1a:	98 85       	ldd	r25, Y+8	; 0x08
     f1c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <__gesf2>
     f20:	18 16       	cp	r1, r24
     f22:	4c f5       	brge	.+82     	; 0xf76 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e2       	ldi	r20, 0x20	; 32
     f2a:	51 e4       	ldi	r21, 0x41	; 65
     f2c:	69 81       	ldd	r22, Y+1	; 0x01
     f2e:	7a 81       	ldd	r23, Y+2	; 0x02
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	9a 87       	std	Y+10, r25	; 0x0a
     f4a:	89 87       	std	Y+9, r24	; 0x09
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <main+0x10e>
     f4e:	80 e9       	ldi	r24, 0x90	; 144
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	9c 87       	std	Y+12, r25	; 0x0c
     f54:	8b 87       	std	Y+11, r24	; 0x0b
     f56:	8b 85       	ldd	r24, Y+11	; 0x0b
     f58:	9c 85       	ldd	r25, Y+12	; 0x0c
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <main+0xfc>
     f5e:	9c 87       	std	Y+12, r25	; 0x0c
     f60:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f62:	89 85       	ldd	r24, Y+9	; 0x09
     f64:	9a 85       	ldd	r25, Y+10	; 0x0a
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	9a 87       	std	Y+10, r25	; 0x0a
     f6a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	89 2b       	or	r24, r25
     f72:	69 f7       	brne	.-38     	; 0xf4e <main+0xf0>
     f74:	14 c0       	rjmp	.+40     	; 0xf9e <main+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f76:	6d 81       	ldd	r22, Y+5	; 0x05
     f78:	7e 81       	ldd	r23, Y+6	; 0x06
     f7a:	8f 81       	ldd	r24, Y+7	; 0x07
     f7c:	98 85       	ldd	r25, Y+8	; 0x08
     f7e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9a 87       	std	Y+10, r25	; 0x0a
     f88:	89 87       	std	Y+9, r24	; 0x09
     f8a:	89 85       	ldd	r24, Y+9	; 0x09
     f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8e:	9e 87       	std	Y+14, r25	; 0x0e
     f90:	8d 87       	std	Y+13, r24	; 0x0d
     f92:	8d 85       	ldd	r24, Y+13	; 0x0d
     f94:	9e 85       	ldd	r25, Y+14	; 0x0e
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <main+0x138>
     f9a:	9e 87       	std	Y+14, r25	; 0x0e
     f9c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1000);
	EXT_Init(int0 ,any_logic_change); 
     f9e:	63 e0       	ldi	r22, 0x03	; 3
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	0e 94 97 0a 	call	0x152e	; 0x152e <EXT_Init>
	sei();
     fa6:	78 94       	sei
	
	//SendStringThroughSpi("Hello\r\n\0");
	while(1)
	{		
		// Check Is_SPI_Request_Transmit To Serve it 
		if(Is_SPI_Request_Transmit == 1 )
     fa8:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <Is_SPI_Request_Transmit>
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	21 f4       	brne	.+8      	; 0xfb8 <main+0x15a>
		{
			// SPI Request to transmit Data 
			ReceiveStringThroughSpi(G_RX_Buffer);
     fb0:	8c ed       	ldi	r24, 0xDC	; 220
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 86 06 	call	0xd0c	; 0xd0c <ReceiveStringThroughSpi>
		}
		
		// Check if exist new msg on UART
		if(Exist_UART_Msg == 1)
     fb8:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Exist_UART_Msg>
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	a1 f7       	brne	.-24     	; 0xfa8 <main+0x14a>
		{
			// Transmit Buffer 
			SendStringThroughSpi(ReceievedFromUART);
     fc0:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <__data_end>
     fc4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__data_end+0x1>
     fc8:	0e 94 46 06 	call	0xc8c	; 0xc8c <SendStringThroughSpi>
			// Reset Flag
			Exist_UART_Msg = 0 ;
     fcc:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Exist_UART_Msg>
		}
	}
     fd0:	eb cf       	rjmp	.-42     	; 0xfa8 <main+0x14a>

00000fd2 <__vector_1>:
}

ISR(INT0_vect)
{
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	8f 93       	push	r24
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
	// Slave Request Transmit 
	Is_SPI_Request_Transmit = 1 ; 
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <Is_SPI_Request_Transmit>
	lcd_vidClrDislay();
	lcd_vidDisplyStr((u8*)"ISR"); 
	#endif
	
	
}
     fee:	00 00       	nop
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	8f 91       	pop	r24
     ff6:	0f 90       	pop	r0
     ff8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <ExchangeDataISR>:
void ExchangeDataISR(u8 ComingData)
{
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	1f 92       	push	r1
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	89 83       	std	Y+1, r24	; 0x01
	// Store Data
	SPI_ComingData = ComingData ; 
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <SPI_ComingData>
	// Set Data Exchange Variable
	SPI_DataExchangeHappens = 1 ; 
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <SPI_DataExchangeHappens>
	// For Debug 
	lcd_vidClrDislay();
	lcd_vidDisplyChar(  SPI_ComingData ) ;
	_delay_ms(200);
#endif
}
    101a:	00 00       	nop
    101c:	0f 90       	pop	r0
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <dio_vidConfigChannel>:
				break ;
			default : break;
		}
	}
	return LOC_u8PinValue; 
}
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	00 d0       	rcall	.+0      	; 0x102a <dio_vidConfigChannel+0x6>
    102a:	1f 92       	push	r1
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	6a 83       	std	Y+2, r22	; 0x02
    1034:	4b 83       	std	Y+3, r20	; 0x03
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <dio_vidConfigChannel+0x20>
    1042:	51 c0       	rjmp	.+162    	; 0x10e6 <dio_vidConfigChannel+0xc2>
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	91 05       	cpc	r25, r1
    1048:	1c f4       	brge	.+6      	; 0x1050 <dio_vidConfigChannel+0x2c>
    104a:	89 2b       	or	r24, r25
    104c:	49 f0       	breq	.+18     	; 0x1060 <dio_vidConfigChannel+0x3c>
    104e:	14 c1       	rjmp	.+552    	; 0x1278 <dio_vidConfigChannel+0x254>
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	91 05       	cpc	r25, r1
    1054:	09 f4       	brne	.+2      	; 0x1058 <dio_vidConfigChannel+0x34>
    1056:	8a c0       	rjmp	.+276    	; 0x116c <dio_vidConfigChannel+0x148>
    1058:	03 97       	sbiw	r24, 0x03	; 3
    105a:	09 f4       	brne	.+2      	; 0x105e <dio_vidConfigChannel+0x3a>
    105c:	ca c0       	rjmp	.+404    	; 0x11f2 <dio_vidConfigChannel+0x1ce>
    105e:	0c c1       	rjmp	.+536    	; 0x1278 <dio_vidConfigChannel+0x254>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	a9 f4       	brne	.+42     	; 0x1090 <dio_vidConfigChannel+0x6c>
    1066:	8a e3       	ldi	r24, 0x3A	; 58
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	2a e3       	ldi	r18, 0x3A	; 58
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	f9 01       	movw	r30, r18
    1070:	20 81       	ld	r18, Z
    1072:	62 2f       	mov	r22, r18
    1074:	2a 81       	ldd	r18, Y+2	; 0x02
    1076:	42 2f       	mov	r20, r18
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	21 e0       	ldi	r18, 0x01	; 1
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <dio_vidConfigChannel+0x60>
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	4a 95       	dec	r20
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <dio_vidConfigChannel+0x5c>
    1088:	26 2b       	or	r18, r22
    108a:	fc 01       	movw	r30, r24
    108c:	20 83       	st	Z, r18
    108e:	f4 c0       	rjmp	.+488    	; 0x1278 <dio_vidConfigChannel+0x254>
    1090:	8a e3       	ldi	r24, 0x3A	; 58
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	2a e3       	ldi	r18, 0x3A	; 58
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	f9 01       	movw	r30, r18
    109a:	20 81       	ld	r18, Z
    109c:	62 2f       	mov	r22, r18
    109e:	2a 81       	ldd	r18, Y+2	; 0x02
    10a0:	42 2f       	mov	r20, r18
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <dio_vidConfigChannel+0x8a>
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	4a 95       	dec	r20
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <dio_vidConfigChannel+0x86>
    10b2:	20 95       	com	r18
    10b4:	26 23       	and	r18, r22
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18
    10ba:	8b e3       	ldi	r24, 0x3B	; 59
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	2b e3       	ldi	r18, 0x3B	; 59
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	f9 01       	movw	r30, r18
    10c4:	20 81       	ld	r18, Z
    10c6:	62 2f       	mov	r22, r18
    10c8:	2a 81       	ldd	r18, Y+2	; 0x02
    10ca:	42 2f       	mov	r20, r18
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <dio_vidConfigChannel+0xb4>
    10d4:	22 0f       	add	r18, r18
    10d6:	33 1f       	adc	r19, r19
    10d8:	4a 95       	dec	r20
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <dio_vidConfigChannel+0xb0>
    10dc:	20 95       	com	r18
    10de:	26 23       	and	r18, r22
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
    10e4:	c9 c0       	rjmp	.+402    	; 0x1278 <dio_vidConfigChannel+0x254>
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	a9 f4       	brne	.+42     	; 0x1116 <dio_vidConfigChannel+0xf2>
    10ec:	87 e3       	ldi	r24, 0x37	; 55
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	27 e3       	ldi	r18, 0x37	; 55
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	f9 01       	movw	r30, r18
    10f6:	20 81       	ld	r18, Z
    10f8:	62 2f       	mov	r22, r18
    10fa:	2a 81       	ldd	r18, Y+2	; 0x02
    10fc:	42 2f       	mov	r20, r18
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <dio_vidConfigChannel+0xe6>
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	4a 95       	dec	r20
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <dio_vidConfigChannel+0xe2>
    110e:	26 2b       	or	r18, r22
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
    1114:	b1 c0       	rjmp	.+354    	; 0x1278 <dio_vidConfigChannel+0x254>
    1116:	87 e3       	ldi	r24, 0x37	; 55
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	27 e3       	ldi	r18, 0x37	; 55
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	f9 01       	movw	r30, r18
    1120:	20 81       	ld	r18, Z
    1122:	62 2f       	mov	r22, r18
    1124:	2a 81       	ldd	r18, Y+2	; 0x02
    1126:	42 2f       	mov	r20, r18
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	21 e0       	ldi	r18, 0x01	; 1
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <dio_vidConfigChannel+0x110>
    1130:	22 0f       	add	r18, r18
    1132:	33 1f       	adc	r19, r19
    1134:	4a 95       	dec	r20
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <dio_vidConfigChannel+0x10c>
    1138:	20 95       	com	r18
    113a:	26 23       	and	r18, r22
    113c:	fc 01       	movw	r30, r24
    113e:	20 83       	st	Z, r18
    1140:	88 e3       	ldi	r24, 0x38	; 56
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	28 e3       	ldi	r18, 0x38	; 56
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	f9 01       	movw	r30, r18
    114a:	20 81       	ld	r18, Z
    114c:	62 2f       	mov	r22, r18
    114e:	2a 81       	ldd	r18, Y+2	; 0x02
    1150:	42 2f       	mov	r20, r18
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	21 e0       	ldi	r18, 0x01	; 1
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	02 c0       	rjmp	.+4      	; 0x115e <dio_vidConfigChannel+0x13a>
    115a:	22 0f       	add	r18, r18
    115c:	33 1f       	adc	r19, r19
    115e:	4a 95       	dec	r20
    1160:	e2 f7       	brpl	.-8      	; 0x115a <dio_vidConfigChannel+0x136>
    1162:	20 95       	com	r18
    1164:	26 23       	and	r18, r22
    1166:	fc 01       	movw	r30, r24
    1168:	20 83       	st	Z, r18
    116a:	86 c0       	rjmp	.+268    	; 0x1278 <dio_vidConfigChannel+0x254>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	a9 f4       	brne	.+42     	; 0x119c <dio_vidConfigChannel+0x178>
    1172:	84 e3       	ldi	r24, 0x34	; 52
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	24 e3       	ldi	r18, 0x34	; 52
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	f9 01       	movw	r30, r18
    117c:	20 81       	ld	r18, Z
    117e:	62 2f       	mov	r22, r18
    1180:	2a 81       	ldd	r18, Y+2	; 0x02
    1182:	42 2f       	mov	r20, r18
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <dio_vidConfigChannel+0x16c>
    118c:	22 0f       	add	r18, r18
    118e:	33 1f       	adc	r19, r19
    1190:	4a 95       	dec	r20
    1192:	e2 f7       	brpl	.-8      	; 0x118c <dio_vidConfigChannel+0x168>
    1194:	26 2b       	or	r18, r22
    1196:	fc 01       	movw	r30, r24
    1198:	20 83       	st	Z, r18
    119a:	6e c0       	rjmp	.+220    	; 0x1278 <dio_vidConfigChannel+0x254>
    119c:	84 e3       	ldi	r24, 0x34	; 52
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	24 e3       	ldi	r18, 0x34	; 52
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	f9 01       	movw	r30, r18
    11a6:	20 81       	ld	r18, Z
    11a8:	62 2f       	mov	r22, r18
    11aa:	2a 81       	ldd	r18, Y+2	; 0x02
    11ac:	42 2f       	mov	r20, r18
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	21 e0       	ldi	r18, 0x01	; 1
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <dio_vidConfigChannel+0x196>
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	4a 95       	dec	r20
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <dio_vidConfigChannel+0x192>
    11be:	20 95       	com	r18
    11c0:	26 23       	and	r18, r22
    11c2:	fc 01       	movw	r30, r24
    11c4:	20 83       	st	Z, r18
    11c6:	85 e3       	ldi	r24, 0x35	; 53
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	25 e3       	ldi	r18, 0x35	; 53
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	f9 01       	movw	r30, r18
    11d0:	20 81       	ld	r18, Z
    11d2:	62 2f       	mov	r22, r18
    11d4:	2a 81       	ldd	r18, Y+2	; 0x02
    11d6:	42 2f       	mov	r20, r18
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	21 e0       	ldi	r18, 0x01	; 1
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <dio_vidConfigChannel+0x1c0>
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	4a 95       	dec	r20
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <dio_vidConfigChannel+0x1bc>
    11e8:	20 95       	com	r18
    11ea:	26 23       	and	r18, r22
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
    11f0:	43 c0       	rjmp	.+134    	; 0x1278 <dio_vidConfigChannel+0x254>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	a9 f4       	brne	.+42     	; 0x1222 <dio_vidConfigChannel+0x1fe>
    11f8:	81 e3       	ldi	r24, 0x31	; 49
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	21 e3       	ldi	r18, 0x31	; 49
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	f9 01       	movw	r30, r18
    1202:	20 81       	ld	r18, Z
    1204:	62 2f       	mov	r22, r18
    1206:	2a 81       	ldd	r18, Y+2	; 0x02
    1208:	42 2f       	mov	r20, r18
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <dio_vidConfigChannel+0x1f2>
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	4a 95       	dec	r20
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <dio_vidConfigChannel+0x1ee>
    121a:	26 2b       	or	r18, r22
    121c:	fc 01       	movw	r30, r24
    121e:	20 83       	st	Z, r18
    1220:	2a c0       	rjmp	.+84     	; 0x1276 <dio_vidConfigChannel+0x252>
    1222:	81 e3       	ldi	r24, 0x31	; 49
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	21 e3       	ldi	r18, 0x31	; 49
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	f9 01       	movw	r30, r18
    122c:	20 81       	ld	r18, Z
    122e:	62 2f       	mov	r22, r18
    1230:	2a 81       	ldd	r18, Y+2	; 0x02
    1232:	42 2f       	mov	r20, r18
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <dio_vidConfigChannel+0x21c>
    123c:	22 0f       	add	r18, r18
    123e:	33 1f       	adc	r19, r19
    1240:	4a 95       	dec	r20
    1242:	e2 f7       	brpl	.-8      	; 0x123c <dio_vidConfigChannel+0x218>
    1244:	20 95       	com	r18
    1246:	26 23       	and	r18, r22
    1248:	fc 01       	movw	r30, r24
    124a:	20 83       	st	Z, r18
    124c:	82 e3       	ldi	r24, 0x32	; 50
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	22 e3       	ldi	r18, 0x32	; 50
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	f9 01       	movw	r30, r18
    1256:	20 81       	ld	r18, Z
    1258:	62 2f       	mov	r22, r18
    125a:	2a 81       	ldd	r18, Y+2	; 0x02
    125c:	42 2f       	mov	r20, r18
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <dio_vidConfigChannel+0x246>
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	4a 95       	dec	r20
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <dio_vidConfigChannel+0x242>
    126e:	20 95       	com	r18
    1270:	26 23       	and	r18, r22
    1272:	fc 01       	movw	r30, r24
    1274:	20 83       	st	Z, r18
    1276:	00 00       	nop
    1278:	00 00       	nop
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <dio_vidWriteChannel>:
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	00 d0       	rcall	.+0      	; 0x128c <dio_vidWriteChannel+0x6>
    128c:	1f 92       	push	r1
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	6a 83       	std	Y+2, r22	; 0x02
    1296:	4b 83       	std	Y+3, r20	; 0x03
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	e1 f1       	breq	.+120    	; 0x131c <dio_vidWriteChannel+0x96>
    12a4:	82 30       	cpi	r24, 0x02	; 2
    12a6:	91 05       	cpc	r25, r1
    12a8:	1c f4       	brge	.+6      	; 0x12b0 <dio_vidWriteChannel+0x2a>
    12aa:	89 2b       	or	r24, r25
    12ac:	49 f0       	breq	.+18     	; 0x12c0 <dio_vidWriteChannel+0x3a>
    12ae:	c0 c0       	rjmp	.+384    	; 0x1430 <dio_vidWriteChannel+0x1aa>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	91 05       	cpc	r25, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <dio_vidWriteChannel+0x32>
    12b6:	60 c0       	rjmp	.+192    	; 0x1378 <dio_vidWriteChannel+0xf2>
    12b8:	03 97       	sbiw	r24, 0x03	; 3
    12ba:	09 f4       	brne	.+2      	; 0x12be <dio_vidWriteChannel+0x38>
    12bc:	8b c0       	rjmp	.+278    	; 0x13d4 <dio_vidWriteChannel+0x14e>
    12be:	b8 c0       	rjmp	.+368    	; 0x1430 <dio_vidWriteChannel+0x1aa>
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	88 23       	and	r24, r24
    12c4:	b1 f4       	brne	.+44     	; 0x12f2 <dio_vidWriteChannel+0x6c>
    12c6:	8b e3       	ldi	r24, 0x3B	; 59
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	2b e3       	ldi	r18, 0x3B	; 59
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	f9 01       	movw	r30, r18
    12d0:	20 81       	ld	r18, Z
    12d2:	62 2f       	mov	r22, r18
    12d4:	2a 81       	ldd	r18, Y+2	; 0x02
    12d6:	42 2f       	mov	r20, r18
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <dio_vidWriteChannel+0x5e>
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	4a 95       	dec	r20
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <dio_vidWriteChannel+0x5a>
    12e8:	20 95       	com	r18
    12ea:	26 23       	and	r18, r22
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
    12f0:	9f c0       	rjmp	.+318    	; 0x1430 <dio_vidWriteChannel+0x1aa>
    12f2:	8b e3       	ldi	r24, 0x3B	; 59
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	2b e3       	ldi	r18, 0x3B	; 59
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	f9 01       	movw	r30, r18
    12fc:	20 81       	ld	r18, Z
    12fe:	62 2f       	mov	r22, r18
    1300:	2a 81       	ldd	r18, Y+2	; 0x02
    1302:	42 2f       	mov	r20, r18
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <dio_vidWriteChannel+0x8a>
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	4a 95       	dec	r20
    1312:	e2 f7       	brpl	.-8      	; 0x130c <dio_vidWriteChannel+0x86>
    1314:	26 2b       	or	r18, r22
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
    131a:	8a c0       	rjmp	.+276    	; 0x1430 <dio_vidWriteChannel+0x1aa>
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	88 23       	and	r24, r24
    1320:	b1 f4       	brne	.+44     	; 0x134e <dio_vidWriteChannel+0xc8>
    1322:	88 e3       	ldi	r24, 0x38	; 56
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	28 e3       	ldi	r18, 0x38	; 56
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	f9 01       	movw	r30, r18
    132c:	20 81       	ld	r18, Z
    132e:	62 2f       	mov	r22, r18
    1330:	2a 81       	ldd	r18, Y+2	; 0x02
    1332:	42 2f       	mov	r20, r18
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	21 e0       	ldi	r18, 0x01	; 1
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <dio_vidWriteChannel+0xba>
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	4a 95       	dec	r20
    1342:	e2 f7       	brpl	.-8      	; 0x133c <dio_vidWriteChannel+0xb6>
    1344:	20 95       	com	r18
    1346:	26 23       	and	r18, r22
    1348:	fc 01       	movw	r30, r24
    134a:	20 83       	st	Z, r18
    134c:	71 c0       	rjmp	.+226    	; 0x1430 <dio_vidWriteChannel+0x1aa>
    134e:	88 e3       	ldi	r24, 0x38	; 56
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	28 e3       	ldi	r18, 0x38	; 56
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	f9 01       	movw	r30, r18
    1358:	20 81       	ld	r18, Z
    135a:	62 2f       	mov	r22, r18
    135c:	2a 81       	ldd	r18, Y+2	; 0x02
    135e:	42 2f       	mov	r20, r18
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	02 c0       	rjmp	.+4      	; 0x136c <dio_vidWriteChannel+0xe6>
    1368:	22 0f       	add	r18, r18
    136a:	33 1f       	adc	r19, r19
    136c:	4a 95       	dec	r20
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <dio_vidWriteChannel+0xe2>
    1370:	26 2b       	or	r18, r22
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
    1376:	5c c0       	rjmp	.+184    	; 0x1430 <dio_vidWriteChannel+0x1aa>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	88 23       	and	r24, r24
    137c:	b1 f4       	brne	.+44     	; 0x13aa <dio_vidWriteChannel+0x124>
    137e:	85 e3       	ldi	r24, 0x35	; 53
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	25 e3       	ldi	r18, 0x35	; 53
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	f9 01       	movw	r30, r18
    1388:	20 81       	ld	r18, Z
    138a:	62 2f       	mov	r22, r18
    138c:	2a 81       	ldd	r18, Y+2	; 0x02
    138e:	42 2f       	mov	r20, r18
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	21 e0       	ldi	r18, 0x01	; 1
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	02 c0       	rjmp	.+4      	; 0x139c <dio_vidWriteChannel+0x116>
    1398:	22 0f       	add	r18, r18
    139a:	33 1f       	adc	r19, r19
    139c:	4a 95       	dec	r20
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <dio_vidWriteChannel+0x112>
    13a0:	20 95       	com	r18
    13a2:	26 23       	and	r18, r22
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
    13a8:	43 c0       	rjmp	.+134    	; 0x1430 <dio_vidWriteChannel+0x1aa>
    13aa:	85 e3       	ldi	r24, 0x35	; 53
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	25 e3       	ldi	r18, 0x35	; 53
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	f9 01       	movw	r30, r18
    13b4:	20 81       	ld	r18, Z
    13b6:	62 2f       	mov	r22, r18
    13b8:	2a 81       	ldd	r18, Y+2	; 0x02
    13ba:	42 2f       	mov	r20, r18
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <dio_vidWriteChannel+0x142>
    13c4:	22 0f       	add	r18, r18
    13c6:	33 1f       	adc	r19, r19
    13c8:	4a 95       	dec	r20
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <dio_vidWriteChannel+0x13e>
    13cc:	26 2b       	or	r18, r22
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18
    13d2:	2e c0       	rjmp	.+92     	; 0x1430 <dio_vidWriteChannel+0x1aa>
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	88 23       	and	r24, r24
    13d8:	b1 f4       	brne	.+44     	; 0x1406 <dio_vidWriteChannel+0x180>
    13da:	82 e3       	ldi	r24, 0x32	; 50
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	22 e3       	ldi	r18, 0x32	; 50
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	f9 01       	movw	r30, r18
    13e4:	20 81       	ld	r18, Z
    13e6:	62 2f       	mov	r22, r18
    13e8:	2a 81       	ldd	r18, Y+2	; 0x02
    13ea:	42 2f       	mov	r20, r18
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	21 e0       	ldi	r18, 0x01	; 1
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <dio_vidWriteChannel+0x172>
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	4a 95       	dec	r20
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <dio_vidWriteChannel+0x16e>
    13fc:	20 95       	com	r18
    13fe:	26 23       	and	r18, r22
    1400:	fc 01       	movw	r30, r24
    1402:	20 83       	st	Z, r18
    1404:	14 c0       	rjmp	.+40     	; 0x142e <dio_vidWriteChannel+0x1a8>
    1406:	82 e3       	ldi	r24, 0x32	; 50
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	22 e3       	ldi	r18, 0x32	; 50
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	f9 01       	movw	r30, r18
    1410:	20 81       	ld	r18, Z
    1412:	62 2f       	mov	r22, r18
    1414:	2a 81       	ldd	r18, Y+2	; 0x02
    1416:	42 2f       	mov	r20, r18
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	21 e0       	ldi	r18, 0x01	; 1
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <dio_vidWriteChannel+0x19e>
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	4a 95       	dec	r20
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <dio_vidWriteChannel+0x19a>
    1428:	26 2b       	or	r18, r22
    142a:	fc 01       	movw	r30, r24
    142c:	20 83       	st	Z, r18
    142e:	00 00       	nop
    1430:	00 00       	nop
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <dio_vidEnablePullUp>:
* \Parameters (in) : port  -> MC port ID
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	00 d0       	rcall	.+0      	; 0x1444 <dio_vidEnablePullUp+0x6>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	6a 83       	std	Y+2, r22	; 0x02
	/*	show me your code */
	// Check Input Range
	if(channel >= DIO_PIN0 && channel <= DIO_PIN7)
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	88 30       	cpi	r24, 0x08	; 8
    1450:	08 f0       	brcs	.+2      	; 0x1454 <dio_vidEnablePullUp+0x16>
    1452:	67 c0       	rjmp	.+206    	; 0x1522 <dio_vidEnablePullUp+0xe4>
	{
		switch(port)
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	88 2f       	mov	r24, r24
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	11 f1       	breq	.+68     	; 0x14a4 <dio_vidEnablePullUp+0x66>
    1460:	82 30       	cpi	r24, 0x02	; 2
    1462:	91 05       	cpc	r25, r1
    1464:	1c f4       	brge	.+6      	; 0x146c <dio_vidEnablePullUp+0x2e>
    1466:	89 2b       	or	r24, r25
    1468:	41 f0       	breq	.+16     	; 0x147a <dio_vidEnablePullUp+0x3c>
				SET_BIT (DIO_PORTC_REG,channel);
				break ;
			case DIO_PORTD :
				SET_BIT (DIO_PORTD_REG,channel);
				break ;
			default : break;
    146a:	5b c0       	rjmp	.+182    	; 0x1522 <dio_vidEnablePullUp+0xe4>
{
	/*	show me your code */
	// Check Input Range
	if(channel >= DIO_PIN0 && channel <= DIO_PIN7)
	{
		switch(port)
    146c:	82 30       	cpi	r24, 0x02	; 2
    146e:	91 05       	cpc	r25, r1
    1470:	71 f1       	breq	.+92     	; 0x14ce <dio_vidEnablePullUp+0x90>
    1472:	03 97       	sbiw	r24, 0x03	; 3
    1474:	09 f4       	brne	.+2      	; 0x1478 <dio_vidEnablePullUp+0x3a>
    1476:	40 c0       	rjmp	.+128    	; 0x14f8 <dio_vidEnablePullUp+0xba>
				SET_BIT (DIO_PORTC_REG,channel);
				break ;
			case DIO_PORTD :
				SET_BIT (DIO_PORTD_REG,channel);
				break ;
			default : break;
    1478:	54 c0       	rjmp	.+168    	; 0x1522 <dio_vidEnablePullUp+0xe4>
	{
		switch(port)
		{
			case DIO_PORTA :
					/* SET PORTxn	*/
					SET_BIT (DIO_PORTA_REG,channel);
    147a:	8b e3       	ldi	r24, 0x3B	; 59
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	2b e3       	ldi	r18, 0x3B	; 59
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	f9 01       	movw	r30, r18
    1484:	20 81       	ld	r18, Z
    1486:	62 2f       	mov	r22, r18
    1488:	2a 81       	ldd	r18, Y+2	; 0x02
    148a:	42 2f       	mov	r20, r18
    148c:	50 e0       	ldi	r21, 0x00	; 0
    148e:	21 e0       	ldi	r18, 0x01	; 1
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <dio_vidEnablePullUp+0x5a>
    1494:	22 0f       	add	r18, r18
    1496:	33 1f       	adc	r19, r19
    1498:	4a 95       	dec	r20
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <dio_vidEnablePullUp+0x56>
    149c:	26 2b       	or	r18, r22
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18
				break ;
    14a2:	3f c0       	rjmp	.+126    	; 0x1522 <dio_vidEnablePullUp+0xe4>
			case DIO_PORTB : 
				SET_BIT (DIO_PORTB_REG,channel);
    14a4:	88 e3       	ldi	r24, 0x38	; 56
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	28 e3       	ldi	r18, 0x38	; 56
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	f9 01       	movw	r30, r18
    14ae:	20 81       	ld	r18, Z
    14b0:	62 2f       	mov	r22, r18
    14b2:	2a 81       	ldd	r18, Y+2	; 0x02
    14b4:	42 2f       	mov	r20, r18
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <dio_vidEnablePullUp+0x84>
    14be:	22 0f       	add	r18, r18
    14c0:	33 1f       	adc	r19, r19
    14c2:	4a 95       	dec	r20
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <dio_vidEnablePullUp+0x80>
    14c6:	26 2b       	or	r18, r22
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
				break ;
    14cc:	2a c0       	rjmp	.+84     	; 0x1522 <dio_vidEnablePullUp+0xe4>
			case DIO_PORTC :
				SET_BIT (DIO_PORTC_REG,channel);
    14ce:	85 e3       	ldi	r24, 0x35	; 53
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	25 e3       	ldi	r18, 0x35	; 53
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	f9 01       	movw	r30, r18
    14d8:	20 81       	ld	r18, Z
    14da:	62 2f       	mov	r22, r18
    14dc:	2a 81       	ldd	r18, Y+2	; 0x02
    14de:	42 2f       	mov	r20, r18
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <dio_vidEnablePullUp+0xae>
    14e8:	22 0f       	add	r18, r18
    14ea:	33 1f       	adc	r19, r19
    14ec:	4a 95       	dec	r20
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <dio_vidEnablePullUp+0xaa>
    14f0:	26 2b       	or	r18, r22
    14f2:	fc 01       	movw	r30, r24
    14f4:	20 83       	st	Z, r18
				break ;
    14f6:	15 c0       	rjmp	.+42     	; 0x1522 <dio_vidEnablePullUp+0xe4>
			case DIO_PORTD :
				SET_BIT (DIO_PORTD_REG,channel);
    14f8:	82 e3       	ldi	r24, 0x32	; 50
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	22 e3       	ldi	r18, 0x32	; 50
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	f9 01       	movw	r30, r18
    1502:	20 81       	ld	r18, Z
    1504:	62 2f       	mov	r22, r18
    1506:	2a 81       	ldd	r18, Y+2	; 0x02
    1508:	42 2f       	mov	r20, r18
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	21 e0       	ldi	r18, 0x01	; 1
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <dio_vidEnablePullUp+0xd8>
    1512:	22 0f       	add	r18, r18
    1514:	33 1f       	adc	r19, r19
    1516:	4a 95       	dec	r20
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <dio_vidEnablePullUp+0xd4>
    151a:	26 2b       	or	r18, r22
    151c:	fc 01       	movw	r30, r24
    151e:	20 83       	st	Z, r18
				break ;
    1520:	00 00       	nop
			default : break;
		}
	}	
}
    1522:	00 00       	nop
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	08 95       	ret

0000152e <EXT_Init>:
 ***************************************************/
#include "exti.h"


void EXT_Init(interrupt_source copy_interruptNumber ,event_state copy_InterruptState)
{
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	00 d0       	rcall	.+0      	; 0x1534 <EXT_Init+0x6>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_interruptNumber)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <EXT_Init+0x1c>
    1548:	68 c0       	rjmp	.+208    	; 0x161a <EXT_Init+0xec>
    154a:	82 30       	cpi	r24, 0x02	; 2
    154c:	91 05       	cpc	r25, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <EXT_Init+0x24>
    1550:	c5 c0       	rjmp	.+394    	; 0x16dc <EXT_Init+0x1ae>
    1552:	89 2b       	or	r24, r25
    1554:	09 f0       	breq	.+2      	; 0x1558 <EXT_Init+0x2a>
			/*		ENABLE INT2		*/
			SET_BIT(EXTINT_GICR,GICR_INT2);
		}
		break;
		default:
		break ; 
    1556:	e5 c0       	rjmp	.+458    	; 0x1722 <EXT_Init+0x1f4>
{
	switch(copy_interruptNumber)
	{
		case int0:
		{
			if(copy_InterruptState == falling   )
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	88 23       	and	r24, r24
    155c:	99 f4       	brne	.+38     	; 0x1584 <EXT_Init+0x56>
			{
				/*	CLEAR ISC00 AND SET ISC01 IN MCUCR	*/
				CLEAR_BIT(EXTINT_MCUCR,MCUCR_ISC00);
    155e:	85 e5       	ldi	r24, 0x55	; 85
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	25 e5       	ldi	r18, 0x55	; 85
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	f9 01       	movw	r30, r18
    1568:	20 81       	ld	r18, Z
    156a:	2e 7f       	andi	r18, 0xFE	; 254
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
				SET_BIT(EXTINT_MCUCR,MCUCR_ISC01);
    1570:	85 e5       	ldi	r24, 0x55	; 85
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	25 e5       	ldi	r18, 0x55	; 85
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	f9 01       	movw	r30, r18
    157a:	20 81       	ld	r18, Z
    157c:	22 60       	ori	r18, 0x02	; 2
    157e:	fc 01       	movw	r30, r24
    1580:	20 83       	st	Z, r18
    1582:	41 c0       	rjmp	.+130    	; 0x1606 <EXT_Init+0xd8>
			}
			else if(copy_InterruptState ==  rising )
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	99 f4       	brne	.+38     	; 0x15b0 <EXT_Init+0x82>
			{
				/*	SER ISC00 AND ISC01 IN MCUCR	*/
				SET_BIT(EXTINT_MCUCR,MCUCR_ISC00);
    158a:	85 e5       	ldi	r24, 0x55	; 85
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	25 e5       	ldi	r18, 0x55	; 85
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	f9 01       	movw	r30, r18
    1594:	20 81       	ld	r18, Z
    1596:	21 60       	ori	r18, 0x01	; 1
    1598:	fc 01       	movw	r30, r24
    159a:	20 83       	st	Z, r18
				SET_BIT(EXTINT_MCUCR,MCUCR_ISC01);
    159c:	85 e5       	ldi	r24, 0x55	; 85
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	25 e5       	ldi	r18, 0x55	; 85
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	f9 01       	movw	r30, r18
    15a6:	20 81       	ld	r18, Z
    15a8:	22 60       	ori	r18, 0x02	; 2
    15aa:	fc 01       	movw	r30, r24
    15ac:	20 83       	st	Z, r18
    15ae:	2b c0       	rjmp	.+86     	; 0x1606 <EXT_Init+0xd8>
			}
			else if(copy_InterruptState == low)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	99 f4       	brne	.+38     	; 0x15dc <EXT_Init+0xae>
			{
				/*	CLEAR ISC00 AND ISC01 IN MCUCR	*/
				CLEAR_BIT(EXTINT_MCUCR,MCUCR_ISC00);
    15b6:	85 e5       	ldi	r24, 0x55	; 85
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	25 e5       	ldi	r18, 0x55	; 85
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	f9 01       	movw	r30, r18
    15c0:	20 81       	ld	r18, Z
    15c2:	2e 7f       	andi	r18, 0xFE	; 254
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
				CLEAR_BIT(EXTINT_MCUCR,MCUCR_ISC01);
    15c8:	85 e5       	ldi	r24, 0x55	; 85
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	25 e5       	ldi	r18, 0x55	; 85
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	f9 01       	movw	r30, r18
    15d2:	20 81       	ld	r18, Z
    15d4:	2d 7f       	andi	r18, 0xFD	; 253
    15d6:	fc 01       	movw	r30, r24
    15d8:	20 83       	st	Z, r18
    15da:	15 c0       	rjmp	.+42     	; 0x1606 <EXT_Init+0xd8>
			}
			else if(copy_InterruptState == any_logic_change)
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	83 30       	cpi	r24, 0x03	; 3
    15e0:	91 f4       	brne	.+36     	; 0x1606 <EXT_Init+0xd8>
			{
				/*	SET ISC00 AND CLEAR ISC01 IN MCUCR	*/
				CLEAR_BIT(EXTINT_MCUCR,MCUCR_ISC01);
    15e2:	85 e5       	ldi	r24, 0x55	; 85
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	25 e5       	ldi	r18, 0x55	; 85
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	f9 01       	movw	r30, r18
    15ec:	20 81       	ld	r18, Z
    15ee:	2d 7f       	andi	r18, 0xFD	; 253
    15f0:	fc 01       	movw	r30, r24
    15f2:	20 83       	st	Z, r18
				SET_BIT(EXTINT_MCUCR,MCUCR_ISC00);
    15f4:	85 e5       	ldi	r24, 0x55	; 85
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	25 e5       	ldi	r18, 0x55	; 85
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	f9 01       	movw	r30, r18
    15fe:	20 81       	ld	r18, Z
    1600:	21 60       	ori	r18, 0x01	; 1
    1602:	fc 01       	movw	r30, r24
    1604:	20 83       	st	Z, r18
				
				// Todo Error
			}
			
			/*		ENABLE INT0		*/
			SET_BIT(EXTINT_GICR,GICR_INT0);
    1606:	8b e5       	ldi	r24, 0x5B	; 91
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	2b e5       	ldi	r18, 0x5B	; 91
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	f9 01       	movw	r30, r18
    1610:	20 81       	ld	r18, Z
    1612:	20 64       	ori	r18, 0x40	; 64
    1614:	fc 01       	movw	r30, r24
    1616:	20 83       	st	Z, r18
		}
		break; 
    1618:	84 c0       	rjmp	.+264    	; 0x1722 <EXT_Init+0x1f4>
		case int1:
		{
			if(copy_InterruptState == falling   )
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	88 23       	and	r24, r24
    161e:	99 f4       	brne	.+38     	; 0x1646 <EXT_Init+0x118>
			{
				/*	CLEAR ISC00 AND SET ISC01 IN MCUCR	*/
				CLEAR_BIT(EXTINT_MCUCR,MCUCR_ISC10);
    1620:	85 e5       	ldi	r24, 0x55	; 85
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	25 e5       	ldi	r18, 0x55	; 85
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	f9 01       	movw	r30, r18
    162a:	20 81       	ld	r18, Z
    162c:	2b 7f       	andi	r18, 0xFB	; 251
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
				SET_BIT(EXTINT_MCUCR,MCUCR_ISC11);
    1632:	85 e5       	ldi	r24, 0x55	; 85
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	25 e5       	ldi	r18, 0x55	; 85
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	f9 01       	movw	r30, r18
    163c:	20 81       	ld	r18, Z
    163e:	28 60       	ori	r18, 0x08	; 8
    1640:	fc 01       	movw	r30, r24
    1642:	20 83       	st	Z, r18
    1644:	41 c0       	rjmp	.+130    	; 0x16c8 <EXT_Init+0x19a>
			}
			else if(copy_InterruptState ==  rising )
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	99 f4       	brne	.+38     	; 0x1672 <EXT_Init+0x144>
			{
				/*	SER ISC00 AND ISC01 IN MCUCR	*/
				SET_BIT(EXTINT_MCUCR,MCUCR_ISC10);
    164c:	85 e5       	ldi	r24, 0x55	; 85
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	25 e5       	ldi	r18, 0x55	; 85
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	f9 01       	movw	r30, r18
    1656:	20 81       	ld	r18, Z
    1658:	24 60       	ori	r18, 0x04	; 4
    165a:	fc 01       	movw	r30, r24
    165c:	20 83       	st	Z, r18
				SET_BIT(EXTINT_MCUCR,MCUCR_ISC11);
    165e:	85 e5       	ldi	r24, 0x55	; 85
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	25 e5       	ldi	r18, 0x55	; 85
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	f9 01       	movw	r30, r18
    1668:	20 81       	ld	r18, Z
    166a:	28 60       	ori	r18, 0x08	; 8
    166c:	fc 01       	movw	r30, r24
    166e:	20 83       	st	Z, r18
    1670:	2b c0       	rjmp	.+86     	; 0x16c8 <EXT_Init+0x19a>
			}
			else if(copy_InterruptState == low)
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	99 f4       	brne	.+38     	; 0x169e <EXT_Init+0x170>
			{
				/*	CLEAR ISC00 AND ISC01 IN MCUCR	*/
				CLEAR_BIT(EXTINT_MCUCR,MCUCR_ISC10);
    1678:	85 e5       	ldi	r24, 0x55	; 85
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	25 e5       	ldi	r18, 0x55	; 85
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	f9 01       	movw	r30, r18
    1682:	20 81       	ld	r18, Z
    1684:	2b 7f       	andi	r18, 0xFB	; 251
    1686:	fc 01       	movw	r30, r24
    1688:	20 83       	st	Z, r18
				CLEAR_BIT(EXTINT_MCUCR,MCUCR_ISC11);
    168a:	85 e5       	ldi	r24, 0x55	; 85
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	25 e5       	ldi	r18, 0x55	; 85
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	f9 01       	movw	r30, r18
    1694:	20 81       	ld	r18, Z
    1696:	27 7f       	andi	r18, 0xF7	; 247
    1698:	fc 01       	movw	r30, r24
    169a:	20 83       	st	Z, r18
    169c:	15 c0       	rjmp	.+42     	; 0x16c8 <EXT_Init+0x19a>
			}
			else if(copy_InterruptState == any_logic_change)
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	83 30       	cpi	r24, 0x03	; 3
    16a2:	91 f4       	brne	.+36     	; 0x16c8 <EXT_Init+0x19a>
			{
				/*	SET ISC00 AND CLEAR ISC01 IN MCUCR	*/
				CLEAR_BIT(EXTINT_MCUCR,MCUCR_ISC11);
    16a4:	85 e5       	ldi	r24, 0x55	; 85
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	25 e5       	ldi	r18, 0x55	; 85
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	f9 01       	movw	r30, r18
    16ae:	20 81       	ld	r18, Z
    16b0:	27 7f       	andi	r18, 0xF7	; 247
    16b2:	fc 01       	movw	r30, r24
    16b4:	20 83       	st	Z, r18
				SET_BIT(EXTINT_MCUCR,MCUCR_ISC10);
    16b6:	85 e5       	ldi	r24, 0x55	; 85
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	25 e5       	ldi	r18, 0x55	; 85
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	f9 01       	movw	r30, r18
    16c0:	20 81       	ld	r18, Z
    16c2:	24 60       	ori	r18, 0x04	; 4
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
			{
				
				// Todo Error
			}
			/*		ENABLE INT1 	*/
			SET_BIT(EXTINT_GICR,GICR_INT1);
    16c8:	8b e5       	ldi	r24, 0x5B	; 91
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	2b e5       	ldi	r18, 0x5B	; 91
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	f9 01       	movw	r30, r18
    16d2:	20 81       	ld	r18, Z
    16d4:	20 68       	ori	r18, 0x80	; 128
    16d6:	fc 01       	movw	r30, r24
    16d8:	20 83       	st	Z, r18
		}
		break;
    16da:	23 c0       	rjmp	.+70     	; 0x1722 <EXT_Init+0x1f4>
		case int2:
		{
			if(copy_InterruptState == falling   )
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	88 23       	and	r24, r24
    16e0:	51 f4       	brne	.+20     	; 0x16f6 <EXT_Init+0x1c8>
			{
				/*	CLEAR ISC2 IN MCUCSR	*/
				CLEAR_BIT(EXTINT_MCUCSR,MCUCSR_ISC2);
    16e2:	84 e5       	ldi	r24, 0x54	; 84
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	24 e5       	ldi	r18, 0x54	; 84
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	f9 01       	movw	r30, r18
    16ec:	20 81       	ld	r18, Z
    16ee:	2f 7b       	andi	r18, 0xBF	; 191
    16f0:	fc 01       	movw	r30, r24
    16f2:	20 83       	st	Z, r18
    16f4:	0c c0       	rjmp	.+24     	; 0x170e <EXT_Init+0x1e0>
			}
			else if(copy_InterruptState ==  rising )
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	49 f4       	brne	.+18     	; 0x170e <EXT_Init+0x1e0>
			{
				/*	SET ISC2 IN MCUCSR	*/
				SET_BIT(EXTINT_MCUCSR,MCUCSR_ISC2);
    16fc:	84 e5       	ldi	r24, 0x54	; 84
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	24 e5       	ldi	r18, 0x54	; 84
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	f9 01       	movw	r30, r18
    1706:	20 81       	ld	r18, Z
    1708:	20 64       	ori	r18, 0x40	; 64
    170a:	fc 01       	movw	r30, r24
    170c:	20 83       	st	Z, r18
				//copy_InterruptState == low | any_logic_change Not Supported 
				// Todo Error

			}
			/*		ENABLE INT2		*/
			SET_BIT(EXTINT_GICR,GICR_INT2);
    170e:	8b e5       	ldi	r24, 0x5B	; 91
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	2b e5       	ldi	r18, 0x5B	; 91
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	f9 01       	movw	r30, r18
    1718:	20 81       	ld	r18, Z
    171a:	20 62       	ori	r18, 0x20	; 32
    171c:	fc 01       	movw	r30, r24
    171e:	20 83       	st	Z, r18
		}
		break;
    1720:	00 00       	nop
		default:
		break ; 
	}
}
    1722:	00 00       	nop
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <spi_masterInit>:
}

void spi_SlaveSendByte(u8 data)
{
	SPI_SPDR_REG = data;
}
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	00 d0       	rcall	.+0      	; 0x1734 <spi_masterInit+0x6>
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	65 e0       	ldi	r22, 0x05	; 5
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	64 e0       	ldi	r22, 0x04	; 4
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
    1750:	41 e0       	ldi	r20, 0x01	; 1
    1752:	67 e0       	ldi	r22, 0x07	; 7
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	66 e0       	ldi	r22, 0x06	; 6
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	0e 94 12 08 	call	0x1024	; 0x1024 <dio_vidConfigChannel>
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	64 e0       	ldi	r22, 0x04	; 4
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	0e 94 43 09 	call	0x1286	; 0x1286 <dio_vidWriteChannel>
    176e:	8d e2       	ldi	r24, 0x2D	; 45
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	2d e2       	ldi	r18, 0x2D	; 45
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	f9 01       	movw	r30, r18
    1778:	20 81       	ld	r18, Z
    177a:	20 64       	ori	r18, 0x40	; 64
    177c:	fc 01       	movw	r30, r24
    177e:	20 83       	st	Z, r18
    1780:	8d e2       	ldi	r24, 0x2D	; 45
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	2d e2       	ldi	r18, 0x2D	; 45
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	f9 01       	movw	r30, r18
    178a:	20 81       	ld	r18, Z
    178c:	20 61       	ori	r18, 0x10	; 16
    178e:	fc 01       	movw	r30, r24
    1790:	20 83       	st	Z, r18
    1792:	8d e2       	ldi	r24, 0x2D	; 45
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	2d e2       	ldi	r18, 0x2D	; 45
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	f9 01       	movw	r30, r18
    179c:	20 81       	ld	r18, Z
    179e:	21 60       	ori	r18, 0x01	; 1
    17a0:	fc 01       	movw	r30, r24
    17a2:	20 83       	st	Z, r18
    17a4:	8d e2       	ldi	r24, 0x2D	; 45
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	2d e2       	ldi	r18, 0x2D	; 45
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	f9 01       	movw	r30, r18
    17ae:	20 81       	ld	r18, Z
    17b0:	20 68       	ori	r18, 0x80	; 128
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ba:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <ExchangeInterrupt+0x1>
    17be:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <ExchangeInterrupt>
    17c2:	00 00       	nop
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <spi_masterSendByteUsingIRQ>:
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	1f 92       	push	r1
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	8f e2       	ldi	r24, 0x2F	; 47
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	29 81       	ldd	r18, Y+1	; 0x01
    17e0:	fc 01       	movw	r30, r24
    17e2:	20 83       	st	Z, r18
    17e4:	00 00       	nop
    17e6:	0f 90       	pop	r0
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <spi_masterReceiveByteUsingIRQ>:
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	1f 92       	push	r1
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	8f e2       	ldi	r24, 0x2F	; 47
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	29 81       	ldd	r18, Y+1	; 0x01
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18
    1804:	00 00       	nop
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	08 95       	ret

0000180e <__vector_12>:

ISR(SPI_STC_vect)
{
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1816:	0f 92       	push	r0
    1818:	11 24       	eor	r1, r1
    181a:	2f 93       	push	r18
    181c:	3f 93       	push	r19
    181e:	4f 93       	push	r20
    1820:	5f 93       	push	r21
    1822:	6f 93       	push	r22
    1824:	7f 93       	push	r23
    1826:	8f 93       	push	r24
    1828:	9f 93       	push	r25
    182a:	af 93       	push	r26
    182c:	bf 93       	push	r27
    182e:	ef 93       	push	r30
    1830:	ff 93       	push	r31
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	1f 92       	push	r1
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8Data = SPI_SPDR_REG ; 
    183c:	8f e2       	ldi	r24, 0x2F	; 47
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	fc 01       	movw	r30, r24
    1842:	80 81       	ld	r24, Z
    1844:	89 83       	std	Y+1, r24	; 0x01
	ExchangeInterrupt(Loc_u8Data);
    1846:	20 91 f0 00 	lds	r18, 0x00F0	; 0x8000f0 <ExchangeInterrupt>
    184a:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <ExchangeInterrupt+0x1>
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	f9 01       	movw	r30, r18
    1852:	09 95       	icall
    1854:	00 00       	nop
    1856:	0f 90       	pop	r0
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <UART_Init>:
		Global_RxComplate = Rx_CallBack ;
		// Enable RX Interrupt
		UART_UCSRB_REG |= (1<<RXCIE_BIT_NO) ;
	}
	
}
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	00 d0       	rcall	.+0      	; 0x1886 <UART_Init+0x6>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	80 e4       	ldi	r24, 0x40	; 64
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	29 81       	ldd	r18, Y+1	; 0x01
    1894:	3a 81       	ldd	r19, Y+2	; 0x02
    1896:	23 2f       	mov	r18, r19
    1898:	33 27       	eor	r19, r19
    189a:	fc 01       	movw	r30, r24
    189c:	20 83       	st	Z, r18
    189e:	89 e2       	ldi	r24, 0x29	; 41
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	29 81       	ldd	r18, Y+1	; 0x01
    18a4:	fc 01       	movw	r30, r24
    18a6:	20 83       	st	Z, r18
    18a8:	8a e2       	ldi	r24, 0x2A	; 42
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	2a e2       	ldi	r18, 0x2A	; 42
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	f9 01       	movw	r30, r18
    18b2:	20 81       	ld	r18, Z
    18b4:	20 61       	ori	r18, 0x10	; 16
    18b6:	fc 01       	movw	r30, r24
    18b8:	20 83       	st	Z, r18
    18ba:	8a e2       	ldi	r24, 0x2A	; 42
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	2a e2       	ldi	r18, 0x2A	; 42
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	f9 01       	movw	r30, r18
    18c4:	20 81       	ld	r18, Z
    18c6:	28 60       	ori	r18, 0x08	; 8
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
    18cc:	80 e4       	ldi	r24, 0x40	; 64
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	20 e4       	ldi	r18, 0x40	; 64
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	f9 01       	movw	r30, r18
    18d6:	20 81       	ld	r18, Z
    18d8:	26 6a       	ori	r18, 0xA6	; 166
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
    18de:	00 00       	nop
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <UART_TransmitString>:
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <UART_TransmitString+0x6>
    18f0:	1f 92       	push	r1
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	9b 83       	std	Y+3, r25	; 0x03
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	19 82       	std	Y+1, r1	; 0x01
    18fc:	1e c0       	rjmp	.+60     	; 0x193a <UART_TransmitString+0x50>
    18fe:	00 00       	nop
    1900:	8b e2       	ldi	r24, 0x2B	; 43
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	fc 01       	movw	r30, r24
    1906:	80 81       	ld	r24, Z
    1908:	82 95       	swap	r24
    190a:	86 95       	lsr	r24
    190c:	87 70       	andi	r24, 0x07	; 7
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	99 27       	eor	r25, r25
    1916:	89 2b       	or	r24, r25
    1918:	99 f3       	breq	.-26     	; 0x1900 <UART_TransmitString+0x16>
    191a:	8c e2       	ldi	r24, 0x2C	; 44
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	29 81       	ldd	r18, Y+1	; 0x01
    1920:	22 2f       	mov	r18, r18
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a 81       	ldd	r20, Y+2	; 0x02
    1926:	5b 81       	ldd	r21, Y+3	; 0x03
    1928:	24 0f       	add	r18, r20
    192a:	35 1f       	adc	r19, r21
    192c:	f9 01       	movw	r30, r18
    192e:	20 81       	ld	r18, Z
    1930:	fc 01       	movw	r30, r24
    1932:	20 83       	st	Z, r18
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	8f 5f       	subi	r24, 0xFF	; 255
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	2a 81       	ldd	r18, Y+2	; 0x02
    1942:	3b 81       	ldd	r19, Y+3	; 0x03
    1944:	82 0f       	add	r24, r18
    1946:	93 1f       	adc	r25, r19
    1948:	fc 01       	movw	r30, r24
    194a:	80 81       	ld	r24, Z
    194c:	88 23       	and	r24, r24
    194e:	b9 f6       	brne	.-82     	; 0x18fe <UART_TransmitString+0x14>
    1950:	00 00       	nop
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <UART_voidTransmitStringAsynch>:
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	00 d0       	rcall	.+0      	; 0x1964 <UART_voidTransmitStringAsynch+0x6>
    1964:	00 d0       	rcall	.+0      	; 0x1966 <UART_voidTransmitStringAsynch+0x8>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	7c 83       	std	Y+4, r23	; 0x04
    1970:	6b 83       	std	Y+3, r22	; 0x03
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	89 2b       	or	r24, r25
    1978:	11 f1       	breq	.+68     	; 0x19be <UART_voidTransmitStringAsynch+0x60>
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	9a 81       	ldd	r25, Y+2	; 0x02
    197e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <Global_ptrStringToBeTransmitted+0x1>
    1982:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <Global_ptrStringToBeTransmitted>
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <Global_TxComplate+0x1>
    198e:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Global_TxComplate>
    1992:	8c e2       	ldi	r24, 0x2C	; 44
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <Global_ptrStringToBeTransmitted>
    199a:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <Global_ptrStringToBeTransmitted+0x1>
    199e:	f9 01       	movw	r30, r18
    19a0:	20 81       	ld	r18, Z
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <Global_u8SendString>
    19ac:	8a e2       	ldi	r24, 0x2A	; 42
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	2a e2       	ldi	r18, 0x2A	; 42
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	f9 01       	movw	r30, r18
    19b6:	20 81       	ld	r18, Z
    19b8:	20 64       	ori	r18, 0x40	; 64
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 83       	st	Z, r18
    19be:	00 00       	nop
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <UART_ReceiveStringAsynch>:
void UART_ReceiveStringAsynch(void(*Rx_CallBack)(u8 *ptr_CommingData,u8 copy_u8BufferSize))
{
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <UART_ReceiveStringAsynch+0x6>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	9a 83       	std	Y+2, r25	; 0x02
    19da:	89 83       	std	Y+1, r24	; 0x01
	if(Rx_CallBack!= NULL)
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	89 2b       	or	r24, r25
    19e2:	91 f0       	breq	.+36     	; 0x1a08 <UART_ReceiveStringAsynch+0x3a>
	{
		Global_u8ReceiveString = 1 ; 
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <Global_u8ReceiveString>
		// Link With Callback 
		Global_RxComplateString = Rx_CallBack ;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <Global_RxComplateString+0x1>
    19f2:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <Global_RxComplateString>
		// Enable RX Interrupt
		UART_UCSRB_REG |= (1<<RXCIE_BIT_NO) ;
    19f6:	8a e2       	ldi	r24, 0x2A	; 42
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	2a e2       	ldi	r18, 0x2A	; 42
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	f9 01       	movw	r30, r18
    1a00:	20 81       	ld	r18, Z
    1a02:	20 68       	ori	r18, 0x80	; 128
    1a04:	fc 01       	movw	r30, r24
    1a06:	20 83       	st	Z, r18
	}
	
}
    1a08:	00 00       	nop
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	08 95       	ret

00001a14 <__vector_13>:
ISR(USART_RXC_vect)
{
    1a14:	1f 92       	push	r1
    1a16:	0f 92       	push	r0
    1a18:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	4f 93       	push	r20
    1a26:	5f 93       	push	r21
    1a28:	6f 93       	push	r22
    1a2a:	7f 93       	push	r23
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	if(Global_u8ReceiveString)
    1a40:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <Global_u8ReceiveString>
    1a44:	88 23       	and	r24, r24
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <__vector_13+0x36>
    1a48:	4b c0       	rjmp	.+150    	; 0x1ae0 <__vector_13+0xcc>
	{
		static u8 LOC_u8Counter = 0 ;
		// Check The Comming Data is terminal char or not and check if exceed the max buffer size 
		if(Global_u8ReceiveBuffer[(LOC_u8Counter==0)?0:LOC_u8Counter-1] != UART_RX_ENDING_CHAR && LOC_u8Counter < MAX_BUFFER_SIZE)
    1a4a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <LOC_u8Counter.1697>
    1a4e:	88 23       	and	r24, r24
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <__vector_13+0x4a>
    1a52:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <LOC_u8Counter.1697>
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <__vector_13+0x4e>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	8a 53       	subi	r24, 0x3A	; 58
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	fc 01       	movw	r30, r24
    1a68:	80 81       	ld	r24, Z
    1a6a:	8d 30       	cpi	r24, 0x0D	; 13
    1a6c:	f9 f0       	breq	.+62     	; 0x1aac <__vector_13+0x98>
    1a6e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <LOC_u8Counter.1697>
    1a72:	84 31       	cpi	r24, 0x14	; 20
    1a74:	d8 f4       	brcc	.+54     	; 0x1aac <__vector_13+0x98>
		{
			// Available to Store Data 
			Global_u8ReceiveBuffer[ LOC_u8Counter ] = UART_UDR_REG ;
    1a76:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <LOC_u8Counter.1697>
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	2c e2       	ldi	r18, 0x2C	; 44
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	f9 01       	movw	r30, r18
    1a84:	20 81       	ld	r18, Z
    1a86:	8a 53       	subi	r24, 0x3A	; 58
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	20 83       	st	Z, r18
			UART_UCSRB_REG |= (1<<RXCIE_BIT_NO) ;
    1a8e:	8a e2       	ldi	r24, 0x2A	; 42
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	2a e2       	ldi	r18, 0x2A	; 42
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	f9 01       	movw	r30, r18
    1a98:	20 81       	ld	r18, Z
    1a9a:	20 68       	ori	r18, 0x80	; 128
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	20 83       	st	Z, r18
			LOC_u8Counter++ ;
    1aa0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <LOC_u8Counter.1697>
    1aa4:	8f 5f       	subi	r24, 0xFF	; 255
    1aa6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <LOC_u8Counter.1697>
		// Global_RxComplate(UART_UDR_REG);
	}
	// Clear Flag 
	
	
}
    1aaa:	1a c0       	rjmp	.+52     	; 0x1ae0 <__vector_13+0xcc>
			LOC_u8Counter++ ;
		}
		else
		{
			// Clear Flag By Reading UDR 
			(void)UART_UDR_REG;
    1aac:	8c e2       	ldi	r24, 0x2C	; 44
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	fc 01       	movw	r30, r24
    1ab2:	80 81       	ld	r24, Z
			// Clear UART_RX_ENDING_CHAR From Array 
			Global_u8ReceiveBuffer[LOC_u8Counter-1] = '\0' ; 
    1ab4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <LOC_u8Counter.1697>
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	8a 53       	subi	r24, 0x3A	; 58
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	10 82       	st	Z, r1
			// Call User Function
			Global_RxComplateString(Global_u8ReceiveBuffer,LOC_u8Counter);
    1ac6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <Global_RxComplateString>
    1aca:	30 91 c1 00 	lds	r19, 0x00C1	; 0x8000c1 <Global_RxComplateString+0x1>
    1ace:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <LOC_u8Counter.1697>
    1ad2:	68 2f       	mov	r22, r24
    1ad4:	86 ec       	ldi	r24, 0xC6	; 198
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	f9 01       	movw	r30, r18
    1ada:	09 95       	icall
			LOC_u8Counter = 0 ; 
    1adc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <LOC_u8Counter.1697>
		// Global_RxComplate(UART_UDR_REG);
	}
	// Clear Flag 
	
	
}
    1ae0:	00 00       	nop
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	ff 91       	pop	r31
    1ae8:	ef 91       	pop	r30
    1aea:	bf 91       	pop	r27
    1aec:	af 91       	pop	r26
    1aee:	9f 91       	pop	r25
    1af0:	8f 91       	pop	r24
    1af2:	7f 91       	pop	r23
    1af4:	6f 91       	pop	r22
    1af6:	5f 91       	pop	r21
    1af8:	4f 91       	pop	r20
    1afa:	3f 91       	pop	r19
    1afc:	2f 91       	pop	r18
    1afe:	0f 90       	pop	r0
    1b00:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1b04:	0f 90       	pop	r0
    1b06:	1f 90       	pop	r1
    1b08:	18 95       	reti

00001b0a <__vector_15>:
ISR(USART_TXC_vect)
{	// Clear Flag 
    1b0a:	1f 92       	push	r1
    1b0c:	0f 92       	push	r0
    1b0e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1b12:	0f 92       	push	r0
    1b14:	11 24       	eor	r1, r1
    1b16:	2f 93       	push	r18
    1b18:	3f 93       	push	r19
    1b1a:	4f 93       	push	r20
    1b1c:	5f 93       	push	r21
    1b1e:	6f 93       	push	r22
    1b20:	7f 93       	push	r23
    1b22:	8f 93       	push	r24
    1b24:	9f 93       	push	r25
    1b26:	af 93       	push	r26
    1b28:	bf 93       	push	r27
    1b2a:	ef 93       	push	r30
    1b2c:	ff 93       	push	r31
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT( UART_UCSRB_REG, TXCIE_BIT_NO);
    1b36:	8a e2       	ldi	r24, 0x2A	; 42
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	2a e2       	ldi	r18, 0x2A	; 42
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	f9 01       	movw	r30, r18
    1b40:	20 81       	ld	r18, Z
    1b42:	2f 7b       	andi	r18, 0xBF	; 191
    1b44:	fc 01       	movw	r30, r24
    1b46:	20 83       	st	Z, r18
	// TX IRQ When Complete 
	if(Global_u8SendString)
    1b48:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <Global_u8SendString>
    1b4c:	88 23       	and	r24, r24
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <__vector_15+0x48>
    1b50:	44 c0       	rjmp	.+136    	; 0x1bda <__vector_15+0xd0>
	{
		// Send String from Buffer 
		static u8 LOC_u8Counter = 0 ;
		LOC_u8Counter++ ; 
    1b52:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <LOC_u8Counter.1703>
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <LOC_u8Counter.1703>
		// Chack Current Char
		if ( Global_ptrStringToBeTransmitted[LOC_u8Counter] != '\0')
    1b5c:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <Global_ptrStringToBeTransmitted>
    1b60:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <Global_ptrStringToBeTransmitted+0x1>
    1b64:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <LOC_u8Counter.1703>
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	82 0f       	add	r24, r18
    1b6e:	93 1f       	adc	r25, r19
    1b70:	fc 01       	movw	r30, r24
    1b72:	80 81       	ld	r24, Z
    1b74:	88 23       	and	r24, r24
    1b76:	d1 f0       	breq	.+52     	; 0x1bac <__vector_15+0xa2>
		{
			// Send Next Char 
			// Set Data 
			UART_UDR_REG = Global_ptrStringToBeTransmitted[LOC_u8Counter]  ;  
    1b78:	8c e2       	ldi	r24, 0x2C	; 44
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <Global_ptrStringToBeTransmitted>
    1b80:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <Global_ptrStringToBeTransmitted+0x1>
    1b84:	20 91 db 00 	lds	r18, 0x00DB	; 0x8000db <LOC_u8Counter.1703>
    1b88:	22 2f       	mov	r18, r18
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	24 0f       	add	r18, r20
    1b8e:	35 1f       	adc	r19, r21
    1b90:	f9 01       	movw	r30, r18
    1b92:	20 81       	ld	r18, Z
    1b94:	fc 01       	movw	r30, r24
    1b96:	20 83       	st	Z, r18
			// Enable UART IRQ
			UART_UCSRB_REG |= (1<<TXCIE_BIT_NO)  ; 
    1b98:	8a e2       	ldi	r24, 0x2A	; 42
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	2a e2       	ldi	r18, 0x2A	; 42
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	f9 01       	movw	r30, r18
    1ba2:	20 81       	ld	r18, Z
    1ba4:	20 64       	ori	r18, 0x40	; 64
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	20 83       	st	Z, r18
		// Send Char	
		Global_TxComplate();
		
	}
	//SET_BIT( UART_UCSRA_REG, TXC_BIT_NO);
}
    1baa:	1d c0       	rjmp	.+58     	; 0x1be6 <__vector_15+0xdc>
			// Enable UART IRQ
			UART_UCSRB_REG |= (1<<TXCIE_BIT_NO)  ; 
		}
		else
		{
			LOC_u8Counter = 0 ; 
    1bac:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <LOC_u8Counter.1703>
			// Clear Flag 
			CLEAR_BIT( UART_UCSRB_REG, TXCIE_BIT_NO);
    1bb0:	8a e2       	ldi	r24, 0x2A	; 42
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	2a e2       	ldi	r18, 0x2A	; 42
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	f9 01       	movw	r30, r18
    1bba:	20 81       	ld	r18, Z
    1bbc:	2f 7b       	andi	r18, 0xBF	; 191
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	20 83       	st	Z, r18
			Global_TxComplate();
    1bc2:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <Global_TxComplate>
    1bc6:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <Global_TxComplate+0x1>
    1bca:	fc 01       	movw	r30, r24
    1bcc:	09 95       	icall
			Global_u8SendString++;
    1bce:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <Global_u8SendString>
    1bd2:	8f 5f       	subi	r24, 0xFF	; 255
    1bd4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <Global_u8SendString>
		// Send Char	
		Global_TxComplate();
		
	}
	//SET_BIT( UART_UCSRA_REG, TXC_BIT_NO);
}
    1bd8:	06 c0       	rjmp	.+12     	; 0x1be6 <__vector_15+0xdc>
		
	}
	else
	{
		// Send Char	
		Global_TxComplate();
    1bda:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <Global_TxComplate>
    1bde:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <Global_TxComplate+0x1>
    1be2:	fc 01       	movw	r30, r24
    1be4:	09 95       	icall
		
	}
	//SET_BIT( UART_UCSRA_REG, TXC_BIT_NO);
}
    1be6:	00 00       	nop
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	ff 91       	pop	r31
    1bee:	ef 91       	pop	r30
    1bf0:	bf 91       	pop	r27
    1bf2:	af 91       	pop	r26
    1bf4:	9f 91       	pop	r25
    1bf6:	8f 91       	pop	r24
    1bf8:	7f 91       	pop	r23
    1bfa:	6f 91       	pop	r22
    1bfc:	5f 91       	pop	r21
    1bfe:	4f 91       	pop	r20
    1c00:	3f 91       	pop	r19
    1c02:	2f 91       	pop	r18
    1c04:	0f 90       	pop	r0
    1c06:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1c0a:	0f 90       	pop	r0
    1c0c:	1f 90       	pop	r1
    1c0e:	18 95       	reti

00001c10 <__cmpsf2>:
    1c10:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__fp_cmp>
    1c14:	08 f4       	brcc	.+2      	; 0x1c18 <__cmpsf2+0x8>
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	08 95       	ret

00001c1a <__divsf3>:
    1c1a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__divsf3x>
    1c1e:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_round>
    1c22:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__fp_pscB>
    1c26:	58 f0       	brcs	.+22     	; 0x1c3e <__divsf3+0x24>
    1c28:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fp_pscA>
    1c2c:	40 f0       	brcs	.+16     	; 0x1c3e <__divsf3+0x24>
    1c2e:	29 f4       	brne	.+10     	; 0x1c3a <__divsf3+0x20>
    1c30:	5f 3f       	cpi	r21, 0xFF	; 255
    1c32:	29 f0       	breq	.+10     	; 0x1c3e <__divsf3+0x24>
    1c34:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__fp_inf>
    1c38:	51 11       	cpse	r21, r1
    1c3a:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__fp_szero>
    1c3e:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_nan>

00001c42 <__divsf3x>:
    1c42:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__fp_split3>
    1c46:	68 f3       	brcs	.-38     	; 0x1c22 <__divsf3+0x8>

00001c48 <__divsf3_pse>:
    1c48:	99 23       	and	r25, r25
    1c4a:	b1 f3       	breq	.-20     	; 0x1c38 <__divsf3+0x1e>
    1c4c:	55 23       	and	r21, r21
    1c4e:	91 f3       	breq	.-28     	; 0x1c34 <__divsf3+0x1a>
    1c50:	95 1b       	sub	r25, r21
    1c52:	55 0b       	sbc	r21, r21
    1c54:	bb 27       	eor	r27, r27
    1c56:	aa 27       	eor	r26, r26
    1c58:	62 17       	cp	r22, r18
    1c5a:	73 07       	cpc	r23, r19
    1c5c:	84 07       	cpc	r24, r20
    1c5e:	38 f0       	brcs	.+14     	; 0x1c6e <__divsf3_pse+0x26>
    1c60:	9f 5f       	subi	r25, 0xFF	; 255
    1c62:	5f 4f       	sbci	r21, 0xFF	; 255
    1c64:	22 0f       	add	r18, r18
    1c66:	33 1f       	adc	r19, r19
    1c68:	44 1f       	adc	r20, r20
    1c6a:	aa 1f       	adc	r26, r26
    1c6c:	a9 f3       	breq	.-22     	; 0x1c58 <__divsf3_pse+0x10>
    1c6e:	35 d0       	rcall	.+106    	; 0x1cda <__divsf3_pse+0x92>
    1c70:	0e 2e       	mov	r0, r30
    1c72:	3a f0       	brmi	.+14     	; 0x1c82 <__divsf3_pse+0x3a>
    1c74:	e0 e8       	ldi	r30, 0x80	; 128
    1c76:	32 d0       	rcall	.+100    	; 0x1cdc <__divsf3_pse+0x94>
    1c78:	91 50       	subi	r25, 0x01	; 1
    1c7a:	50 40       	sbci	r21, 0x00	; 0
    1c7c:	e6 95       	lsr	r30
    1c7e:	00 1c       	adc	r0, r0
    1c80:	ca f7       	brpl	.-14     	; 0x1c74 <__divsf3_pse+0x2c>
    1c82:	2b d0       	rcall	.+86     	; 0x1cda <__divsf3_pse+0x92>
    1c84:	fe 2f       	mov	r31, r30
    1c86:	29 d0       	rcall	.+82     	; 0x1cda <__divsf3_pse+0x92>
    1c88:	66 0f       	add	r22, r22
    1c8a:	77 1f       	adc	r23, r23
    1c8c:	88 1f       	adc	r24, r24
    1c8e:	bb 1f       	adc	r27, r27
    1c90:	26 17       	cp	r18, r22
    1c92:	37 07       	cpc	r19, r23
    1c94:	48 07       	cpc	r20, r24
    1c96:	ab 07       	cpc	r26, r27
    1c98:	b0 e8       	ldi	r27, 0x80	; 128
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <__divsf3_pse+0x56>
    1c9c:	bb 0b       	sbc	r27, r27
    1c9e:	80 2d       	mov	r24, r0
    1ca0:	bf 01       	movw	r22, r30
    1ca2:	ff 27       	eor	r31, r31
    1ca4:	93 58       	subi	r25, 0x83	; 131
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	3a f0       	brmi	.+14     	; 0x1cb8 <__divsf3_pse+0x70>
    1caa:	9e 3f       	cpi	r25, 0xFE	; 254
    1cac:	51 05       	cpc	r21, r1
    1cae:	78 f0       	brcs	.+30     	; 0x1cce <__divsf3_pse+0x86>
    1cb0:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__fp_inf>
    1cb4:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__fp_szero>
    1cb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cba:	e4 f3       	brlt	.-8      	; 0x1cb4 <__divsf3_pse+0x6c>
    1cbc:	98 3e       	cpi	r25, 0xE8	; 232
    1cbe:	d4 f3       	brlt	.-12     	; 0x1cb4 <__divsf3_pse+0x6c>
    1cc0:	86 95       	lsr	r24
    1cc2:	77 95       	ror	r23
    1cc4:	67 95       	ror	r22
    1cc6:	b7 95       	ror	r27
    1cc8:	f7 95       	ror	r31
    1cca:	9f 5f       	subi	r25, 0xFF	; 255
    1ccc:	c9 f7       	brne	.-14     	; 0x1cc0 <__divsf3_pse+0x78>
    1cce:	88 0f       	add	r24, r24
    1cd0:	91 1d       	adc	r25, r1
    1cd2:	96 95       	lsr	r25
    1cd4:	87 95       	ror	r24
    1cd6:	97 f9       	bld	r25, 7
    1cd8:	08 95       	ret
    1cda:	e1 e0       	ldi	r30, 0x01	; 1
    1cdc:	66 0f       	add	r22, r22
    1cde:	77 1f       	adc	r23, r23
    1ce0:	88 1f       	adc	r24, r24
    1ce2:	bb 1f       	adc	r27, r27
    1ce4:	62 17       	cp	r22, r18
    1ce6:	73 07       	cpc	r23, r19
    1ce8:	84 07       	cpc	r24, r20
    1cea:	ba 07       	cpc	r27, r26
    1cec:	20 f0       	brcs	.+8      	; 0x1cf6 <__divsf3_pse+0xae>
    1cee:	62 1b       	sub	r22, r18
    1cf0:	73 0b       	sbc	r23, r19
    1cf2:	84 0b       	sbc	r24, r20
    1cf4:	ba 0b       	sbc	r27, r26
    1cf6:	ee 1f       	adc	r30, r30
    1cf8:	88 f7       	brcc	.-30     	; 0x1cdc <__divsf3_pse+0x94>
    1cfa:	e0 95       	com	r30
    1cfc:	08 95       	ret

00001cfe <__fixunssfsi>:
    1cfe:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__fp_splitA>
    1d02:	88 f0       	brcs	.+34     	; 0x1d26 <__fixunssfsi+0x28>
    1d04:	9f 57       	subi	r25, 0x7F	; 127
    1d06:	98 f0       	brcs	.+38     	; 0x1d2e <__fixunssfsi+0x30>
    1d08:	b9 2f       	mov	r27, r25
    1d0a:	99 27       	eor	r25, r25
    1d0c:	b7 51       	subi	r27, 0x17	; 23
    1d0e:	b0 f0       	brcs	.+44     	; 0x1d3c <__fixunssfsi+0x3e>
    1d10:	e1 f0       	breq	.+56     	; 0x1d4a <__fixunssfsi+0x4c>
    1d12:	66 0f       	add	r22, r22
    1d14:	77 1f       	adc	r23, r23
    1d16:	88 1f       	adc	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	1a f0       	brmi	.+6      	; 0x1d22 <__fixunssfsi+0x24>
    1d1c:	ba 95       	dec	r27
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <__fixunssfsi+0x14>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <__fixunssfsi+0x4c>
    1d22:	b1 30       	cpi	r27, 0x01	; 1
    1d24:	91 f0       	breq	.+36     	; 0x1d4a <__fixunssfsi+0x4c>
    1d26:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__fp_zero>
    1d2a:	b1 e0       	ldi	r27, 0x01	; 1
    1d2c:	08 95       	ret
    1d2e:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__fp_zero>
    1d32:	67 2f       	mov	r22, r23
    1d34:	78 2f       	mov	r23, r24
    1d36:	88 27       	eor	r24, r24
    1d38:	b8 5f       	subi	r27, 0xF8	; 248
    1d3a:	39 f0       	breq	.+14     	; 0x1d4a <__fixunssfsi+0x4c>
    1d3c:	b9 3f       	cpi	r27, 0xF9	; 249
    1d3e:	cc f3       	brlt	.-14     	; 0x1d32 <__fixunssfsi+0x34>
    1d40:	86 95       	lsr	r24
    1d42:	77 95       	ror	r23
    1d44:	67 95       	ror	r22
    1d46:	b3 95       	inc	r27
    1d48:	d9 f7       	brne	.-10     	; 0x1d40 <__fixunssfsi+0x42>
    1d4a:	3e f4       	brtc	.+14     	; 0x1d5a <__fixunssfsi+0x5c>
    1d4c:	90 95       	com	r25
    1d4e:	80 95       	com	r24
    1d50:	70 95       	com	r23
    1d52:	61 95       	neg	r22
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255
    1d56:	8f 4f       	sbci	r24, 0xFF	; 255
    1d58:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5a:	08 95       	ret

00001d5c <__fp_cmp>:
    1d5c:	99 0f       	add	r25, r25
    1d5e:	00 08       	sbc	r0, r0
    1d60:	55 0f       	add	r21, r21
    1d62:	aa 0b       	sbc	r26, r26
    1d64:	e0 e8       	ldi	r30, 0x80	; 128
    1d66:	fe ef       	ldi	r31, 0xFE	; 254
    1d68:	16 16       	cp	r1, r22
    1d6a:	17 06       	cpc	r1, r23
    1d6c:	e8 07       	cpc	r30, r24
    1d6e:	f9 07       	cpc	r31, r25
    1d70:	c0 f0       	brcs	.+48     	; 0x1da2 <__fp_cmp+0x46>
    1d72:	12 16       	cp	r1, r18
    1d74:	13 06       	cpc	r1, r19
    1d76:	e4 07       	cpc	r30, r20
    1d78:	f5 07       	cpc	r31, r21
    1d7a:	98 f0       	brcs	.+38     	; 0x1da2 <__fp_cmp+0x46>
    1d7c:	62 1b       	sub	r22, r18
    1d7e:	73 0b       	sbc	r23, r19
    1d80:	84 0b       	sbc	r24, r20
    1d82:	95 0b       	sbc	r25, r21
    1d84:	39 f4       	brne	.+14     	; 0x1d94 <__fp_cmp+0x38>
    1d86:	0a 26       	eor	r0, r26
    1d88:	61 f0       	breq	.+24     	; 0x1da2 <__fp_cmp+0x46>
    1d8a:	23 2b       	or	r18, r19
    1d8c:	24 2b       	or	r18, r20
    1d8e:	25 2b       	or	r18, r21
    1d90:	21 f4       	brne	.+8      	; 0x1d9a <__fp_cmp+0x3e>
    1d92:	08 95       	ret
    1d94:	0a 26       	eor	r0, r26
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <__fp_cmp+0x3e>
    1d98:	a1 40       	sbci	r26, 0x01	; 1
    1d9a:	a6 95       	lsr	r26
    1d9c:	8f ef       	ldi	r24, 0xFF	; 255
    1d9e:	81 1d       	adc	r24, r1
    1da0:	81 1d       	adc	r24, r1
    1da2:	08 95       	ret

00001da4 <__fp_inf>:
    1da4:	97 f9       	bld	r25, 7
    1da6:	9f 67       	ori	r25, 0x7F	; 127
    1da8:	80 e8       	ldi	r24, 0x80	; 128
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	08 95       	ret

00001db0 <__fp_nan>:
    1db0:	9f ef       	ldi	r25, 0xFF	; 255
    1db2:	80 ec       	ldi	r24, 0xC0	; 192
    1db4:	08 95       	ret

00001db6 <__fp_pscA>:
    1db6:	00 24       	eor	r0, r0
    1db8:	0a 94       	dec	r0
    1dba:	16 16       	cp	r1, r22
    1dbc:	17 06       	cpc	r1, r23
    1dbe:	18 06       	cpc	r1, r24
    1dc0:	09 06       	cpc	r0, r25
    1dc2:	08 95       	ret

00001dc4 <__fp_pscB>:
    1dc4:	00 24       	eor	r0, r0
    1dc6:	0a 94       	dec	r0
    1dc8:	12 16       	cp	r1, r18
    1dca:	13 06       	cpc	r1, r19
    1dcc:	14 06       	cpc	r1, r20
    1dce:	05 06       	cpc	r0, r21
    1dd0:	08 95       	ret

00001dd2 <__fp_round>:
    1dd2:	09 2e       	mov	r0, r25
    1dd4:	03 94       	inc	r0
    1dd6:	00 0c       	add	r0, r0
    1dd8:	11 f4       	brne	.+4      	; 0x1dde <__fp_round+0xc>
    1dda:	88 23       	and	r24, r24
    1ddc:	52 f0       	brmi	.+20     	; 0x1df2 <__fp_round+0x20>
    1dde:	bb 0f       	add	r27, r27
    1de0:	40 f4       	brcc	.+16     	; 0x1df2 <__fp_round+0x20>
    1de2:	bf 2b       	or	r27, r31
    1de4:	11 f4       	brne	.+4      	; 0x1dea <__fp_round+0x18>
    1de6:	60 ff       	sbrs	r22, 0
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <__fp_round+0x20>
    1dea:	6f 5f       	subi	r22, 0xFF	; 255
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255
    1dee:	8f 4f       	sbci	r24, 0xFF	; 255
    1df0:	9f 4f       	sbci	r25, 0xFF	; 255
    1df2:	08 95       	ret

00001df4 <__fp_split3>:
    1df4:	57 fd       	sbrc	r21, 7
    1df6:	90 58       	subi	r25, 0x80	; 128
    1df8:	44 0f       	add	r20, r20
    1dfa:	55 1f       	adc	r21, r21
    1dfc:	59 f0       	breq	.+22     	; 0x1e14 <__fp_splitA+0x10>
    1dfe:	5f 3f       	cpi	r21, 0xFF	; 255
    1e00:	71 f0       	breq	.+28     	; 0x1e1e <__fp_splitA+0x1a>
    1e02:	47 95       	ror	r20

00001e04 <__fp_splitA>:
    1e04:	88 0f       	add	r24, r24
    1e06:	97 fb       	bst	r25, 7
    1e08:	99 1f       	adc	r25, r25
    1e0a:	61 f0       	breq	.+24     	; 0x1e24 <__fp_splitA+0x20>
    1e0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e0e:	79 f0       	breq	.+30     	; 0x1e2e <__fp_splitA+0x2a>
    1e10:	87 95       	ror	r24
    1e12:	08 95       	ret
    1e14:	12 16       	cp	r1, r18
    1e16:	13 06       	cpc	r1, r19
    1e18:	14 06       	cpc	r1, r20
    1e1a:	55 1f       	adc	r21, r21
    1e1c:	f2 cf       	rjmp	.-28     	; 0x1e02 <__fp_split3+0xe>
    1e1e:	46 95       	lsr	r20
    1e20:	f1 df       	rcall	.-30     	; 0x1e04 <__fp_splitA>
    1e22:	08 c0       	rjmp	.+16     	; 0x1e34 <__fp_splitA+0x30>
    1e24:	16 16       	cp	r1, r22
    1e26:	17 06       	cpc	r1, r23
    1e28:	18 06       	cpc	r1, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	f1 cf       	rjmp	.-30     	; 0x1e10 <__fp_splitA+0xc>
    1e2e:	86 95       	lsr	r24
    1e30:	71 05       	cpc	r23, r1
    1e32:	61 05       	cpc	r22, r1
    1e34:	08 94       	sec
    1e36:	08 95       	ret

00001e38 <__fp_zero>:
    1e38:	e8 94       	clt

00001e3a <__fp_szero>:
    1e3a:	bb 27       	eor	r27, r27
    1e3c:	66 27       	eor	r22, r22
    1e3e:	77 27       	eor	r23, r23
    1e40:	cb 01       	movw	r24, r22
    1e42:	97 f9       	bld	r25, 7
    1e44:	08 95       	ret

00001e46 <__gesf2>:
    1e46:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__fp_cmp>
    1e4a:	08 f4       	brcc	.+2      	; 0x1e4e <__gesf2+0x8>
    1e4c:	8f ef       	ldi	r24, 0xFF	; 255
    1e4e:	08 95       	ret

00001e50 <__mulsf3>:
    1e50:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__mulsf3x>
    1e54:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_round>
    1e58:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fp_pscA>
    1e5c:	38 f0       	brcs	.+14     	; 0x1e6c <__mulsf3+0x1c>
    1e5e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__fp_pscB>
    1e62:	20 f0       	brcs	.+8      	; 0x1e6c <__mulsf3+0x1c>
    1e64:	95 23       	and	r25, r21
    1e66:	11 f0       	breq	.+4      	; 0x1e6c <__mulsf3+0x1c>
    1e68:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__fp_inf>
    1e6c:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_nan>
    1e70:	11 24       	eor	r1, r1
    1e72:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__fp_szero>

00001e76 <__mulsf3x>:
    1e76:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__fp_split3>
    1e7a:	70 f3       	brcs	.-36     	; 0x1e58 <__mulsf3+0x8>

00001e7c <__mulsf3_pse>:
    1e7c:	95 9f       	mul	r25, r21
    1e7e:	c1 f3       	breq	.-16     	; 0x1e70 <__mulsf3+0x20>
    1e80:	95 0f       	add	r25, r21
    1e82:	50 e0       	ldi	r21, 0x00	; 0
    1e84:	55 1f       	adc	r21, r21
    1e86:	62 9f       	mul	r22, r18
    1e88:	f0 01       	movw	r30, r0
    1e8a:	72 9f       	mul	r23, r18
    1e8c:	bb 27       	eor	r27, r27
    1e8e:	f0 0d       	add	r31, r0
    1e90:	b1 1d       	adc	r27, r1
    1e92:	63 9f       	mul	r22, r19
    1e94:	aa 27       	eor	r26, r26
    1e96:	f0 0d       	add	r31, r0
    1e98:	b1 1d       	adc	r27, r1
    1e9a:	aa 1f       	adc	r26, r26
    1e9c:	64 9f       	mul	r22, r20
    1e9e:	66 27       	eor	r22, r22
    1ea0:	b0 0d       	add	r27, r0
    1ea2:	a1 1d       	adc	r26, r1
    1ea4:	66 1f       	adc	r22, r22
    1ea6:	82 9f       	mul	r24, r18
    1ea8:	22 27       	eor	r18, r18
    1eaa:	b0 0d       	add	r27, r0
    1eac:	a1 1d       	adc	r26, r1
    1eae:	62 1f       	adc	r22, r18
    1eb0:	73 9f       	mul	r23, r19
    1eb2:	b0 0d       	add	r27, r0
    1eb4:	a1 1d       	adc	r26, r1
    1eb6:	62 1f       	adc	r22, r18
    1eb8:	83 9f       	mul	r24, r19
    1eba:	a0 0d       	add	r26, r0
    1ebc:	61 1d       	adc	r22, r1
    1ebe:	22 1f       	adc	r18, r18
    1ec0:	74 9f       	mul	r23, r20
    1ec2:	33 27       	eor	r19, r19
    1ec4:	a0 0d       	add	r26, r0
    1ec6:	61 1d       	adc	r22, r1
    1ec8:	23 1f       	adc	r18, r19
    1eca:	84 9f       	mul	r24, r20
    1ecc:	60 0d       	add	r22, r0
    1ece:	21 1d       	adc	r18, r1
    1ed0:	82 2f       	mov	r24, r18
    1ed2:	76 2f       	mov	r23, r22
    1ed4:	6a 2f       	mov	r22, r26
    1ed6:	11 24       	eor	r1, r1
    1ed8:	9f 57       	subi	r25, 0x7F	; 127
    1eda:	50 40       	sbci	r21, 0x00	; 0
    1edc:	9a f0       	brmi	.+38     	; 0x1f04 <__mulsf3_pse+0x88>
    1ede:	f1 f0       	breq	.+60     	; 0x1f1c <__mulsf3_pse+0xa0>
    1ee0:	88 23       	and	r24, r24
    1ee2:	4a f0       	brmi	.+18     	; 0x1ef6 <__mulsf3_pse+0x7a>
    1ee4:	ee 0f       	add	r30, r30
    1ee6:	ff 1f       	adc	r31, r31
    1ee8:	bb 1f       	adc	r27, r27
    1eea:	66 1f       	adc	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	91 50       	subi	r25, 0x01	; 1
    1ef2:	50 40       	sbci	r21, 0x00	; 0
    1ef4:	a9 f7       	brne	.-22     	; 0x1ee0 <__mulsf3_pse+0x64>
    1ef6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ef8:	51 05       	cpc	r21, r1
    1efa:	80 f0       	brcs	.+32     	; 0x1f1c <__mulsf3_pse+0xa0>
    1efc:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__fp_inf>
    1f00:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__fp_szero>
    1f04:	5f 3f       	cpi	r21, 0xFF	; 255
    1f06:	e4 f3       	brlt	.-8      	; 0x1f00 <__mulsf3_pse+0x84>
    1f08:	98 3e       	cpi	r25, 0xE8	; 232
    1f0a:	d4 f3       	brlt	.-12     	; 0x1f00 <__mulsf3_pse+0x84>
    1f0c:	86 95       	lsr	r24
    1f0e:	77 95       	ror	r23
    1f10:	67 95       	ror	r22
    1f12:	b7 95       	ror	r27
    1f14:	f7 95       	ror	r31
    1f16:	e7 95       	ror	r30
    1f18:	9f 5f       	subi	r25, 0xFF	; 255
    1f1a:	c1 f7       	brne	.-16     	; 0x1f0c <__mulsf3_pse+0x90>
    1f1c:	fe 2b       	or	r31, r30
    1f1e:	88 0f       	add	r24, r24
    1f20:	91 1d       	adc	r25, r1
    1f22:	96 95       	lsr	r25
    1f24:	87 95       	ror	r24
    1f26:	97 f9       	bld	r25, 7
    1f28:	08 95       	ret

00001f2a <_exit>:
    1f2a:	f8 94       	cli

00001f2c <__stop_program>:
    1f2c:	ff cf       	rjmp	.-2      	; 0x1f2c <__stop_program>
