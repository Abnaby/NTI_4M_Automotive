
PasswordLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00001242  000012d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  0080019c  0080019c  00001412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f28  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001166  00000000  00000000  00005688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e28  00000000  00000000  000067ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008cc  00000000  00000000  00008618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001650  00000000  00000000  00008ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ce0  00000000  00000000  0000a534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__vector_6>
      1c:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 05 08 	jmp	0x100a	; 0x100a <__vector_9>
      28:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_10>
      2c:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 05 	call	0xb34	; 0xb34 <main>
      8a:	0c 94 1f 09 	jmp	0x123e	; 0x123e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER1_CallbackFunction>:
	}
	numOfFourSeconds++;	
#endif 
// Will Interrupt Every 20 Second
static u8 NumberOf_4_Seconds = 1 ; 
	if( NumberOf_4_Seconds >= 5)
      92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      96:	85 30       	cpi	r24, 0x05	; 5
      98:	40 f0       	brcs	.+16     	; 0xaa <TIMER1_CallbackFunction+0x18>
	{
		// 20 Second Happen
		Global_u8SystemIsLocked = 1 ; 
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Global_u8SystemIsLocked>
		NumberOf_4_Seconds = 1 ; 
      a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		// Stop Timer 
		Timer_voidStopTimer(TIMER1);
      a4:	0e 94 15 07 	call	0xe2a	; 0xe2a <Timer_voidStopTimer>
      a8:	08 95       	ret

	}
	else
	{
		NumberOf_4_Seconds++ ; 
      aa:	8f 5f       	subi	r24, 0xFF	; 255
      ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      b0:	08 95       	ret

000000b2 <APP_voidDisplayMainScreen>:
static void APP_resetEEPROM(void)
{
	APP_WriteEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM, 'm');
}
static void APP_voidDisplayMainScreen(boolean copy_isLocked)
{
      b2:	cf 93       	push	r28
      b4:	c8 2f       	mov	r28, r24
	lcd_vidClrDislay(); 
      b6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
	lcd_vidGotoRowColumn(0,0);	
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
	lcd_vidDisplyStr((u8*)"State : ");
      c2:	83 ea       	ldi	r24, 0xA3	; 163
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
	if(copy_isLocked == 1)
      ca:	c1 30       	cpi	r28, 0x01	; 1
      cc:	a1 f4       	brne	.+40     	; 0xf6 <APP_voidDisplayMainScreen+0x44>
	{
		lcd_vidDisplyStr((u8*)"Locked");
      ce:	8c ea       	ldi	r24, 0xAC	; 172
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
		lcd_vidGotoRowColumn(0,19);	
      d6:	63 e1       	ldi	r22, 0x13	; 19
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
		lcd_vidDisplyChar(0);
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 c0 04 	call	0x980	; 0x980 <lcd_vidDisplyChar>
	{
		lcd_vidDisplyStr((u8*)"Unlocked");
		lcd_vidGotoRowColumn(0,19);	
		lcd_vidDisplyChar(1);
	}
	lcd_vidGotoRowColumn(1,3);	
      e4:	63 e0       	ldi	r22, 0x03	; 3
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
	lcd_vidDisplyStr((u8*)"Select One of: ");
      ec:	83 eb       	ldi	r24, 0xB3	; 179
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
      f4:	15 c0       	rjmp	.+42     	; 0x120 <APP_voidDisplayMainScreen+0x6e>
		lcd_vidGotoRowColumn(0,19);	
		lcd_vidDisplyChar(0);
	}
	else
	{
		lcd_vidDisplyStr((u8*)"Unlocked");
      f6:	83 ec       	ldi	r24, 0xC3	; 195
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
		lcd_vidGotoRowColumn(0,19);	
      fe:	63 e1       	ldi	r22, 0x13	; 19
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
		lcd_vidDisplyChar(1);
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	0e 94 c0 04 	call	0x980	; 0x980 <lcd_vidDisplyChar>
	}
	lcd_vidGotoRowColumn(1,3);	
     10c:	63 e0       	ldi	r22, 0x03	; 3
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
	lcd_vidDisplyStr((u8*)"Select One of: ");
     114:	83 eb       	ldi	r24, 0xB3	; 179
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
	if(copy_isLocked)
     11c:	cc 23       	and	r28, r28
     11e:	89 f0       	breq	.+34     	; 0x142 <APP_voidDisplayMainScreen+0x90>
	{
		lcd_vidGotoRowColumn(2,0);	
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	82 e0       	ldi	r24, 0x02	; 2
     124:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"1- Unlock ");
     128:	8c ec       	ldi	r24, 0xCC	; 204
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
		lcd_vidGotoRowColumn(3,0);	
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"2- Change Password ");
     138:	87 ed       	ldi	r24, 0xD7	; 215
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
     140:	10 c0       	rjmp	.+32     	; 0x162 <APP_voidDisplayMainScreen+0xb0>
	}
	else
	{
		// Unlocked
		lcd_vidGotoRowColumn(2,0);	
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"1- Lock ");		
     14a:	8b ee       	ldi	r24, 0xEB	; 235
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
		lcd_vidGotoRowColumn(3,0);	
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	83 e0       	ldi	r24, 0x03	; 3
     156:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"2- Change Password ");	
     15a:	87 ed       	ldi	r24, 0xD7	; 215
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
	}
}
     162:	cf 91       	pop	r28
     164:	08 95       	ret

00000166 <APP_voidGetPassword>:
		}
	}
	return Loc_u8IsEqual ; 
}
static void APP_voidGetPassword(u8* Buffer)
{
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	8c 01       	movw	r16, r24
	u8 LOC_u8PasswordCounter = 0 ; 
	u8 LOC_u8key = 0xFF ; 
	lcd_vidClrDislay(); 
     16e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
	lcd_vidDisplyStr((u8*)"Enter Password ");
     172:	84 ef       	ldi	r24, 0xF4	; 244
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
	lcd_vidGotoRowColumn(1,6);
     17a:	66 e0       	ldi	r22, 0x06	; 6
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
	}
	return Loc_u8IsEqual ; 
}
static void APP_voidGetPassword(u8* Buffer)
{
	u8 LOC_u8PasswordCounter = 0 ; 
     182:	c0 e0       	ldi	r28, 0x00	; 0
	lcd_vidClrDislay(); 
	lcd_vidDisplyStr((u8*)"Enter Password ");
	lcd_vidGotoRowColumn(1,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
	{
		LOC_u8key = keypad_u8GetKey();
     184:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <keypad_u8GetKey>
		if(	LOC_u8key != 0xFF)
     188:	8f 3f       	cpi	r24, 0xFF	; 255
     18a:	41 f0       	breq	.+16     	; 0x19c <APP_voidGetPassword+0x36>
		{
			// Pressed 
			Buffer[LOC_u8PasswordCounter] = LOC_u8key ; 
     18c:	f8 01       	movw	r30, r16
     18e:	ec 0f       	add	r30, r28
     190:	f1 1d       	adc	r31, r1
     192:	80 83       	st	Z, r24
			LOC_u8PasswordCounter++ ; 
     194:	cf 5f       	subi	r28, 0xFF	; 255
			lcd_vidDisplyChar('*');
     196:	8a e2       	ldi	r24, 0x2A	; 42
     198:	0e 94 c0 04 	call	0x980	; 0x980 <lcd_vidDisplyChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     19c:	2f ef       	ldi	r18, 0xFF	; 255
     19e:	81 ee       	ldi	r24, 0xE1	; 225
     1a0:	94 e0       	ldi	r25, 0x04	; 4
     1a2:	21 50       	subi	r18, 0x01	; 1
     1a4:	80 40       	sbci	r24, 0x00	; 0
     1a6:	90 40       	sbci	r25, 0x00	; 0
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <APP_voidGetPassword+0x3c>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <APP_voidGetPassword+0x46>
     1ac:	00 00       	nop
	u8 LOC_u8PasswordCounter = 0 ; 
	u8 LOC_u8key = 0xFF ; 
	lcd_vidClrDislay(); 
	lcd_vidDisplyStr((u8*)"Enter Password ");
	lcd_vidGotoRowColumn(1,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
     1ae:	c6 30       	cpi	r28, 0x06	; 6
     1b0:	48 f3       	brcs	.-46     	; 0x184 <APP_voidGetPassword+0x1e>
			LOC_u8PasswordCounter++ ; 
			lcd_vidDisplyChar('*');
		}
		_delay_ms(100);
	}	
}
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	08 95       	ret

000001ba <APP_u8SetPassword>:
		lcd_vidGotoRowColumn(3,0);	
		lcd_vidDisplyStr((u8*)"2- Change Password ");	
	}
}
static APP_ErrorHandling_t APP_u8SetPassword(void)
{
     1ba:	cf 92       	push	r12
     1bc:	df 92       	push	r13
     1be:	ef 92       	push	r14
     1c0:	ff 92       	push	r15
     1c2:	0f 93       	push	r16
     1c4:	1f 93       	push	r17
     1c6:	cf 93       	push	r28
	u8 LOC_u8PasswordCounter = 0 ; 
	u8  LOC_u8key = 0xff ; 
	u8 LOC_u8ComingEEPROM_Data ; 
	APP_ErrorHandling_t  LOC_u8Result = E_OK ; 

	lcd_vidClrDislay(); 
     1c8:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
	lcd_vidDisplyStr((u8*)"Enter ");
     1cc:	84 e0       	ldi	r24, 0x04	; 4
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
	lcd_vidDisplayNumbers(NUM_PASS_DIGITS);
     1d4:	66 e0       	ldi	r22, 0x06	; 6
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 49 05 	call	0xa92	; 0xa92 <lcd_vidDisplayNumbers>
	lcd_vidDisplyStr((u8*)"-digit Pass:");
     1e0:	8b e0       	ldi	r24, 0x0B	; 11
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
	lcd_vidGotoRowColumn(1,6);
     1e8:	66 e0       	ldi	r22, 0x06	; 6
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
	}
}
static APP_ErrorHandling_t APP_u8SetPassword(void)
{
	u8 LOC_u8PasswordFlag = 1;
	u8 LOC_u8PasswordCounter = 0 ; 
     1f0:	c0 e0       	ldi	r28, 0x00	; 0
	lcd_vidDisplayNumbers(NUM_PASS_DIGITS);
	lcd_vidDisplyStr((u8*)"-digit Pass:");
	lcd_vidGotoRowColumn(1,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
	{
		LOC_u8key = keypad_u8GetKey();
     1f2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <keypad_u8GetKey>
		if(	LOC_u8key != 0xFF)
     1f6:	8f 3f       	cpi	r24, 0xFF	; 255
     1f8:	49 f0       	breq	.+18     	; 0x20c <APP_u8SetPassword+0x52>
		{
			// Pressed 
			APP_GlobalPasswordBuffer[LOC_u8PasswordCounter] = LOC_u8key ; 
     1fa:	ec 2f       	mov	r30, r28
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	e3 56       	subi	r30, 0x63	; 99
     200:	fe 4f       	sbci	r31, 0xFE	; 254
     202:	80 83       	st	Z, r24
			LOC_u8PasswordCounter++ ; 
     204:	cf 5f       	subi	r28, 0xFF	; 255
			lcd_vidDisplyChar('*');
     206:	8a e2       	ldi	r24, 0x2A	; 42
     208:	0e 94 c0 04 	call	0x980	; 0x980 <lcd_vidDisplyChar>
     20c:	2f ef       	ldi	r18, 0xFF	; 255
     20e:	81 ee       	ldi	r24, 0xE1	; 225
     210:	94 e0       	ldi	r25, 0x04	; 4
     212:	21 50       	subi	r18, 0x01	; 1
     214:	80 40       	sbci	r24, 0x00	; 0
     216:	90 40       	sbci	r25, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <APP_u8SetPassword+0x58>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <APP_u8SetPassword+0x62>
     21c:	00 00       	nop
	lcd_vidClrDislay(); 
	lcd_vidDisplyStr((u8*)"Enter ");
	lcd_vidDisplayNumbers(NUM_PASS_DIGITS);
	lcd_vidDisplyStr((u8*)"-digit Pass:");
	lcd_vidGotoRowColumn(1,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
     21e:	c6 30       	cpi	r28, 0x06	; 6
     220:	40 f3       	brcs	.-48     	; 0x1f2 <APP_u8SetPassword+0x38>
		_delay_ms(100);
	}	
			
	// Reset Password Counter
	LOC_u8PasswordCounter = 0 ; 
	lcd_vidGotoRowColumn(2,0);
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
	lcd_vidDisplyStr((u8*)"Repeat Password ");
     22a:	88 e1       	ldi	r24, 0x18	; 24
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
	lcd_vidGotoRowColumn(3,6);
     232:	66 e0       	ldi	r22, 0x06	; 6
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
     23a:	0f 2e       	mov	r0, r31
     23c:	fd e9       	ldi	r31, 0x9D	; 157
     23e:	ef 2e       	mov	r14, r31
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	ff 2e       	mov	r15, r31
     244:	f0 2d       	mov	r31, r0
     246:	67 01       	movw	r12, r14
		}
		_delay_ms(100);
	}	
			
	// Reset Password Counter
	LOC_u8PasswordCounter = 0 ; 
     248:	c0 e0       	ldi	r28, 0x00	; 0
		lcd_vidDisplyStr((u8*)"2- Change Password ");	
	}
}
static APP_ErrorHandling_t APP_u8SetPassword(void)
{
	u8 LOC_u8PasswordFlag = 1;
     24a:	11 e0       	ldi	r17, 0x01	; 1
		if(	LOC_u8key != 0xFF)
		{
			// Pressed 
			if (LOC_u8key != APP_GlobalPasswordBuffer[LOC_u8PasswordCounter])
			{
				LOC_u8PasswordFlag = 0 ; 
     24c:	00 e0       	ldi	r16, 0x00	; 0
	lcd_vidGotoRowColumn(2,0);
	lcd_vidDisplyStr((u8*)"Repeat Password ");
	lcd_vidGotoRowColumn(3,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
	{
		LOC_u8key = keypad_u8GetKey();
     24e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <keypad_u8GetKey>
		if(	LOC_u8key != 0xFF)
     252:	8f 3f       	cpi	r24, 0xFF	; 255
     254:	a9 f0       	breq	.+42     	; 0x280 <APP_u8SetPassword+0xc6>
		{
			// Pressed 
			if (LOC_u8key != APP_GlobalPasswordBuffer[LOC_u8PasswordCounter])
     256:	f6 01       	movw	r30, r12
     258:	91 91       	ld	r25, Z+
     25a:	6f 01       	movw	r12, r30
     25c:	89 13       	cpse	r24, r25
			{
				LOC_u8PasswordFlag = 0 ; 
     25e:	10 2f       	mov	r17, r16
			}
			LOC_u8PasswordCounter++ ; 
     260:	cf 5f       	subi	r28, 0xFF	; 255
			lcd_vidDisplyChar('*');	
     262:	8a e2       	ldi	r24, 0x2A	; 42
     264:	0e 94 c0 04 	call	0x980	; 0x980 <lcd_vidDisplyChar>
     268:	ff ef       	ldi	r31, 0xFF	; 255
     26a:	21 ee       	ldi	r18, 0xE1	; 225
     26c:	84 e0       	ldi	r24, 0x04	; 4
     26e:	f1 50       	subi	r31, 0x01	; 1
     270:	20 40       	sbci	r18, 0x00	; 0
     272:	80 40       	sbci	r24, 0x00	; 0
     274:	e1 f7       	brne	.-8      	; 0x26e <APP_u8SetPassword+0xb4>
     276:	00 c0       	rjmp	.+0      	; 0x278 <APP_u8SetPassword+0xbe>
     278:	00 00       	nop
	// Reset Password Counter
	LOC_u8PasswordCounter = 0 ; 
	lcd_vidGotoRowColumn(2,0);
	lcd_vidDisplyStr((u8*)"Repeat Password ");
	lcd_vidGotoRowColumn(3,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
     27a:	c6 30       	cpi	r28, 0x06	; 6
     27c:	19 f0       	breq	.+6      	; 0x284 <APP_u8SetPassword+0xca>
     27e:	e7 cf       	rjmp	.-50     	; 0x24e <APP_u8SetPassword+0x94>
     280:	c6 30       	cpi	r28, 0x06	; 6
     282:	28 f3       	brcs	.-54     	; 0x24e <APP_u8SetPassword+0x94>
			lcd_vidDisplyChar('*');	
			_delay_ms(100);
		}
	}
	// Check Identical Or Not 
	if(LOC_u8PasswordFlag == 1)
     284:	11 30       	cpi	r17, 0x01	; 1
     286:	09 f0       	breq	.+2      	; 0x28a <APP_u8SetPassword+0xd0>
     288:	52 c0       	rjmp	.+164    	; 0x32e <APP_u8SetPassword+0x174>
	{
	// Saving in EEPROM
		// Identical 
		lcd_vidClrDislay(); 
     28a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
		lcd_vidGotoRowColumn(1,5);
     28e:	65 e0       	ldi	r22, 0x05	; 5
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"Good... ");
     296:	89 e2       	ldi	r24, 0x29	; 41
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
	}
}
static void APP_WriteEEPROM(u16 uiAddress, u8 ucData)
{
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	eep_writebyte(uiAddress, ucData);
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	80 ea       	ldi	r24, 0xA0	; 160
     2a2:	0e 94 bc 02 	call	0x578	; 0x578 <eep_writebyte>
}
static u8 APP_ReadEEPROM(u16 uiAddress)
{
	u8 LOC_u8ReturnValue = 0xFF ;  // 0xFF init. value for EEPROM
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	LOC_u8ReturnValue = eep_readByte(uiAddress);
     2a6:	80 ea       	ldi	r24, 0xA0	; 160
     2a8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <eep_readByte>
		lcd_vidDisplyStr((u8*)"Good... ");
		// Set To Not First Time 
		APP_WriteEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM, NOT_FIRST_TIME);
		LOC_u8ComingEEPROM_Data = APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM);
		// Confirm Write Operation 
		if(NOT_FIRST_TIME != LOC_u8ComingEEPROM_Data)
     2ac:	88 23       	and	r24, r24
     2ae:	e1 f0       	breq	.+56     	; 0x2e8 <APP_u8SetPassword+0x12e>
		{
			// Print Failure in system
			lcd_vidClrDislay(); 
     2b0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
			lcd_vidGotoRowColumn(0,3);
     2b4:	63 e0       	ldi	r22, 0x03	; 3
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr((u8*)"EEPROM FAIL");
     2bc:	82 e3       	ldi	r24, 0x32	; 50
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
			lcd_vidGotoRowColumn(2,5);	
     2c4:	65 e0       	ldi	r22, 0x05	; 5
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr((u8*)"Power Mode");	
     2cc:	8e e3       	ldi	r24, 0x3E	; 62
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
     2d4:	9f ef       	ldi	r25, 0xFF	; 255
     2d6:	e7 ea       	ldi	r30, 0xA7	; 167
     2d8:	f1 e6       	ldi	r31, 0x61	; 97
     2da:	91 50       	subi	r25, 0x01	; 1
     2dc:	e0 40       	sbci	r30, 0x00	; 0
     2de:	f0 40       	sbci	r31, 0x00	; 0
     2e0:	e1 f7       	brne	.-8      	; 0x2da <APP_u8SetPassword+0x120>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <APP_u8SetPassword+0x12a>
     2e4:	00 00       	nop
     2e6:	18 c0       	rjmp	.+48     	; 0x318 <APP_u8SetPassword+0x15e>
     2e8:	c1 ea       	ldi	r28, 0xA1	; 161
     2ea:	87 01       	movw	r16, r14
	}
}
static void APP_WriteEEPROM(u16 uiAddress, u8 ucData)
{
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	eep_writebyte(uiAddress, ucData);
     2ec:	f7 01       	movw	r30, r14
     2ee:	60 81       	ld	r22, Z
     2f0:	8c 2f       	mov	r24, r28
     2f2:	0e 94 bc 02 	call	0x578	; 0x578 <eep_writebyte>
     2f6:	03 c0       	rjmp	.+6      	; 0x2fe <APP_u8SetPassword+0x144>
     2f8:	8c 2f       	mov	r24, r28
     2fa:	0e 94 bc 02 	call	0x578	; 0x578 <eep_writebyte>
}
static u8 APP_ReadEEPROM(u16 uiAddress)
{
	u8 LOC_u8ReturnValue = 0xFF ;  // 0xFF init. value for EEPROM
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	LOC_u8ReturnValue = eep_readByte(uiAddress);
     2fe:	8c 2f       	mov	r24, r28
     300:	0e 94 d6 02 	call	0x5ac	; 0x5ac <eep_readByte>
			for(LOC_u8PasswordCounter = 0 ;  LOC_u8PasswordCounter < NUM_PASS_DIGITS ; LOC_u8PasswordCounter++)
			{
				// Write Password in EEPORM 
				APP_WriteEEPROM((IS_FIRST_TIME_ADDRESS_EEPROM+LOC_u8PasswordCounter+1) , 	APP_GlobalPasswordBuffer[LOC_u8PasswordCounter]);
				// Confirm That Everything is clear 
				while(APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM+LOC_u8PasswordCounter+1) !=APP_GlobalPasswordBuffer[LOC_u8PasswordCounter])
     304:	f8 01       	movw	r30, r16
     306:	60 81       	ld	r22, Z
     308:	68 13       	cpse	r22, r24
     30a:	f6 cf       	rjmp	.-20     	; 0x2f8 <APP_u8SetPassword+0x13e>
     30c:	ff ef       	ldi	r31, 0xFF	; 255
     30e:	ef 1a       	sub	r14, r31
     310:	ff 0a       	sbc	r15, r31
     312:	cf 5f       	subi	r28, 0xFF	; 255
		}
		else
		{
			Glob_u8IsFirstTime = NOT_FIRST_TIME ; 
			// Store Password In EEPROM 
			for(LOC_u8PasswordCounter = 0 ;  LOC_u8PasswordCounter < NUM_PASS_DIGITS ; LOC_u8PasswordCounter++)
     314:	c7 3a       	cpi	r28, 0xA7	; 167
     316:	49 f7       	brne	.-46     	; 0x2ea <APP_u8SetPassword+0x130>
     318:	2f ef       	ldi	r18, 0xFF	; 255
     31a:	83 ed       	ldi	r24, 0xD3	; 211
     31c:	90 e3       	ldi	r25, 0x30	; 48
     31e:	21 50       	subi	r18, 0x01	; 1
     320:	80 40       	sbci	r24, 0x00	; 0
     322:	90 40       	sbci	r25, 0x00	; 0
     324:	e1 f7       	brne	.-8      	; 0x31e <APP_u8SetPassword+0x164>
     326:	00 c0       	rjmp	.+0      	; 0x328 <APP_u8SetPassword+0x16e>
     328:	00 00       	nop
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	14 c0       	rjmp	.+40     	; 0x356 <APP_u8SetPassword+0x19c>
		_delay_ms(1000);		
	}
	else 
	{
		// Not Identical
		lcd_vidClrDislay(); 
     32e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
		lcd_vidGotoRowColumn(1,2);
     332:	62 e0       	ldi	r22, 0x02	; 2
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"Not Identical...");
     33a:	89 e4       	ldi	r24, 0x49	; 73
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
     342:	ef ef       	ldi	r30, 0xFF	; 255
     344:	f3 ed       	ldi	r31, 0xD3	; 211
     346:	20 e3       	ldi	r18, 0x30	; 48
     348:	e1 50       	subi	r30, 0x01	; 1
     34a:	f0 40       	sbci	r31, 0x00	; 0
     34c:	20 40       	sbci	r18, 0x00	; 0
     34e:	e1 f7       	brne	.-8      	; 0x348 <APP_u8SetPassword+0x18e>
     350:	00 c0       	rjmp	.+0      	; 0x352 <APP_u8SetPassword+0x198>
     352:	00 00       	nop
		_delay_ms(1000);
		LOC_u8Result = E_NOK ; 
     354:	80 e0       	ldi	r24, 0x00	; 0
	}				
	return LOC_u8Result ; 
}
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	df 90       	pop	r13
     362:	cf 90       	pop	r12
     364:	08 95       	ret

00000366 <PasswordLock_voidInit>:
		_delay_ms(100);
	}	
}
/************************************* Definitions ********************************/
void PasswordLock_voidInit(void)
{
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
	/********************************** Inits *****************************/
	// TIMER 
	PasswordLock_Timer.operationModeTIM1			 = TIM_CTC_Mode     ; 
     36c:	e3 ea       	ldi	r30, 0xA3	; 163
     36e:	f1 e0       	ldi	r31, 0x01	; 1
     370:	88 e0       	ldi	r24, 0x08	; 8
     372:	80 83       	st	Z, r24
	PasswordLock_Timer.clockSourceAndPrescalerTimer1 = TIMER1_CLK_OVR_1024; 
     374:	85 e0       	ldi	r24, 0x05	; 5
     376:	81 83       	std	Z+1, r24	; 0x01
	Timer_voidInitTimer1(&PasswordLock_Timer); 
     378:	cf 01       	movw	r24, r30
     37a:	0e 94 bb 06 	call	0xd76	; 0xd76 <Timer_voidInitTimer1>
	// 4sec = 1024 / 160000 * Ticks (Ticks = 62500) 
	Timer_voidSetCompareValue(TIMER1,62500-1);
     37e:	63 e2       	ldi	r22, 0x23	; 35
     380:	74 ef       	ldi	r23, 0xF4	; 244
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 31 07 	call	0xe62	; 0xe62 <Timer_voidSetCompareValue>
	Timer_voidStopTimer(TIMER1);
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 15 07 	call	0xe2a	; 0xe2a <Timer_voidStopTimer>
	Timer_voidSetCompMatchInterrupState(TIMER1  , TIM_OCM_ENABLE) ; 
     38e:	61 e0       	ldi	r22, 0x01	; 1
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	0e 94 51 07 	call	0xea2	; 0xea2 <Timer_voidSetCompMatchInterrupState>
	Timer_voidSetCompareMatchCallback(TIMER1 , TIMER1_CallbackFunction);
     396:	69 e4       	ldi	r22, 0x49	; 73
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <Timer_voidSetCompareMatchCallback>
	Timer_voidStartTimer(TIMER1);
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Timer_voidStartTimer>
	// I2C 
	I2C_MasterInit();
     3a6:	0e 94 a9 08 	call	0x1152	; 0x1152 <I2C_MasterInit>
	// LCD Init 
	lcd_vidInit();	
     3aa:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_vidInit>
	// Keypad Init
	keypad_vidInit(); 
     3ae:	0e 94 ed 02 	call	0x5da	; 0x5da <keypad_vidInit>
	// Enable Interrupts 
	sei();
     3b2:	78 94       	sei
	/**************************************** Check Operation Times ******************/ 
	//APP_resetEEPROM();
	while(Global_ErrorHandling != E_OK )
     3b4:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	81 f1       	breq	.+96     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
}
static u8 APP_ReadEEPROM(u16 uiAddress)
{
	u8 LOC_u8ReturnValue = 0xFF ;  // 0xFF init. value for EEPROM
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	LOC_u8ReturnValue = eep_readByte(uiAddress);
     3bc:	80 ea       	ldi	r24, 0xA0	; 160
     3be:	0e 94 d6 02 	call	0x5ac	; 0x5ac <eep_readByte>
	// Vars 
	u8 LOC_u8ComingEEPROM_Data = 0 ; 
	APP_ErrorHandling_t  LOC_u8Result = E_OK ; 
	
	LOC_u8ComingEEPROM_Data = APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM);
	if(NOT_FIRST_TIME != LOC_u8ComingEEPROM_Data)
     3c2:	88 23       	and	r24, r24
     3c4:	d1 f0       	breq	.+52     	; 0x3fa <PasswordLock_voidInit+0x94>
	{
		lcd_vidClrDislay(); 
     3c6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
		lcd_vidGotoRowColumn(1,0);	
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	0e 94 a4 04 	call	0x948	; 0x948 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"Welcome to safe area");
     3d2:	8a e5       	ldi	r24, 0x5A	; 90
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
     3da:	2f ef       	ldi	r18, 0xFF	; 255
     3dc:	8d e3       	ldi	r24, 0x3D	; 61
     3de:	99 e4       	ldi	r25, 0x49	; 73
     3e0:	21 50       	subi	r18, 0x01	; 1
     3e2:	80 40       	sbci	r24, 0x00	; 0
     3e4:	90 40       	sbci	r25, 0x00	; 0
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <PasswordLock_voidInit+0x7a>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <PasswordLock_voidInit+0x84>
     3ea:	00 00       	nop
		_delay_ms(1500);
		// Get Password 
		LOC_u8Result = APP_u8SetPassword();
     3ec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <APP_u8SetPassword>
	sei();
	/**************************************** Check Operation Times ******************/ 
	//APP_resetEEPROM();
	while(Global_ErrorHandling != E_OK )
	{
		Global_ErrorHandling = APP_HandleFirstTime();
     3f0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
	keypad_vidInit(); 
	// Enable Interrupts 
	sei();
	/**************************************** Check Operation Times ******************/ 
	//APP_resetEEPROM();
	while(Global_ErrorHandling != E_OK )
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	11 f7       	brne	.-60     	; 0x3bc <PasswordLock_voidInit+0x56>
     3f8:	11 c0       	rjmp	.+34     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     3fa:	0d e9       	ldi	r16, 0x9D	; 157
     3fc:	11 e0       	ldi	r17, 0x01	; 1
	// Vars 
	u8 LOC_u8ComingEEPROM_Data = 0 ; 
	APP_ErrorHandling_t  LOC_u8Result = E_OK ; 
	
	LOC_u8ComingEEPROM_Data = APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM);
	if(NOT_FIRST_TIME != LOC_u8ComingEEPROM_Data)
     3fe:	c1 ea       	ldi	r28, 0xA1	; 161
}
static u8 APP_ReadEEPROM(u16 uiAddress)
{
	u8 LOC_u8ReturnValue = 0xFF ;  // 0xFF init. value for EEPROM
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	LOC_u8ReturnValue = eep_readByte(uiAddress);
     400:	8c 2f       	mov	r24, r28
     402:	0e 94 d6 02 	call	0x5ac	; 0x5ac <eep_readByte>
		lcd_vidClrDislay(); 
		#endif
		for(LOC_u8PasswordCounter = 0 ;  LOC_u8PasswordCounter < NUM_PASS_DIGITS ; LOC_u8PasswordCounter++)
		{
			// Write Password in EEPORM 
			APP_GlobalPasswordBuffer[LOC_u8PasswordCounter]	 = APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM+LOC_u8PasswordCounter+1);
     406:	f8 01       	movw	r30, r16
     408:	81 93       	st	Z+, r24
     40a:	8f 01       	movw	r16, r30
     40c:	cf 5f       	subi	r28, 0xFF	; 255
		Glob_u8IsFirstTime = NOT_FIRST_TIME ; 
		// Reload Password From EEPROM to APP_GlobalPasswordBuffer
		#if DEBUG_MODE == 1 
		lcd_vidClrDislay(); 
		#endif
		for(LOC_u8PasswordCounter = 0 ;  LOC_u8PasswordCounter < NUM_PASS_DIGITS ; LOC_u8PasswordCounter++)
     40e:	c7 3a       	cpi	r28, 0xA7	; 167
     410:	b9 f7       	brne	.-18     	; 0x400 <__EEPROM_REGION_LENGTH__>
			#if DEBUG_MODE == 1 
			lcd_vidDisplyChar(APP_GlobalPasswordBuffer[LOC_u8PasswordCounter]);
			_delay_ms(1000);
			#endif
		}
		APP_GlobalPasswordBuffer[LOC_u8PasswordCounter]	 = '\0';
     412:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <PasswordLock_Timer>
	sei();
	/**************************************** Check Operation Times ******************/ 
	//APP_resetEEPROM();
	while(Global_ErrorHandling != E_OK )
	{
		Global_ErrorHandling = APP_HandleFirstTime();
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
	}
	APP_voidDisplayMainScreen(Global_u8SystemIsLocked);	
     41c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     420:	0e 94 59 00 	call	0xb2	; 0xb2 <APP_voidDisplayMainScreen>
	#endif
	#if EXTERNAL_EEPROM_TST == 1
	ExternalEEPROM_Test();
	#endif
	#endif 
}
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	08 95       	ret

0000042c <PasswordLock_voidStart>:

void PasswordLock_voidStart(void)
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	00 d0       	rcall	.+0      	; 0x432 <PasswordLock_voidStart+0x6>
     432:	00 d0       	rcall	.+0      	; 0x434 <PasswordLock_voidStart+0x8>
     434:	00 d0       	rcall	.+0      	; 0x436 <PasswordLock_voidStart+0xa>
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8PressedKey = 0xFF;
	u8 LOC_u8PasswordBuffer[NUM_PASS_DIGITS] = {0}; 
     43a:	fe 01       	movw	r30, r28
     43c:	31 96       	adiw	r30, 0x01	; 1
     43e:	86 e0       	ldi	r24, 0x06	; 6
     440:	df 01       	movw	r26, r30
     442:	1d 92       	st	X+, r1
     444:	8a 95       	dec	r24
     446:	e9 f7       	brne	.-6      	; 0x442 <PasswordLock_voidStart+0x16>
	/**************** Keypad Test ***********************/ 
	#if TEST_MODE == 1 
	Keypad_voidTest();
	#endif 
	/**************** Application ************************/
	if(Global_u8SystemIsLocked != Loc_u8SystemPrevState)
     448:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     44c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Loc_u8SystemPrevState>
     450:	89 17       	cp	r24, r25
     452:	31 f0       	breq	.+12     	; 0x460 <PasswordLock_voidStart+0x34>
	{
		// Password Buffer is Ready 
		APP_voidDisplayMainScreen(Global_u8SystemIsLocked);	
     454:	0e 94 59 00 	call	0xb2	; 0xb2 <APP_voidDisplayMainScreen>
		Loc_u8SystemPrevState = Global_u8SystemIsLocked ;	
     458:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     45c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Loc_u8SystemPrevState>
	}
	// Check Pressed Key 
	LOC_u8PressedKey = keypad_u8GetKey(); 
     460:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <keypad_u8GetKey>
	if(LOC_u8PressedKey == '1')
     464:	81 33       	cpi	r24, 0x31	; 49
     466:	d9 f5       	brne	.+118    	; 0x4de <PasswordLock_voidStart+0xb2>
	{
		if(Global_u8SystemIsLocked == 1)
     468:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	99 f5       	brne	.+102    	; 0x4d6 <PasswordLock_voidStart+0xaa>
		{
			// Ready to Unlock
			APP_voidGetPassword(LOC_u8PasswordBuffer); 
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 b3 00 	call	0x166	; 0x166 <APP_voidGetPassword>
     478:	fe 01       	movw	r30, r28
     47a:	31 96       	adiw	r30, 0x01	; 1
     47c:	ad e9       	ldi	r26, 0x9D	; 157
     47e:	b1 e0       	ldi	r27, 0x01	; 1
     480:	9e 01       	movw	r18, r28
     482:	29 5f       	subi	r18, 0xF9	; 249
     484:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	return LOC_u8Result; 
}
static u8 APP_u8PasswordAuthentication(u8* ptrToInputPassword)
{
	u8 Loc_u8IsEqual = 1 ; 
     486:	41 e0       	ldi	r20, 0x01	; 1
	u8 Loc_u8Counter = 0 ; 
	for(Loc_u8Counter = 0 ; Loc_u8Counter<NUM_PASS_DIGITS ;  Loc_u8Counter++)
	{
		if(ptrToInputPassword[Loc_u8Counter] != APP_GlobalPasswordBuffer[Loc_u8Counter])
		{
			Loc_u8IsEqual = 0 ; 
     488:	50 e0       	ldi	r21, 0x00	; 0
{
	u8 Loc_u8IsEqual = 1 ; 
	u8 Loc_u8Counter = 0 ; 
	for(Loc_u8Counter = 0 ; Loc_u8Counter<NUM_PASS_DIGITS ;  Loc_u8Counter++)
	{
		if(ptrToInputPassword[Loc_u8Counter] != APP_GlobalPasswordBuffer[Loc_u8Counter])
     48a:	91 91       	ld	r25, Z+
     48c:	8d 91       	ld	r24, X+
     48e:	98 13       	cpse	r25, r24
		{
			Loc_u8IsEqual = 0 ; 
     490:	45 2f       	mov	r20, r21
}
static u8 APP_u8PasswordAuthentication(u8* ptrToInputPassword)
{
	u8 Loc_u8IsEqual = 1 ; 
	u8 Loc_u8Counter = 0 ; 
	for(Loc_u8Counter = 0 ; Loc_u8Counter<NUM_PASS_DIGITS ;  Loc_u8Counter++)
     492:	e2 17       	cp	r30, r18
     494:	f3 07       	cpc	r31, r19
     496:	c9 f7       	brne	.-14     	; 0x48a <PasswordLock_voidStart+0x5e>
		if(Global_u8SystemIsLocked == 1)
		{
			// Ready to Unlock
			APP_voidGetPassword(LOC_u8PasswordBuffer); 
			LOC_u8Result = APP_u8PasswordAuthentication(LOC_u8PasswordBuffer); 
			if(LOC_u8Result == 1)
     498:	41 30       	cpi	r20, 0x01	; 1
     49a:	31 f4       	brne	.+12     	; 0x4a8 <PasswordLock_voidStart+0x7c>
			{
				Global_u8SystemIsLocked = 0 ;
     49c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Global_u8SystemIsLocked>
				Timer_voidStartTimer(TIMER1);
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Timer_voidStartTimer>
     4a6:	5f c0       	rjmp	.+190    	; 0x566 <PasswordLock_voidStart+0x13a>
			}
			else
			{
				Global_u8SystemIsLocked = 1 ;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Global_u8SystemIsLocked>
				lcd_vidClrDislay(); 
     4ae:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
				lcd_vidDisplyStr((u8*)"Wrong Password"); 
     4b2:	8f e6       	ldi	r24, 0x6F	; 111
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
     4ba:	bf ef       	ldi	r27, 0xFF	; 255
     4bc:	23 ed       	ldi	r18, 0xD3	; 211
     4be:	80 e3       	ldi	r24, 0x30	; 48
     4c0:	b1 50       	subi	r27, 0x01	; 1
     4c2:	20 40       	sbci	r18, 0x00	; 0
     4c4:	80 40       	sbci	r24, 0x00	; 0
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <PasswordLock_voidStart+0x94>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <PasswordLock_voidStart+0x9e>
     4ca:	00 00       	nop
				_delay_ms(1000);
				APP_voidDisplayMainScreen(Global_u8SystemIsLocked);	
     4cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     4d0:	0e 94 59 00 	call	0xb2	; 0xb2 <APP_voidDisplayMainScreen>
     4d4:	48 c0       	rjmp	.+144    	; 0x566 <PasswordLock_voidStart+0x13a>
			}
		}
		else
		{
			// Ready to Locked
			Global_u8SystemIsLocked = 1 ; 
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Global_u8SystemIsLocked>
     4dc:	44 c0       	rjmp	.+136    	; 0x566 <PasswordLock_voidStart+0x13a>
		}
		
	}
	else if ( LOC_u8PressedKey == '2' )
     4de:	82 33       	cpi	r24, 0x32	; 50
     4e0:	69 f5       	brne	.+90     	; 0x53c <PasswordLock_voidStart+0x110>
	{
		APP_voidGetPassword(LOC_u8PasswordBuffer); 
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	0e 94 b3 00 	call	0x166	; 0x166 <APP_voidGetPassword>
     4ea:	fe 01       	movw	r30, r28
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	ad e9       	ldi	r26, 0x9D	; 157
     4f0:	b1 e0       	ldi	r27, 0x01	; 1
     4f2:	9e 01       	movw	r18, r28
     4f4:	29 5f       	subi	r18, 0xF9	; 249
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	return LOC_u8Result; 
}
static u8 APP_u8PasswordAuthentication(u8* ptrToInputPassword)
{
	u8 Loc_u8IsEqual = 1 ; 
     4f8:	41 e0       	ldi	r20, 0x01	; 1
	u8 Loc_u8Counter = 0 ; 
	for(Loc_u8Counter = 0 ; Loc_u8Counter<NUM_PASS_DIGITS ;  Loc_u8Counter++)
	{
		if(ptrToInputPassword[Loc_u8Counter] != APP_GlobalPasswordBuffer[Loc_u8Counter])
		{
			Loc_u8IsEqual = 0 ; 
     4fa:	50 e0       	ldi	r21, 0x00	; 0
{
	u8 Loc_u8IsEqual = 1 ; 
	u8 Loc_u8Counter = 0 ; 
	for(Loc_u8Counter = 0 ; Loc_u8Counter<NUM_PASS_DIGITS ;  Loc_u8Counter++)
	{
		if(ptrToInputPassword[Loc_u8Counter] != APP_GlobalPasswordBuffer[Loc_u8Counter])
     4fc:	91 91       	ld	r25, Z+
     4fe:	8d 91       	ld	r24, X+
     500:	98 13       	cpse	r25, r24
		{
			Loc_u8IsEqual = 0 ; 
     502:	45 2f       	mov	r20, r21
}
static u8 APP_u8PasswordAuthentication(u8* ptrToInputPassword)
{
	u8 Loc_u8IsEqual = 1 ; 
	u8 Loc_u8Counter = 0 ; 
	for(Loc_u8Counter = 0 ; Loc_u8Counter<NUM_PASS_DIGITS ;  Loc_u8Counter++)
     504:	e2 17       	cp	r30, r18
     506:	f3 07       	cpc	r31, r19
     508:	c9 f7       	brne	.-14     	; 0x4fc <PasswordLock_voidStart+0xd0>
	}
	else if ( LOC_u8PressedKey == '2' )
	{
		APP_voidGetPassword(LOC_u8PasswordBuffer); 
		LOC_u8Result = APP_u8PasswordAuthentication(LOC_u8PasswordBuffer); 
		if(LOC_u8Result == 1)
     50a:	41 30       	cpi	r20, 0x01	; 1
     50c:	19 f4       	brne	.+6      	; 0x514 <PasswordLock_voidStart+0xe8>
		{
			APP_u8SetPassword();
     50e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <APP_u8SetPassword>
     512:	0f c0       	rjmp	.+30     	; 0x532 <PasswordLock_voidStart+0x106>
		}
		else
		{
			lcd_vidClrDislay(); 
     514:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
			lcd_vidDisplyStr((u8*)"Wrong Password"); 
     518:	8f e6       	ldi	r24, 0x6F	; 111
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
     520:	9f ef       	ldi	r25, 0xFF	; 255
     522:	a3 ed       	ldi	r26, 0xD3	; 211
     524:	b0 e3       	ldi	r27, 0x30	; 48
     526:	91 50       	subi	r25, 0x01	; 1
     528:	a0 40       	sbci	r26, 0x00	; 0
     52a:	b0 40       	sbci	r27, 0x00	; 0
     52c:	e1 f7       	brne	.-8      	; 0x526 <PasswordLock_voidStart+0xfa>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <PasswordLock_voidStart+0x104>
     530:	00 00       	nop
			_delay_ms(1000);
		}
		APP_voidDisplayMainScreen(Global_u8SystemIsLocked);	
     532:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     536:	0e 94 59 00 	call	0xb2	; 0xb2 <APP_voidDisplayMainScreen>
     53a:	15 c0       	rjmp	.+42     	; 0x566 <PasswordLock_voidStart+0x13a>
	}
	else if(LOC_u8PressedKey != 0xFF)
     53c:	8f 3f       	cpi	r24, 0xFF	; 255
     53e:	99 f0       	breq	.+38     	; 0x566 <PasswordLock_voidStart+0x13a>
	{
		lcd_vidClrDislay(); 
     540:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lcd_vidClrDislay>
		lcd_vidDisplyStr((u8*)"Wrong Choice"); 
     544:	8e e7       	ldi	r24, 0x7E	; 126
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 c3 04 	call	0x986	; 0x986 <lcd_vidDisplyStr>
     54c:	2f ef       	ldi	r18, 0xFF	; 255
     54e:	8d e2       	ldi	r24, 0x2D	; 45
     550:	92 e2       	ldi	r25, 0x22	; 34
     552:	21 50       	subi	r18, 0x01	; 1
     554:	80 40       	sbci	r24, 0x00	; 0
     556:	90 40       	sbci	r25, 0x00	; 0
     558:	e1 f7       	brne	.-8      	; 0x552 <PasswordLock_voidStart+0x126>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <PasswordLock_voidStart+0x130>
     55c:	00 00       	nop
		_delay_ms(700);
		APP_voidDisplayMainScreen(Global_u8SystemIsLocked);	
     55e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     562:	0e 94 59 00 	call	0xb2	; 0xb2 <APP_voidDisplayMainScreen>
	}
	else
	{
		// Not Supported 
	}
}
     566:	26 96       	adiw	r28, 0x06	; 6
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <eep_writebyte>:
#include "bit_math.h"
#include "i2c.h"
#include "i2c_reg.h"

void eep_writebyte(u8 addr,u8 data)
{
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	d8 2f       	mov	r29, r24
     57e:	c6 2f       	mov	r28, r22
	I2C_StartCondition();
     580:	0e 94 af 08 	call	0x115e	; 0x115e <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation(0b01010000);
     584:	80 e5       	ldi	r24, 0x50	; 80
     586:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(addr);
     58a:	8d 2f       	mov	r24, r29
     58c:	0e 94 cd 08 	call	0x119a	; 0x119a <I2C_WriteByte>
	I2C_WriteByte(data);
     590:	8c 2f       	mov	r24, r28
     592:	0e 94 cd 08 	call	0x119a	; 0x119a <I2C_WriteByte>
	I2C_StopCondition();
     596:	0e 94 c9 08 	call	0x1192	; 0x1192 <I2C_StopCondition>
     59a:	8f e3       	ldi	r24, 0x3F	; 63
     59c:	9f e1       	ldi	r25, 0x1F	; 31
     59e:	01 97       	sbiw	r24, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <eep_writebyte+0x26>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <eep_writebyte+0x2c>
     5a4:	00 00       	nop
	_delay_ms(2);
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <eep_readByte>:

u8 eep_readByte(u8 addr)
{
     5ac:	cf 93       	push	r28
     5ae:	c8 2f       	mov	r28, r24
	u8 x=0;
	I2C_StartCondition();
     5b0:	0e 94 af 08 	call	0x115e	; 0x115e <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation(0b01010000);
     5b4:	80 e5       	ldi	r24, 0x50	; 80
     5b6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(addr);
     5ba:	8c 2f       	mov	r24, r28
     5bc:	0e 94 cd 08 	call	0x119a	; 0x119a <I2C_WriteByte>
	I2C_RepeatedStartCondition();
     5c0:	0e 94 bc 08 	call	0x1178	; 0x1178 <I2C_RepeatedStartCondition>
	I2C_Send_SlaveAddressReadOperation(0b01010000);
     5c4:	80 e5       	ldi	r24, 0x50	; 80
     5c6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <I2C_Send_SlaveAddressReadOperation>
	x=I2C_ReadByte();
     5ca:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <I2C_ReadByte>
     5ce:	c8 2f       	mov	r28, r24
	I2C_StopCondition();
     5d0:	0e 94 c9 08 	call	0x1192	; 0x1192 <I2C_StopCondition>
	return x;
     5d4:	8c 2f       	mov	r24, r28
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <keypad_vidInit>:
* \Return value:   : None                               
*******************************************************************************/
void keypad_vidInit(void)
{
	/*	ROW channel direction -> output	*/
	dio_vidConfigChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,OUTPUT);
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	65 e0       	ldi	r22, 0x05	; 5
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,OUTPUT);
     5e4:	41 e0       	ldi	r20, 0x01	; 1
     5e6:	64 e0       	ldi	r22, 0x04	; 4
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,OUTPUT);
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	63 e0       	ldi	r22, 0x03	; 3
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,OUTPUT);
     5f8:	41 e0       	ldi	r20, 0x01	; 1
     5fa:	62 e0       	ldi	r22, 0x02	; 2
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	
	/*	COLUMN channel direction -> input	*/
	dio_vidConfigChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL,INPUT);
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	67 e0       	ldi	r22, 0x07	; 7
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL,INPUT);
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	66 e0       	ldi	r22, 0x06	; 6
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL,INPUT);
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	65 e0       	ldi	r22, 0x05	; 5
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL,INPUT);
     620:	40 e0       	ldi	r20, 0x00	; 0
     622:	63 e0       	ldi	r22, 0x03	; 3
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_LOW);
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	65 e0       	ldi	r22, 0x05	; 5
     62e:	82 e0       	ldi	r24, 0x02	; 2
     630:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	64 e0       	ldi	r22, 0x04	; 4
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_LOW);
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	63 e0       	ldi	r22, 0x03	; 3
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_LOW);
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	62 e0       	ldi	r22, 0x02	; 2
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
     652:	08 95       	ret

00000654 <keypad_bolIsPressed>:


boolean keypad_bolIsPressed(void)
{
	if (
		!dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL)||
     654:	67 e0       	ldi	r22, 0x07	; 7
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	0e 94 89 06 	call	0xd12	; 0xd12 <dio_dioLevelReadChannel>
}


boolean keypad_bolIsPressed(void)
{
	if (
     65c:	88 23       	and	r24, r24
     65e:	a9 f0       	breq	.+42     	; 0x68a <keypad_bolIsPressed+0x36>
		!dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL)||
		!dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL)||
     660:	66 e0       	ldi	r22, 0x06	; 6
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	0e 94 89 06 	call	0xd12	; 0xd12 <dio_dioLevelReadChannel>


boolean keypad_bolIsPressed(void)
{
	if (
		!dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL)||
     668:	88 23       	and	r24, r24
     66a:	89 f0       	breq	.+34     	; 0x68e <keypad_bolIsPressed+0x3a>
		!dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL)||
		!dio_vidReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL)||
     66c:	65 e0       	ldi	r22, 0x05	; 5
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	0e 94 89 06 	call	0xd12	; 0xd12 <dio_dioLevelReadChannel>

boolean keypad_bolIsPressed(void)
{
	if (
		!dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL)||
		!dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL)||
     674:	88 23       	and	r24, r24
     676:	69 f0       	breq	.+26     	; 0x692 <keypad_bolIsPressed+0x3e>
		!dio_vidReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL)||
		!dio_vidReadChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL)
     678:	63 e0       	ldi	r22, 0x03	; 3
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 89 06 	call	0xd12	; 0xd12 <dio_dioLevelReadChannel>
		)
		{
		  return TRUE;
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	88 23       	and	r24, r24
     684:	39 f0       	breq	.+14     	; 0x694 <keypad_bolIsPressed+0x40>
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	05 c0       	rjmp	.+10     	; 0x694 <keypad_bolIsPressed+0x40>
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	03 c0       	rjmp	.+6      	; 0x694 <keypad_bolIsPressed+0x40>
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	01 c0       	rjmp	.+2      	; 0x694 <keypad_bolIsPressed+0x40>
     692:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
		  return FALSE;
		}
}
     694:	89 2f       	mov	r24, r25
     696:	08 95       	ret

00000698 <keypad_GetCol>:
u8 keypad_GetCol(void)
{
     698:	cf 93       	push	r28
	u8 loc_col = 0;
	if (STD_LOW == dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL))
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	0e 94 89 06 	call	0xd12	; 0xd12 <dio_dioLevelReadChannel>
     6a2:	88 23       	and	r24, r24
     6a4:	a1 f0       	breq	.+40     	; 0x6ce <keypad_GetCol+0x36>
	{
		loc_col = 1;	
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL))
     6a6:	66 e0       	ldi	r22, 0x06	; 6
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	0e 94 89 06 	call	0xd12	; 0xd12 <dio_dioLevelReadChannel>
     6ae:	88 23       	and	r24, r24
     6b0:	81 f0       	breq	.+32     	; 0x6d2 <keypad_GetCol+0x3a>
	{
	 loc_col = 2;	
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL))
     6b2:	65 e0       	ldi	r22, 0x05	; 5
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	0e 94 89 06 	call	0xd12	; 0xd12 <dio_dioLevelReadChannel>
     6ba:	88 23       	and	r24, r24
     6bc:	61 f0       	breq	.+24     	; 0x6d6 <keypad_GetCol+0x3e>
	{
	 loc_col = 3;	
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL))
     6be:	63 e0       	ldi	r22, 0x03	; 3
     6c0:	83 e0       	ldi	r24, 0x03	; 3
     6c2:	0e 94 89 06 	call	0xd12	; 0xd12 <dio_dioLevelReadChannel>
     6c6:	81 11       	cpse	r24, r1
     6c8:	08 c0       	rjmp	.+16     	; 0x6da <keypad_GetCol+0x42>
	{
	 loc_col = 4;	
     6ca:	c4 e0       	ldi	r28, 0x04	; 4
     6cc:	07 c0       	rjmp	.+14     	; 0x6dc <keypad_GetCol+0x44>
u8 keypad_GetCol(void)
{
	u8 loc_col = 0;
	if (STD_LOW == dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL))
	{
		loc_col = 1;	
     6ce:	c1 e0       	ldi	r28, 0x01	; 1
     6d0:	05 c0       	rjmp	.+10     	; 0x6dc <keypad_GetCol+0x44>
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL))
	{
	 loc_col = 2;	
     6d2:	c2 e0       	ldi	r28, 0x02	; 2
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <keypad_GetCol+0x44>
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL))
	{
	 loc_col = 3;	
     6d6:	c3 e0       	ldi	r28, 0x03	; 3
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <keypad_GetCol+0x44>
		  return FALSE;
		}
}
u8 keypad_GetCol(void)
{
	u8 loc_col = 0;
     6da:	c0 e0       	ldi	r28, 0x00	; 0
	}
	else
	{
		/*	do nothing	*/
	}
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	65 e0       	ldi	r22, 0x05	; 5
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	64 e0       	ldi	r22, 0x04	; 4
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	63 e0       	ldi	r22, 0x03	; 3
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_HIGH);
     6fa:	41 e0       	ldi	r20, 0x01	; 1
     6fc:	62 e0       	ldi	r22, 0x02	; 2
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	
	return loc_col;
}
     704:	8c 2f       	mov	r24, r28
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <keypad_GetRow>:

u8 keypad_GetRow(u8 col)
{
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	c8 2f       	mov	r28, r24
	u8 loc_row =0;
	
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_LOW);
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	65 e0       	ldi	r22, 0x05	; 5
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
     71c:	0e 94 4c 03 	call	0x698	; 0x698 <keypad_GetCol>
     720:	18 2f       	mov	r17, r24
	{
		loc_row = 1;	
	}
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	65 e0       	ldi	r22, 0x05	; 5
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	64 e0       	ldi	r22, 0x04	; 4
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
     736:	0e 94 4c 03 	call	0x698	; 0x698 <keypad_GetCol>
     73a:	c8 17       	cp	r28, r24
     73c:	29 f0       	breq	.+10     	; 0x748 <keypad_GetRow+0x3e>
	return loc_col;
}

u8 keypad_GetRow(u8 col)
{
	u8 loc_row =0;
     73e:	d1 e0       	ldi	r29, 0x01	; 1
     740:	1c 17       	cp	r17, r28
     742:	19 f0       	breq	.+6      	; 0x74a <keypad_GetRow+0x40>
     744:	d0 e0       	ldi	r29, 0x00	; 0
     746:	01 c0       	rjmp	.+2      	; 0x74a <keypad_GetRow+0x40>
	}
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
	if (keypad_GetCol() == col)
	{
		loc_row = 2;	
     748:	d2 e0       	ldi	r29, 0x02	; 2
	}
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	64 e0       	ldi	r22, 0x04	; 4
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_LOW);
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	63 e0       	ldi	r22, 0x03	; 3
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
     75e:	0e 94 4c 03 	call	0x698	; 0x698 <keypad_GetCol>
     762:	c8 13       	cpse	r28, r24
     764:	01 c0       	rjmp	.+2      	; 0x768 <keypad_GetRow+0x5e>
	{
		loc_row = 3;	
     766:	d3 e0       	ldi	r29, 0x03	; 3
	}
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	63 e0       	ldi	r22, 0x03	; 3
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_LOW);
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	62 e0       	ldi	r22, 0x02	; 2
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
     77c:	0e 94 4c 03 	call	0x698	; 0x698 <keypad_GetCol>
     780:	c8 13       	cpse	r28, r24
     782:	01 c0       	rjmp	.+2      	; 0x786 <keypad_GetRow+0x7c>
	{
		loc_row = 4;	
     784:	d4 e0       	ldi	r29, 0x04	; 4
	}
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_LOW);
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	65 e0       	ldi	r22, 0x05	; 5
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	64 e0       	ldi	r22, 0x04	; 4
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_LOW);
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_LOW);
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	62 e0       	ldi	r22, 0x02	; 2
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	return loc_row;
}
     7ae:	8d 2f       	mov	r24, r29
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	08 95       	ret

000007b8 <keypad_u8GetKey>:
/*	it shall be called periodically	*/
u8 keypad_u8GetKey(void)
{
     7b8:	cf 93       	push	r28
	u8 loc_row = 0;
	u8 loc_col = 0;
	
	if (TRUE == keypad_bolIsPressed())
     7ba:	0e 94 2a 03 	call	0x654	; 0x654 <keypad_bolIsPressed>
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	d9 f4       	brne	.+54     	; 0x7f8 <keypad_u8GetKey+0x40>
	{
		//loc_col = 1;
		//loc_row = 1;
		loc_col = keypad_GetCol();
     7c2:	0e 94 4c 03 	call	0x698	; 0x698 <keypad_GetCol>
     7c6:	c8 2f       	mov	r28, r24
		loc_row = keypad_GetRow(loc_col);
     7c8:	0e 94 85 03 	call	0x70a	; 0x70a <keypad_GetRow>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	31 ee       	ldi	r19, 0xE1	; 225
     7d0:	94 e0       	ldi	r25, 0x04	; 4
     7d2:	21 50       	subi	r18, 0x01	; 1
     7d4:	30 40       	sbci	r19, 0x00	; 0
     7d6:	90 40       	sbci	r25, 0x00	; 0
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <keypad_u8GetKey+0x1a>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <keypad_u8GetKey+0x24>
     7dc:	00 00       	nop
		_delay_ms(100);	/*	press time	*/	
		return 	keys_value[loc_row-1][loc_col-1];
     7de:	e8 2f       	mov	r30, r24
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	e9 57       	subi	r30, 0x79	; 121
     7ec:	fe 4f       	sbci	r31, 0xFE	; 254
     7ee:	ec 0f       	add	r30, r28
     7f0:	f1 1d       	adc	r31, r1
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	80 81       	ld	r24, Z
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <keypad_u8GetKey+0x42>
	}
	else
	{
		return 0xFF;
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <enablePulse>:
* \Return value:   : None                                 
*******************************************************************************/

static void enablePulse(void)
{
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_HIGH);
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	62 e0       	ldi	r22, 0x02	; 2
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     808:	85 e0       	ldi	r24, 0x05	; 5
     80a:	8a 95       	dec	r24
     80c:	f1 f7       	brne	.-4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     80e:	00 00       	nop
	_delay_us(1);
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_LOW);
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	62 e0       	ldi	r22, 0x02	; 2
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     81a:	8f e3       	ldi	r24, 0x3F	; 63
     81c:	9f e1       	ldi	r25, 0x1F	; 31
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     822:	00 c0       	rjmp	.+0      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     824:	00 00       	nop
     826:	08 95       	ret

00000828 <lcd_vidSendCmd>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : cmd	-> LCD command ID                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendCmd(lcd_cmd_t cmd)
{
     828:	cf 93       	push	r28
     82a:	c8 2f       	mov	r28, r24
     82c:	8f e9       	ldi	r24, 0x9F	; 159
     82e:	9f e0       	ldi	r25, 0x0F	; 15
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <lcd_vidSendCmd+0x8>
     834:	00 c0       	rjmp	.+0      	; 0x836 <lcd_vidSendCmd+0xe>
     836:	00 00       	nop
	/*	RS -> Command Mode	*/
	_delay_ms(1);
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_LOW);
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	63 e0       	ldi	r22, 0x03	; 3
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,4));
     842:	c4 fb       	bst	r28, 4
     844:	44 27       	eor	r20, r20
     846:	40 f9       	bld	r20, 0
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D5_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,5));
     850:	c5 fb       	bst	r28, 5
     852:	44 27       	eor	r20, r20
     854:	40 f9       	bld	r20, 0
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D6_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,6));
     85e:	c6 fb       	bst	r28, 6
     860:	44 27       	eor	r20, r20
     862:	40 f9       	bld	r20, 0
     864:	62 e0       	ldi	r22, 0x02	; 2
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D7_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,7));
     86c:	4c 2f       	mov	r20, r28
     86e:	44 1f       	adc	r20, r20
     870:	44 27       	eor	r20, r20
     872:	44 1f       	adc	r20, r20
     874:	64 e0       	ldi	r22, 0x04	; 4
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	
	enablePulse();
     87c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,0));
     880:	4c 2f       	mov	r20, r28
     882:	41 70       	andi	r20, 0x01	; 1
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D5_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,1));
     88c:	c1 fb       	bst	r28, 1
     88e:	44 27       	eor	r20, r20
     890:	40 f9       	bld	r20, 0
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D6_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,2));
     89a:	c2 fb       	bst	r28, 2
     89c:	44 27       	eor	r20, r20
     89e:	40 f9       	bld	r20, 0
     8a0:	62 e0       	ldi	r22, 0x02	; 2
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D7_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,3));
     8a8:	c3 fb       	bst	r28, 3
     8aa:	44 27       	eor	r20, r20
     8ac:	40 f9       	bld	r20, 0
     8ae:	64 e0       	ldi	r22, 0x04	; 4
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	
	enablePulse();
     8b6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <enablePulse>
}
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <lcd_vidSendData>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : data	-> LCD data input                                                                       
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendData(u8 data)
{
     8be:	cf 93       	push	r28
     8c0:	c8 2f       	mov	r28, r24
	/*	RS -> Data Mode	*/
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_HIGH);
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	63 e0       	ldi	r22, 0x03	; 3
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,4));
     8cc:	c4 fb       	bst	r28, 4
     8ce:	44 27       	eor	r20, r20
     8d0:	40 f9       	bld	r20, 0
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,5));
     8da:	c5 fb       	bst	r28, 5
     8dc:	44 27       	eor	r20, r20
     8de:	40 f9       	bld	r20, 0
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,6));
     8e8:	c6 fb       	bst	r28, 6
     8ea:	44 27       	eor	r20, r20
     8ec:	40 f9       	bld	r20, 0
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,7));
     8f6:	4c 2f       	mov	r20, r28
     8f8:	44 1f       	adc	r20, r20
     8fa:	44 27       	eor	r20, r20
     8fc:	44 1f       	adc	r20, r20
     8fe:	64 e0       	ldi	r22, 0x04	; 4
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	
	enablePulse();
     906:	0e 94 ff 03 	call	0x7fe	; 0x7fe <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,0));
     90a:	4c 2f       	mov	r20, r28
     90c:	41 70       	andi	r20, 0x01	; 1
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,1));
     916:	c1 fb       	bst	r28, 1
     918:	44 27       	eor	r20, r20
     91a:	40 f9       	bld	r20, 0
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,2));
     924:	c2 fb       	bst	r28, 2
     926:	44 27       	eor	r20, r20
     928:	40 f9       	bld	r20, 0
     92a:	62 e0       	ldi	r22, 0x02	; 2
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,3));
     932:	c3 fb       	bst	r28, 3
     934:	44 27       	eor	r20, r20
     936:	40 f9       	bld	r20, 0
     938:	64 e0       	ldi	r22, 0x04	; 4
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	0e 94 1c 06 	call	0xc38	; 0xc38 <dio_vidWriteChannel>
	
	enablePulse();
     940:	0e 94 ff 03 	call	0x7fe	; 0x7fe <enablePulse>
	
}
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <lcd_vidGotoRowColumn>:
					 column -> LCD column ID															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidGotoRowColumn(u8 row, u8 column)
{
	switch (row)
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	59 f0       	breq	.+22     	; 0x962 <lcd_vidGotoRowColumn+0x1a>
     94c:	28 f0       	brcs	.+10     	; 0x958 <lcd_vidGotoRowColumn+0x10>
     94e:	82 30       	cpi	r24, 0x02	; 2
     950:	69 f0       	breq	.+26     	; 0x96c <lcd_vidGotoRowColumn+0x24>
     952:	83 30       	cpi	r24, 0x03	; 3
     954:	81 f0       	breq	.+32     	; 0x976 <lcd_vidGotoRowColumn+0x2e>
     956:	08 95       	ret
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
     958:	80 e8       	ldi	r24, 0x80	; 128
     95a:	86 0f       	add	r24, r22
     95c:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
		break;
     960:	08 95       	ret
	case 1:
		/* Row 1 */
		lcd_vidSendCmd(0xC0+column);
     962:	80 ec       	ldi	r24, 0xC0	; 192
     964:	86 0f       	add	r24, r22
     966:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
		break;
     96a:	08 95       	ret
	case 2:
	/* Row 1 */
	lcd_vidSendCmd(0x94+column);
     96c:	84 e9       	ldi	r24, 0x94	; 148
     96e:	86 0f       	add	r24, r22
     970:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
	break;
     974:	08 95       	ret
	
	case 3:
	/* Row 1 */
	lcd_vidSendCmd(0xD4+column);
     976:	84 ed       	ldi	r24, 0xD4	; 212
     978:	86 0f       	add	r24, r22
     97a:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
     97e:	08 95       	ret

00000980 <lcd_vidDisplyChar>:
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
	lcd_vidSendData(chr);
     980:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_vidSendData>
     984:	08 95       	ret

00000986 <lcd_vidDisplyStr>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ec 01       	movw	r28, r24
	while (*str != '\0')
     98c:	88 81       	ld	r24, Y
     98e:	88 23       	and	r24, r24
     990:	31 f0       	breq	.+12     	; 0x99e <lcd_vidDisplyStr+0x18>
     992:	21 96       	adiw	r28, 0x01	; 1
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
	lcd_vidSendData(chr);
     994:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_vidSendData>
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
     998:	89 91       	ld	r24, Y+
     99a:	81 11       	cpse	r24, r1
     99c:	fb cf       	rjmp	.-10     	; 0x994 <lcd_vidDisplyStr+0xe>
	{
		lcd_vidDisplyChar(*str);
		str++;
	}
}
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <lcd_vidCustomWrite>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidCustomWrite(void)
{
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	c3 e6       	ldi	r28, 0x63	; 99
     9b0:	d0 e0       	ldi	r29, 0x00	; 0
     9b2:	68 94       	set
     9b4:	ff 24       	eor	r15, r15
     9b6:	f6 f8       	bld	r15, 6
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
     9b8:	8f 2d       	mov	r24, r15
     9ba:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
     9be:	8e 01       	movw	r16, r28
     9c0:	08 5f       	subi	r16, 0xF8	; 248
     9c2:	1f 4f       	sbci	r17, 0xFF	; 255
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
	lcd_vidSendData(chr);
     9c4:	89 91       	ld	r24, Y+
     9c6:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_vidSendData>
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
     9ca:	c0 17       	cp	r28, r16
     9cc:	d1 07       	cpc	r29, r17
     9ce:	d1 f7       	brne	.-12     	; 0x9c4 <lcd_vidCustomWrite+0x20>
     9d0:	88 e0       	ldi	r24, 0x08	; 8
     9d2:	f8 0e       	add	r15, r24
     9d4:	e8 01       	movw	r28, r16
void lcd_vidCustomWrite(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	f8 12       	cpse	r15, r24
     9da:	ee cf       	rjmp	.-36     	; 0x9b8 <lcd_vidCustomWrite+0x14>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	08 95       	ret

000009e8 <lcd_vidInit>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidInit(void)
{
	dio_vidConfigChannel(LCD_RS_PORT, LCD_RS_CHANNEL, OUTPUT);
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	63 e0       	ldi	r22, 0x03	; 3
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_EN_PORT, LCD_EN_CHANNEL, OUTPUT);
     9f2:	41 e0       	ldi	r20, 0x01	; 1
     9f4:	62 e0       	ldi	r22, 0x02	; 2
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>

	dio_vidConfigChannel(LCD_D4_PORT, LCD_D4_CHANNEL, OUTPUT);
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D5_PORT, LCD_D5_CHANNEL, OUTPUT);
     a06:	41 e0       	ldi	r20, 0x01	; 1
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D6_PORT, LCD_D6_CHANNEL, OUTPUT);
     a10:	41 e0       	ldi	r20, 0x01	; 1
     a12:	62 e0       	ldi	r22, 0x02	; 2
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D7_PORT, LCD_D7_CHANNEL, OUTPUT);
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	64 e0       	ldi	r22, 0x04	; 4
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	0e 94 9f 05 	call	0xb3e	; 0xb3e <dio_vidConfigChannel>
     a24:	2f ef       	ldi	r18, 0xFF	; 255
     a26:	89 ef       	ldi	r24, 0xF9	; 249
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	21 50       	subi	r18, 0x01	; 1
     a2c:	80 40       	sbci	r24, 0x00	; 0
     a2e:	90 40       	sbci	r25, 0x00	; 0
     a30:	e1 f7       	brne	.-8      	; 0xa2a <lcd_vidInit+0x42>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <lcd_vidInit+0x4c>
     a34:	00 00       	nop

	_delay_ms(20);

	lcd_vidSendCmd(0x03);
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
     a3c:	8f e1       	ldi	r24, 0x1F	; 31
     a3e:	9e e4       	ldi	r25, 0x4E	; 78
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <lcd_vidInit+0x58>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <lcd_vidInit+0x5e>
     a46:	00 00       	nop
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a4e:	8f e8       	ldi	r24, 0x8F	; 143
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <lcd_vidInit+0x6a>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <lcd_vidInit+0x70>
     a58:	00 00       	nop
	_delay_us(100);
	lcd_vidSendCmd(0x03);
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
	lcd_vidSendCmd(0x02);
     a60:	82 e0       	ldi	r24, 0x02	; 2
     a62:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_4BIT_MODE);
     a66:	88 e2       	ldi	r24, 0x28	; 40
     a68:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_CURSOR_OFF);
     a6c:	8c e0       	ldi	r24, 0x0C	; 12
     a6e:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
	lcd_vidCustomWrite();
     a72:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <lcd_vidCustomWrite>
{
	switch (row)
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
     a76:	80 e8       	ldi	r24, 0x80	; 128
     a78:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
     a7c:	08 95       	ret

00000a7e <lcd_vidClrDislay>:
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidClrDislay(void)
{
	lcd_vidSendCmd(_LCD_CLEAR);
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	0e 94 14 04 	call	0x828	; 0x828 <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a84:	8f e1       	ldi	r24, 0x1F	; 31
     a86:	9e e4       	ldi	r25, 0x4E	; 78
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	f1 f7       	brne	.-4      	; 0xa88 <lcd_vidClrDislay+0xa>
     a8c:	00 c0       	rjmp	.+0      	; 0xa8e <lcd_vidClrDislay+0x10>
     a8e:	00 00       	nop
     a90:	08 95       	ret

00000a92 <lcd_vidDisplayNumbers>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : copy_u8Number
* \Return value:   : None
*******************************************************************************/
void lcd_vidDisplayNumbers(u32 copy_u8Number)
{
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	2c 97       	sbiw	r28, 0x0c	; 12
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8Buffer[12] ; 
	u8 LOC_u8Counter = 0 ; 
	u8  LOC_u8ASCII ; 
	if(copy_u8Number == 0)
     ab0:	61 15       	cp	r22, r1
     ab2:	71 05       	cpc	r23, r1
     ab4:	81 05       	cpc	r24, r1
     ab6:	91 05       	cpc	r25, r1
     ab8:	21 f4       	brne	.+8      	; 0xac2 <lcd_vidDisplayNumbers+0x30>
	{
		lcd_vidSendData('0'); 
     aba:	80 e3       	ldi	r24, 0x30	; 48
     abc:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_vidSendData>
     ac0:	2b c0       	rjmp	.+86     	; 0xb18 <lcd_vidDisplayNumbers+0x86>
     ac2:	10 e0       	ldi	r17, 0x00	; 0
		return ; 
	}
	while(copy_u8Number)
	{
		LOC_u8Counter++ ;
		LOC_u8ASCII = copy_u8Number % 10 ; 
     ac4:	0f 2e       	mov	r0, r31
     ac6:	fa e0       	ldi	r31, 0x0A	; 10
     ac8:	cf 2e       	mov	r12, r31
     aca:	d1 2c       	mov	r13, r1
     acc:	e1 2c       	mov	r14, r1
     ace:	f1 2c       	mov	r15, r1
     ad0:	f0 2d       	mov	r31, r0
		lcd_vidSendData('0'); 
		return ; 
	}
	while(copy_u8Number)
	{
		LOC_u8Counter++ ;
     ad2:	1f 5f       	subi	r17, 0xFF	; 255
		LOC_u8ASCII = copy_u8Number % 10 ; 
     ad4:	a7 01       	movw	r20, r14
     ad6:	96 01       	movw	r18, r12
     ad8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__udivmodsi4>
		LOC_u8ASCII = LOC_u8ASCII + '0' ; 
		LOC_u8Buffer[LOC_u8Counter]=LOC_u8ASCII;
     adc:	e1 e0       	ldi	r30, 0x01	; 1
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ec 0f       	add	r30, r28
     ae2:	fd 1f       	adc	r31, r29
     ae4:	e1 0f       	add	r30, r17
     ae6:	f1 1d       	adc	r31, r1
     ae8:	60 5d       	subi	r22, 0xD0	; 208
     aea:	60 83       	st	Z, r22
		copy_u8Number = copy_u8Number / 10 ; 
     aec:	62 2f       	mov	r22, r18
     aee:	73 2f       	mov	r23, r19
     af0:	84 2f       	mov	r24, r20
     af2:	95 2f       	mov	r25, r21
	if(copy_u8Number == 0)
	{
		lcd_vidSendData('0'); 
		return ; 
	}
	while(copy_u8Number)
     af4:	61 15       	cp	r22, r1
     af6:	71 05       	cpc	r23, r1
     af8:	81 05       	cpc	r24, r1
     afa:	91 05       	cpc	r25, r1
     afc:	51 f7       	brne	.-44     	; 0xad2 <lcd_vidDisplayNumbers+0x40>
		LOC_u8ASCII = copy_u8Number % 10 ; 
		LOC_u8ASCII = LOC_u8ASCII + '0' ; 
		LOC_u8Buffer[LOC_u8Counter]=LOC_u8ASCII;
		copy_u8Number = copy_u8Number / 10 ; 
	}
	while(LOC_u8Counter)
     afe:	11 23       	and	r17, r17
     b00:	59 f0       	breq	.+22     	; 0xb18 <lcd_vidDisplayNumbers+0x86>
	{
		lcd_vidSendData(LOC_u8Buffer[LOC_u8Counter]); 
     b02:	e1 e0       	ldi	r30, 0x01	; 1
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	ec 0f       	add	r30, r28
     b08:	fd 1f       	adc	r31, r29
     b0a:	e1 0f       	add	r30, r17
     b0c:	f1 1d       	adc	r31, r1
     b0e:	80 81       	ld	r24, Z
     b10:	0e 94 5f 04 	call	0x8be	; 0x8be <lcd_vidSendData>
		LOC_u8Counter--; 
     b14:	11 50       	subi	r17, 0x01	; 1
		LOC_u8ASCII = copy_u8Number % 10 ; 
		LOC_u8ASCII = LOC_u8ASCII + '0' ; 
		LOC_u8Buffer[LOC_u8Counter]=LOC_u8ASCII;
		copy_u8Number = copy_u8Number / 10 ; 
	}
	while(LOC_u8Counter)
     b16:	a9 f7       	brne	.-22     	; 0xb02 <lcd_vidDisplayNumbers+0x70>
	{
		lcd_vidSendData(LOC_u8Buffer[LOC_u8Counter]); 
		LOC_u8Counter--; 
	}
	
}
     b18:	2c 96       	adiw	r28, 0x0c	; 12
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	df 91       	pop	r29
     b26:	cf 91       	pop	r28
     b28:	1f 91       	pop	r17
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	df 90       	pop	r13
     b30:	cf 90       	pop	r12
     b32:	08 95       	ret

00000b34 <main>:
#include "PasswordLock.h"
#include <avr/io.h>

int main(void)
{
	PasswordLock_voidInit(); 
     b34:	0e 94 b3 01 	call	0x366	; 0x366 <PasswordLock_voidInit>
    while (1) 
    {
		PasswordLock_voidStart();
     b38:	0e 94 16 02 	call	0x42c	; 0x42c <PasswordLock_voidStart>
     b3c:	fd cf       	rjmp	.-6      	; 0xb38 <main+0x4>

00000b3e <dio_vidConfigChannel>:
	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	21 f1       	breq	.+72     	; 0xb8a <dio_vidConfigChannel+0x4c>
     b42:	30 f0       	brcs	.+12     	; 0xb50 <dio_vidConfigChannel+0x12>
     b44:	82 30       	cpi	r24, 0x02	; 2
     b46:	f1 f1       	breq	.+124    	; 0xbc4 <dio_vidConfigChannel+0x86>
     b48:	83 30       	cpi	r24, 0x03	; 3
     b4a:	09 f4       	brne	.+2      	; 0xb4e <dio_vidConfigChannel+0x10>
     b4c:	58 c0       	rjmp	.+176    	; 0xbfe <dio_vidConfigChannel+0xc0>
     b4e:	08 95       	ret
     b50:	41 30       	cpi	r20, 0x01	; 1
     b52:	59 f4       	brne	.+22     	; 0xb6a <dio_vidConfigChannel+0x2c>
     b54:	2a b3       	in	r18, 0x1a	; 26
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <dio_vidConfigChannel+0x22>
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	6a 95       	dec	r22
     b62:	e2 f7       	brpl	.-8      	; 0xb5c <dio_vidConfigChannel+0x1e>
     b64:	82 2b       	or	r24, r18
     b66:	8a bb       	out	0x1a, r24	; 26
     b68:	08 95       	ret
     b6a:	2a b3       	in	r18, 0x1a	; 26
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <dio_vidConfigChannel+0x38>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	6a 95       	dec	r22
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <dio_vidConfigChannel+0x34>
     b7a:	80 95       	com	r24
     b7c:	92 2f       	mov	r25, r18
     b7e:	98 23       	and	r25, r24
     b80:	9a bb       	out	0x1a, r25	; 26
     b82:	9b b3       	in	r25, 0x1b	; 27
     b84:	89 23       	and	r24, r25
     b86:	8b bb       	out	0x1b, r24	; 27
     b88:	08 95       	ret
     b8a:	41 30       	cpi	r20, 0x01	; 1
     b8c:	59 f4       	brne	.+22     	; 0xba4 <dio_vidConfigChannel+0x66>
     b8e:	27 b3       	in	r18, 0x17	; 23
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <dio_vidConfigChannel+0x5c>
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	6a 95       	dec	r22
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <dio_vidConfigChannel+0x58>
     b9e:	82 2b       	or	r24, r18
     ba0:	87 bb       	out	0x17, r24	; 23
     ba2:	08 95       	ret
     ba4:	27 b3       	in	r18, 0x17	; 23
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <dio_vidConfigChannel+0x72>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	6a 95       	dec	r22
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <dio_vidConfigChannel+0x6e>
     bb4:	80 95       	com	r24
     bb6:	92 2f       	mov	r25, r18
     bb8:	98 23       	and	r25, r24
     bba:	97 bb       	out	0x17, r25	; 23
     bbc:	98 b3       	in	r25, 0x18	; 24
     bbe:	89 23       	and	r24, r25
     bc0:	88 bb       	out	0x18, r24	; 24
     bc2:	08 95       	ret
     bc4:	41 30       	cpi	r20, 0x01	; 1
     bc6:	59 f4       	brne	.+22     	; 0xbde <dio_vidConfigChannel+0xa0>
     bc8:	24 b3       	in	r18, 0x14	; 20
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <dio_vidConfigChannel+0x96>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	6a 95       	dec	r22
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <dio_vidConfigChannel+0x92>
     bd8:	82 2b       	or	r24, r18
     bda:	84 bb       	out	0x14, r24	; 20
     bdc:	08 95       	ret
     bde:	24 b3       	in	r18, 0x14	; 20
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 c0       	rjmp	.+4      	; 0xbea <dio_vidConfigChannel+0xac>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	6a 95       	dec	r22
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <dio_vidConfigChannel+0xa8>
     bee:	80 95       	com	r24
     bf0:	92 2f       	mov	r25, r18
     bf2:	98 23       	and	r25, r24
     bf4:	94 bb       	out	0x14, r25	; 20
     bf6:	95 b3       	in	r25, 0x15	; 21
     bf8:	89 23       	and	r24, r25
     bfa:	85 bb       	out	0x15, r24	; 21
     bfc:	08 95       	ret
     bfe:	41 30       	cpi	r20, 0x01	; 1
     c00:	59 f4       	brne	.+22     	; 0xc18 <dio_vidConfigChannel+0xda>
     c02:	21 b3       	in	r18, 0x11	; 17
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <dio_vidConfigChannel+0xd0>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	6a 95       	dec	r22
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <dio_vidConfigChannel+0xcc>
     c12:	82 2b       	or	r24, r18
     c14:	81 bb       	out	0x11, r24	; 17
     c16:	08 95       	ret
     c18:	21 b3       	in	r18, 0x11	; 17
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <dio_vidConfigChannel+0xe6>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	6a 95       	dec	r22
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <dio_vidConfigChannel+0xe2>
     c28:	80 95       	com	r24
     c2a:	92 2f       	mov	r25, r18
     c2c:	98 23       	and	r25, r24
     c2e:	91 bb       	out	0x11, r25	; 17
     c30:	92 b3       	in	r25, 0x12	; 18
     c32:	89 23       	and	r24, r25
     c34:	82 bb       	out	0x12, r24	; 18
     c36:	08 95       	ret

00000c38 <dio_vidWriteChannel>:
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	01 f1       	breq	.+64     	; 0xc7c <dio_vidWriteChannel+0x44>
     c3c:	30 f0       	brcs	.+12     	; 0xc4a <dio_vidWriteChannel+0x12>
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	b1 f1       	breq	.+108    	; 0xcae <dio_vidWriteChannel+0x76>
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	09 f4       	brne	.+2      	; 0xc48 <dio_vidWriteChannel+0x10>
     c46:	4c c0       	rjmp	.+152    	; 0xce0 <dio_vidWriteChannel+0xa8>
     c48:	08 95       	ret
     c4a:	41 11       	cpse	r20, r1
     c4c:	0c c0       	rjmp	.+24     	; 0xc66 <dio_vidWriteChannel+0x2e>
     c4e:	2b b3       	in	r18, 0x1b	; 27
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <dio_vidWriteChannel+0x22>
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	6a 95       	dec	r22
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <dio_vidWriteChannel+0x1e>
     c5e:	80 95       	com	r24
     c60:	82 23       	and	r24, r18
     c62:	8b bb       	out	0x1b, r24	; 27
     c64:	08 95       	ret
     c66:	2b b3       	in	r18, 0x1b	; 27
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <dio_vidWriteChannel+0x3a>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	6a 95       	dec	r22
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <dio_vidWriteChannel+0x36>
     c76:	82 2b       	or	r24, r18
     c78:	8b bb       	out	0x1b, r24	; 27
     c7a:	08 95       	ret
     c7c:	41 11       	cpse	r20, r1
     c7e:	0c c0       	rjmp	.+24     	; 0xc98 <dio_vidWriteChannel+0x60>
     c80:	28 b3       	in	r18, 0x18	; 24
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <dio_vidWriteChannel+0x54>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	6a 95       	dec	r22
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <dio_vidWriteChannel+0x50>
     c90:	80 95       	com	r24
     c92:	82 23       	and	r24, r18
     c94:	88 bb       	out	0x18, r24	; 24
     c96:	08 95       	ret
     c98:	28 b3       	in	r18, 0x18	; 24
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <dio_vidWriteChannel+0x6c>
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	6a 95       	dec	r22
     ca6:	e2 f7       	brpl	.-8      	; 0xca0 <dio_vidWriteChannel+0x68>
     ca8:	82 2b       	or	r24, r18
     caa:	88 bb       	out	0x18, r24	; 24
     cac:	08 95       	ret
     cae:	41 11       	cpse	r20, r1
     cb0:	0c c0       	rjmp	.+24     	; 0xcca <dio_vidWriteChannel+0x92>
     cb2:	25 b3       	in	r18, 0x15	; 21
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <dio_vidWriteChannel+0x86>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	6a 95       	dec	r22
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <dio_vidWriteChannel+0x82>
     cc2:	80 95       	com	r24
     cc4:	82 23       	and	r24, r18
     cc6:	85 bb       	out	0x15, r24	; 21
     cc8:	08 95       	ret
     cca:	25 b3       	in	r18, 0x15	; 21
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <dio_vidWriteChannel+0x9e>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	6a 95       	dec	r22
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <dio_vidWriteChannel+0x9a>
     cda:	82 2b       	or	r24, r18
     cdc:	85 bb       	out	0x15, r24	; 21
     cde:	08 95       	ret
     ce0:	41 11       	cpse	r20, r1
     ce2:	0c c0       	rjmp	.+24     	; 0xcfc <dio_vidWriteChannel+0xc4>
     ce4:	22 b3       	in	r18, 0x12	; 18
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <dio_vidWriteChannel+0xb8>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	6a 95       	dec	r22
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <dio_vidWriteChannel+0xb4>
     cf4:	80 95       	com	r24
     cf6:	82 23       	and	r24, r18
     cf8:	82 bb       	out	0x12, r24	; 18
     cfa:	08 95       	ret
     cfc:	22 b3       	in	r18, 0x12	; 18
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <dio_vidWriteChannel+0xd0>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	6a 95       	dec	r22
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <dio_vidWriteChannel+0xcc>
     d0c:	82 2b       	or	r24, r18
     d0e:	82 bb       	out	0x12, r24	; 18
     d10:	08 95       	ret

00000d12 <dio_dioLevelReadChannel>:
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	dio_level_t LOC_u8PinValue = STD_HIGH; 
	// Check Input Range
	if(channel >= DIO_PIN0 && channel <= DIO_PIN7)
     d12:	68 30       	cpi	r22, 0x08	; 8
     d14:	60 f5       	brcc	.+88     	; 0xd6e <dio_dioLevelReadChannel+0x5c>
	{
		switch(port)
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	79 f0       	breq	.+30     	; 0xd38 <dio_dioLevelReadChannel+0x26>
     d1a:	28 f0       	brcs	.+10     	; 0xd26 <dio_dioLevelReadChannel+0x14>
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	a9 f0       	breq	.+42     	; 0xd4a <dio_dioLevelReadChannel+0x38>
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	e1 f0       	breq	.+56     	; 0xd5c <dio_dioLevelReadChannel+0x4a>
     d24:	26 c0       	rjmp	.+76     	; 0xd72 <dio_dioLevelReadChannel+0x60>
		{
			case DIO_PORTA :
				LOC_u8PinValue =   CHECK_BIT(DIO_PINA_REG,channel);
     d26:	89 b3       	in	r24, 0x19	; 25
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <dio_dioLevelReadChannel+0x1e>
     d2c:	95 95       	asr	r25
     d2e:	87 95       	ror	r24
     d30:	6a 95       	dec	r22
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <dio_dioLevelReadChannel+0x1a>
     d34:	81 70       	andi	r24, 0x01	; 1
				break ;
     d36:	08 95       	ret
			case DIO_PORTB : 
				LOC_u8PinValue =   CHECK_BIT(DIO_PINB_REG,channel);
     d38:	86 b3       	in	r24, 0x16	; 22
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <dio_dioLevelReadChannel+0x30>
     d3e:	95 95       	asr	r25
     d40:	87 95       	ror	r24
     d42:	6a 95       	dec	r22
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <dio_dioLevelReadChannel+0x2c>
     d46:	81 70       	andi	r24, 0x01	; 1
				break ;
     d48:	08 95       	ret
			case DIO_PORTC :
				LOC_u8PinValue =   CHECK_BIT(DIO_PINC_REG,channel);
     d4a:	83 b3       	in	r24, 0x13	; 19
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <dio_dioLevelReadChannel+0x42>
     d50:	95 95       	asr	r25
     d52:	87 95       	ror	r24
     d54:	6a 95       	dec	r22
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <dio_dioLevelReadChannel+0x3e>
     d58:	81 70       	andi	r24, 0x01	; 1
				break ;
     d5a:	08 95       	ret
			case DIO_PORTD :
				LOC_u8PinValue =   CHECK_BIT(DIO_PIND_REG,channel);
     d5c:	80 b3       	in	r24, 0x10	; 16
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <dio_dioLevelReadChannel+0x54>
     d62:	95 95       	asr	r25
     d64:	87 95       	ror	r24
     d66:	6a 95       	dec	r22
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <dio_dioLevelReadChannel+0x50>
     d6a:	81 70       	andi	r24, 0x01	; 1
				break ;
     d6c:	08 95       	ret
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	dio_level_t LOC_u8PinValue = STD_HIGH; 
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	08 95       	ret
     d72:	81 e0       	ldi	r24, 0x01	; 1
				break ;
			default : break;
		}
	}
	return LOC_u8PinValue; 
}
     d74:	08 95       	ret

00000d76 <Timer_voidInitTimer1>:
        // <TODO ERROR> This Feature supported only for timer1
    }
}
void Timer_voidGetFlagsRegStatus(u8 * ptr_u8Reg)
{
	* ptr_u8Reg = TIM_TIFR ; 
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	79 f0       	breq	.+30     	; 0xd98 <Timer_voidInitTimer1+0x22>
     d7a:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <GLOBAL_ptrToTimer1UserConf+0x1>
     d7e:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <GLOBAL_ptrToTimer1UserConf>
     d82:	1f bc       	out	0x2f, r1	; 47
     d84:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <GLOBAL_ptrToTimer1UserConf>
     d88:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <GLOBAL_ptrToTimer1UserConf+0x1>
     d8c:	80 81       	ld	r24, Z
     d8e:	88 30       	cpi	r24, 0x08	; 8
     d90:	19 f4       	brne	.+6      	; 0xd98 <Timer_voidInitTimer1+0x22>
     d92:	8e b5       	in	r24, 0x2e	; 46
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	8e bd       	out	0x2e, r24	; 46
     d98:	08 95       	ret

00000d9a <Timer_voidStartTimer>:
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	b1 f0       	breq	.+44     	; 0xdca <Timer_voidStartTimer+0x30>
     d9e:	18 f0       	brcs	.+6      	; 0xda6 <Timer_voidStartTimer+0xc>
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	39 f1       	breq	.+78     	; 0xdf2 <Timer_voidStartTimer+0x58>
     da4:	08 95       	ret
     da6:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <GLOBAL_ptrToTimer0UserConf>
     daa:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <GLOBAL_ptrToTimer0UserConf+0x1>
     dae:	89 2b       	or	r24, r25
     db0:	d9 f1       	breq	.+118    	; 0xe28 <Timer_voidStartTimer+0x8e>
     db2:	83 b7       	in	r24, 0x33	; 51
     db4:	88 7f       	andi	r24, 0xF8	; 248
     db6:	83 bf       	out	0x33, r24	; 51
     db8:	93 b7       	in	r25, 0x33	; 51
     dba:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <GLOBAL_ptrToTimer0UserConf>
     dbe:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <GLOBAL_ptrToTimer0UserConf+0x1>
     dc2:	81 81       	ldd	r24, Z+1	; 0x01
     dc4:	89 2b       	or	r24, r25
     dc6:	83 bf       	out	0x33, r24	; 51
     dc8:	08 95       	ret
     dca:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <GLOBAL_ptrToTimer1UserConf>
     dce:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <GLOBAL_ptrToTimer1UserConf+0x1>
     dd2:	89 2b       	or	r24, r25
     dd4:	49 f1       	breq	.+82     	; 0xe28 <Timer_voidStartTimer+0x8e>
     dd6:	8e b5       	in	r24, 0x2e	; 46
     dd8:	88 7f       	andi	r24, 0xF8	; 248
     dda:	8e bd       	out	0x2e, r24	; 46
     ddc:	1f bc       	out	0x2f, r1	; 47
     dde:	1e bc       	out	0x2e, r1	; 46
     de0:	9e b5       	in	r25, 0x2e	; 46
     de2:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <GLOBAL_ptrToTimer1UserConf>
     de6:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <GLOBAL_ptrToTimer1UserConf+0x1>
     dea:	81 81       	ldd	r24, Z+1	; 0x01
     dec:	89 2b       	or	r24, r25
     dee:	8e bd       	out	0x2e, r24	; 46
     df0:	08 95       	ret
     df2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <GLOBAL_ptrToTimer2UserConf>
     df6:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <GLOBAL_ptrToTimer2UserConf+0x1>
     dfa:	89 2b       	or	r24, r25
     dfc:	a9 f0       	breq	.+42     	; 0xe28 <Timer_voidStartTimer+0x8e>
     dfe:	85 b5       	in	r24, 0x25	; 37
     e00:	88 7f       	andi	r24, 0xF8	; 248
     e02:	85 bd       	out	0x25, r24	; 37
     e04:	95 b5       	in	r25, 0x25	; 37
     e06:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <GLOBAL_ptrToTimer2UserConf>
     e0a:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <GLOBAL_ptrToTimer2UserConf+0x1>
     e0e:	81 81       	ldd	r24, Z+1	; 0x01
     e10:	89 2b       	or	r24, r25
     e12:	85 bd       	out	0x25, r24	; 37
     e14:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <GLOBAL_ptrToTimer2UserConf>
     e18:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <GLOBAL_ptrToTimer2UserConf+0x1>
     e1c:	80 81       	ld	r24, Z
     e1e:	88 23       	and	r24, r24
     e20:	19 f0       	breq	.+6      	; 0xe28 <Timer_voidStartTimer+0x8e>
     e22:	02 b4       	in	r0, 0x22	; 34
     e24:	00 fc       	sbrc	r0, 0
     e26:	fd cf       	rjmp	.-6      	; 0xe22 <Timer_voidStartTimer+0x88>
     e28:	08 95       	ret

00000e2a <Timer_voidStopTimer>:
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	41 f0       	breq	.+16     	; 0xe3e <Timer_voidStopTimer+0x14>
     e2e:	18 f0       	brcs	.+6      	; 0xe36 <Timer_voidStopTimer+0xc>
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	49 f0       	breq	.+18     	; 0xe46 <Timer_voidStopTimer+0x1c>
     e34:	08 95       	ret
     e36:	83 b7       	in	r24, 0x33	; 51
     e38:	88 7f       	andi	r24, 0xF8	; 248
     e3a:	83 bf       	out	0x33, r24	; 51
     e3c:	08 95       	ret
     e3e:	8e b5       	in	r24, 0x2e	; 46
     e40:	88 7f       	andi	r24, 0xF8	; 248
     e42:	8e bd       	out	0x2e, r24	; 46
     e44:	08 95       	ret
     e46:	85 b5       	in	r24, 0x25	; 37
     e48:	88 7f       	andi	r24, 0xF8	; 248
     e4a:	85 bd       	out	0x25, r24	; 37
     e4c:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <GLOBAL_ptrToTimer2UserConf>
     e50:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <GLOBAL_ptrToTimer2UserConf+0x1>
     e54:	80 81       	ld	r24, Z
     e56:	88 23       	and	r24, r24
     e58:	19 f0       	breq	.+6      	; 0xe60 <Timer_voidStopTimer+0x36>
     e5a:	02 b4       	in	r0, 0x22	; 34
     e5c:	00 fc       	sbrc	r0, 0
     e5e:	fd cf       	rjmp	.-6      	; 0xe5a <Timer_voidStopTimer+0x30>
     e60:	08 95       	ret

00000e62 <Timer_voidSetCompareValue>:
     e62:	88 23       	and	r24, r24
     e64:	19 f0       	breq	.+6      	; 0xe6c <Timer_voidSetCompareValue+0xa>
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	39 f0       	breq	.+14     	; 0xe78 <Timer_voidSetCompareValue+0x16>
     e6a:	08 95       	ret
     e6c:	6f 3f       	cpi	r22, 0xFF	; 255
     e6e:	71 05       	cpc	r23, r1
     e70:	09 f0       	breq	.+2      	; 0xe74 <Timer_voidSetCompareValue+0x12>
     e72:	20 f4       	brcc	.+8      	; 0xe7c <Timer_voidSetCompareValue+0x1a>
     e74:	6c bf       	out	0x3c, r22	; 60
     e76:	08 95       	ret
     e78:	7b bd       	out	0x2b, r23	; 43
     e7a:	6a bd       	out	0x2a, r22	; 42
     e7c:	08 95       	ret

00000e7e <Timer_voidSetCompareMatchCallback>:
     e7e:	61 15       	cp	r22, r1
     e80:	71 05       	cpc	r23, r1
     e82:	71 f0       	breq	.+28     	; 0xea0 <Timer_voidSetCompareMatchCallback+0x22>
     e84:	88 23       	and	r24, r24
     e86:	19 f0       	breq	.+6      	; 0xe8e <Timer_voidSetCompareMatchCallback+0x10>
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	31 f0       	breq	.+12     	; 0xe98 <Timer_voidSetCompareMatchCallback+0x1a>
     e8c:	08 95       	ret
     e8e:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <TIMER0_CTC_CallBack_Periodic+0x1>
     e92:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <TIMER0_CTC_CallBack_Periodic>
     e96:	08 95       	ret
     e98:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <TIMER1_CTCA_Callback+0x1>
     e9c:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <TIMER1_CTCA_Callback>
     ea0:	08 95       	ret

00000ea2 <Timer_voidSetCompMatchInterrupState>:
     ea2:	88 23       	and	r24, r24
     ea4:	19 f0       	breq	.+6      	; 0xeac <Timer_voidSetCompMatchInterrupState+0xa>
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	49 f0       	breq	.+18     	; 0xebc <Timer_voidSetCompMatchInterrupState+0x1a>
     eaa:	08 95       	ret
     eac:	89 b7       	in	r24, 0x39	; 57
     eae:	8d 7f       	andi	r24, 0xFD	; 253
     eb0:	89 bf       	out	0x39, r24	; 57
     eb2:	89 b7       	in	r24, 0x39	; 57
     eb4:	66 0f       	add	r22, r22
     eb6:	68 2b       	or	r22, r24
     eb8:	69 bf       	out	0x39, r22	; 57
     eba:	08 95       	ret
     ebc:	89 b7       	in	r24, 0x39	; 57
     ebe:	8f 7e       	andi	r24, 0xEF	; 239
     ec0:	89 bf       	out	0x39, r24	; 57
     ec2:	89 b7       	in	r24, 0x39	; 57
     ec4:	90 e1       	ldi	r25, 0x10	; 16
     ec6:	69 9f       	mul	r22, r25
     ec8:	b0 01       	movw	r22, r0
     eca:	11 24       	eor	r1, r1
     ecc:	68 2b       	or	r22, r24
     ece:	69 bf       	out	0x39, r22	; 57
     ed0:	08 95       	ret

00000ed2 <__vector_10>:
}
/******************************************************************************
* Private Function Definitions
*******************************************************************************/
void __vector_10(void)
{
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	2f 93       	push	r18
     ede:	3f 93       	push	r19
     ee0:	4f 93       	push	r20
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
    static u16 copy_u16NumberofOverflows = 0 ;  
    if(Global_u8Timer0Interval == PERIODIC)
     ef4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <Global_u8Timer0Interval>
     ef8:	81 11       	cpse	r24, r1
     efa:	1b c0       	rjmp	.+54     	; 0xf32 <__vector_10+0x60>
    {
        // Default 
       if(copy_u16NumberofOverflows < Global_u16NumberOfOverflowsInCTC)
     efc:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <copy_u16NumberofOverflows.2061>
     f00:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <copy_u16NumberofOverflows.2061+0x1>
     f04:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <Global_u16NumberOfOverflowsInCTC>
     f08:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <Global_u16NumberOfOverflowsInCTC+0x1>
     f0c:	82 17       	cp	r24, r18
     f0e:	93 07       	cpc	r25, r19
     f10:	30 f4       	brcc	.+12     	; 0xf1e <__vector_10+0x4c>
        {
            copy_u16NumberofOverflows++  ;     
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <copy_u16NumberofOverflows.2061+0x1>
     f18:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <copy_u16NumberofOverflows.2061>
     f1c:	3a c0       	rjmp	.+116    	; 0xf92 <__vector_10+0xc0>
        }
        else 
        {
            // Call ISR 
            TIMER0_CTC_CallBack_Periodic(); 
     f1e:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <TIMER0_CTC_CallBack_Periodic>
     f22:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <TIMER0_CTC_CallBack_Periodic+0x1>
     f26:	09 95       	icall
            //  Reset Number overflow
            copy_u16NumberofOverflows = 0 ; 
     f28:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <copy_u16NumberofOverflows.2061+0x1>
     f2c:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <copy_u16NumberofOverflows.2061>
     f30:	30 c0       	rjmp	.+96     	; 0xf92 <__vector_10+0xc0>
        }   
    }
    else if(Global_u8Timer0Interval == SINGLE)
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	f1 f4       	brne	.+60     	; 0xf72 <__vector_10+0xa0>
    {
        //Single 
        if(copy_u16NumberofOverflows < Global_u16NumberOfOverflowsInCTC)
     f36:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <copy_u16NumberofOverflows.2061>
     f3a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <copy_u16NumberofOverflows.2061+0x1>
     f3e:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <Global_u16NumberOfOverflowsInCTC>
     f42:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <Global_u16NumberOfOverflowsInCTC+0x1>
     f46:	82 17       	cp	r24, r18
     f48:	93 07       	cpc	r25, r19
     f4a:	30 f4       	brcc	.+12     	; 0xf58 <__vector_10+0x86>
        {
            copy_u16NumberofOverflows++  ;     
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <copy_u16NumberofOverflows.2061+0x1>
     f52:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <copy_u16NumberofOverflows.2061>
     f56:	1d c0       	rjmp	.+58     	; 0xf92 <__vector_10+0xc0>
        }
        else 
        {
            // Call ISR 
            TIMER0_CTC_CallBack_Single(); 
     f58:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <TIMER0_CTC_CallBack_Single>
     f5c:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <TIMER0_CTC_CallBack_Single+0x1>
     f60:	09 95       	icall
            //  Reset Number overflow
            copy_u16NumberofOverflows = 0 ; 
     f62:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <copy_u16NumberofOverflows.2061+0x1>
     f66:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <copy_u16NumberofOverflows.2061>
			Timer_voidStopTimer(TIMER0);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	0e 94 15 07 	call	0xe2a	; 0xe2a <Timer_voidStopTimer>
     f70:	10 c0       	rjmp	.+32     	; 0xf92 <__vector_10+0xc0>
        }
    }
    else
    {
        // PWM Mode
        if(Global_u8PWM_State == PWM_HIGH_PER)
     f72:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <Global_u8PWM_State>
     f76:	81 11       	cpse	r24, r1
     f78:	07 c0       	rjmp	.+14     	; 0xf88 <__vector_10+0xb6>
        {
            /*  Load OCR0 with Tlow */
            TIM_OCR0 = Global_u8PWM_Toff ;
     f7a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <Global_u8PWM_Toff>
     f7e:	8c bf       	out	0x3c, r24	; 60
            /*  Set Next State Flag */ 
            Global_u8PWM_State = PWM_LOW_PER ; 
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <Global_u8PWM_State>
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__vector_10+0xc0>
        }
        else
        {            
            /*  Load OCR0 with Tlow */
            TIM_OCR0 = Global_u8PWM_Ton ;
     f88:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <Global_u8PWM_Ton>
     f8c:	8c bf       	out	0x3c, r24	; 60
            /*  Set Next State Flag */ 
            Global_u8PWM_State = PWM_HIGH_PER ;
     f8e:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <Global_u8PWM_State>
        }
    }
    //Clear Compare Match Interrupt Fag
    TIM_TIFR = (1<<TIFR_OCF0);
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	88 bf       	out	0x38, r24	; 56
}
     f96:	ff 91       	pop	r31
     f98:	ef 91       	pop	r30
     f9a:	bf 91       	pop	r27
     f9c:	af 91       	pop	r26
     f9e:	9f 91       	pop	r25
     fa0:	8f 91       	pop	r24
     fa2:	7f 91       	pop	r23
     fa4:	6f 91       	pop	r22
     fa6:	5f 91       	pop	r21
     fa8:	4f 91       	pop	r20
     faa:	3f 91       	pop	r19
     fac:	2f 91       	pop	r18
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	0f 90       	pop	r0
     fb4:	1f 90       	pop	r1
     fb6:	18 95       	reti

00000fb8 <__vector_11>:

void __vector_11(void)
{
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	2f 93       	push	r18
     fc4:	3f 93       	push	r19
     fc6:	4f 93       	push	r20
     fc8:	5f 93       	push	r21
     fca:	6f 93       	push	r22
     fcc:	7f 93       	push	r23
     fce:	8f 93       	push	r24
     fd0:	9f 93       	push	r25
     fd2:	af 93       	push	r26
     fd4:	bf 93       	push	r27
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
	TIMER0_OV_CallBack();
     fda:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <TIMER0_OV_CallBack>
     fde:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <TIMER0_OV_CallBack+0x1>
     fe2:	09 95       	icall


    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV0);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	88 bf       	out	0x38, r24	; 56
}
     fe8:	ff 91       	pop	r31
     fea:	ef 91       	pop	r30
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <__vector_9>:
    }
    return (copy_u16MaxCounterVal- 20 + LOC_u8Index ) ;
}

void __vector_9(void)
{
    100a:	1f 92       	push	r1
    100c:	0f 92       	push	r0
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	2f 93       	push	r18
    1016:	3f 93       	push	r19
    1018:	4f 93       	push	r20
    101a:	5f 93       	push	r21
    101c:	6f 93       	push	r22
    101e:	7f 93       	push	r23
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	af 93       	push	r26
    1026:	bf 93       	push	r27
    1028:	ef 93       	push	r30
    102a:	ff 93       	push	r31
    TIMER1_OV_CallBack(); 
    102c:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <TIMER1_OV_CallBack>
    1030:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <TIMER1_OV_CallBack+0x1>
    1034:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV1);
    1036:	84 e0       	ldi	r24, 0x04	; 4
    1038:	88 bf       	out	0x38, r24	; 56
}
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_4>:
void __vector_4(void)
{
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	ef 93       	push	r30
    107c:	ff 93       	push	r31
    TIMER2_OV_CallBack(); 
    107e:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <TIMER2_OV_CallBack>
    1082:	f0 91 be 01 	lds	r31, 0x01BE	; 0x8001be <TIMER2_OV_CallBack+0x1>
    1086:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV2);
    1088:	80 e4       	ldi	r24, 0x40	; 64
    108a:	88 bf       	out	0x38, r24	; 56
}
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <__vector_6>:
void __vector_6(void)
{
    10ae:	1f 92       	push	r1
    10b0:	0f 92       	push	r0
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	0f 92       	push	r0
    10b6:	11 24       	eor	r1, r1
    10b8:	2f 93       	push	r18
    10ba:	3f 93       	push	r19
    10bc:	4f 93       	push	r20
    10be:	5f 93       	push	r21
    10c0:	6f 93       	push	r22
    10c2:	7f 93       	push	r23
    10c4:	8f 93       	push	r24
    10c6:	9f 93       	push	r25
    10c8:	af 93       	push	r26
    10ca:	bf 93       	push	r27
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
	TIMER1_IC_Callback();
    10d0:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <TIMER1_IC_Callback>
    10d4:	f0 91 ba 01 	lds	r31, 0x01BA	; 0x8001ba <TIMER1_IC_Callback+0x1>
    10d8:	09 95       	icall
    TIM_TIFR=(1<<TIFR_ICF1);
    10da:	80 e2       	ldi	r24, 0x20	; 32
    10dc:	88 bf       	out	0x38, r24	; 56
}
    10de:	ff 91       	pop	r31
    10e0:	ef 91       	pop	r30
    10e2:	bf 91       	pop	r27
    10e4:	af 91       	pop	r26
    10e6:	9f 91       	pop	r25
    10e8:	8f 91       	pop	r24
    10ea:	7f 91       	pop	r23
    10ec:	6f 91       	pop	r22
    10ee:	5f 91       	pop	r21
    10f0:	4f 91       	pop	r20
    10f2:	3f 91       	pop	r19
    10f4:	2f 91       	pop	r18
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <__vector_7>:
void __vector_7(void)
{
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	2f 93       	push	r18
    110c:	3f 93       	push	r19
    110e:	4f 93       	push	r20
    1110:	5f 93       	push	r21
    1112:	6f 93       	push	r22
    1114:	7f 93       	push	r23
    1116:	8f 93       	push	r24
    1118:	9f 93       	push	r25
    111a:	af 93       	push	r26
    111c:	bf 93       	push	r27
    111e:	ef 93       	push	r30
    1120:	ff 93       	push	r31
	TIMER1_CTCA_Callback();
    1122:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <TIMER1_CTCA_Callback>
    1126:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <TIMER1_CTCA_Callback+0x1>
    112a:	09 95       	icall
	TIM_TIFR=(1<<TIFR_OCF1A);
    112c:	80 e1       	ldi	r24, 0x10	; 16
    112e:	88 bf       	out	0x38, r24	; 56
}
    1130:	ff 91       	pop	r31
    1132:	ef 91       	pop	r30
    1134:	bf 91       	pop	r27
    1136:	af 91       	pop	r26
    1138:	9f 91       	pop	r25
    113a:	8f 91       	pop	r24
    113c:	7f 91       	pop	r23
    113e:	6f 91       	pop	r22
    1140:	5f 91       	pop	r21
    1142:	4f 91       	pop	r20
    1144:	3f 91       	pop	r19
    1146:	2f 91       	pop	r18
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	0f 90       	pop	r0
    114e:	1f 90       	pop	r1
    1150:	18 95       	reti

00001152 <I2C_MasterInit>:
		SET_BIT(I2C_TWAR_REG,TWGCE);
    /* I2C Bus Slave Address	*/
		I2C_TWAR_REG|=(addr<<1);
    /* enable I2C Module	*/
	/*	enable ACK check	*/
		I2C_TWCR_REG|=(1<<TWEA);
    1152:	8c e0       	ldi	r24, 0x0C	; 12
    1154:	80 b9       	out	0x00, r24	; 0
    1156:	86 b7       	in	r24, 0x36	; 54
    1158:	84 60       	ori	r24, 0x04	; 4
    115a:	86 bf       	out	0x36, r24	; 54
    115c:	08 95       	ret

0000115e <I2C_StartCondition>:
}
boolean I2C_StartCondition(void)
{
	/*	send start condition	*/
		I2C_TWCR_REG|=(1<<TWSTA)|(1<<TWINT);
    115e:	86 b7       	in	r24, 0x36	; 54
    1160:	80 6a       	ori	r24, 0xA0	; 160
    1162:	86 bf       	out	0x36, r24	; 54
    /*	Wait until start condition sent successfully	*/
		while(!CHECK_BIT(I2C_TWCR_REG,TWINT));
    1164:	06 b6       	in	r0, 0x36	; 54
    1166:	07 fe       	sbrs	r0, 7
    1168:	fd cf       	rjmp	.-6      	; 0x1164 <I2C_StartCondition+0x6>
		//CLEAR_BIT(I2C_TWCR_REG,TWSTA);
	/*	check I2C status then return ture or false	*/
		if((I2C_TWSR_REG&0xf8)!=0x08)
    116a:	91 b1       	in	r25, 0x01	; 1
    116c:	98 7f       	andi	r25, 0xF8	; 248
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	98 30       	cpi	r25, 0x08	; 8
    1172:	09 f0       	breq	.+2      	; 0x1176 <I2C_StartCondition+0x18>
    1174:	80 e0       	ldi	r24, 0x00	; 0
		{
			return FALSE;
		}
    return TRUE;
}
    1176:	08 95       	ret

00001178 <I2C_RepeatedStartCondition>:
boolean I2C_RepeatedStartCondition(void)
{
	/*	send start condition	*/
	I2C_TWCR_REG|=(1<<TWSTA)|(1<<TWINT);
    1178:	86 b7       	in	r24, 0x36	; 54
    117a:	80 6a       	ori	r24, 0xA0	; 160
    117c:	86 bf       	out	0x36, r24	; 54
	/*	Wait until start condition sent successfully	*/
	//_delay_ms(5);
	while(CHECK_BIT(I2C_TWCR_REG,TWINT)==0);
    117e:	06 b6       	in	r0, 0x36	; 54
    1180:	07 fe       	sbrs	r0, 7
    1182:	fd cf       	rjmp	.-6      	; 0x117e <I2C_RepeatedStartCondition+0x6>
    return I2C_TWDR_REG;
}
u8 I2C_ReadStatus(void)
{
    u8 status;
    status = I2C_TWSR_REG & 0xF8; // 1111 1000
    1184:	91 b1       	in	r25, 0x01	; 1
    1186:	98 7f       	andi	r25, 0xF8	; 248
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 31       	cpi	r25, 0x10	; 16
    118c:	09 f0       	breq	.+2      	; 0x1190 <I2C_RepeatedStartCondition+0x18>
    118e:	80 e0       	ldi	r24, 0x00	; 0
	if(I2C_ReadStatus()!=0x10)
	{
		return FALSE;
	}
	return TRUE;
}
    1190:	08 95       	ret

00001192 <I2C_StopCondition>:
void I2C_StopCondition(void)
{
	/*	send stop condition	*/
			I2C_TWCR_REG|=(1<<TWSTO)|(1<<TWINT);
    1192:	86 b7       	in	r24, 0x36	; 54
    1194:	80 69       	ori	r24, 0x90	; 144
    1196:	86 bf       	out	0x36, r24	; 54
    1198:	08 95       	ret

0000119a <I2C_WriteByte>:
		
}
void I2C_WriteByte(u8 data)
{
    /*	Put data On I2C data Register	*/
		I2C_TWDR_REG=data;
    119a:	83 b9       	out	0x03, r24	; 3
	/*trigger data send*/
		CLEAR_BIT(I2C_TWCR_REG,TWSTA);
    119c:	86 b7       	in	r24, 0x36	; 54
    119e:	8f 7d       	andi	r24, 0xDF	; 223
    11a0:	86 bf       	out	0x36, r24	; 54
		I2C_TWCR_REG|=(1<<TWINT);
    11a2:	86 b7       	in	r24, 0x36	; 54
    11a4:	80 68       	ori	r24, 0x80	; 128
    11a6:	86 bf       	out	0x36, r24	; 54


	/*	Wait until data sent successfully	*/
		while(!CHECK_BIT(I2C_TWCR_REG,TWINT));
    11a8:	06 b6       	in	r0, 0x36	; 54
    11aa:	07 fe       	sbrs	r0, 7
    11ac:	fd cf       	rjmp	.-6      	; 0x11a8 <I2C_WriteByte+0xe>
}
    11ae:	08 95       	ret

000011b0 <I2C_Send_SlaveAddressWriteOperation>:
boolean I2C_Send_SlaveAddressWriteOperation(u8 addr)
{
		

		/*	prepare address+W	*/
			I2C_TWDR_REG=addr<<1;
    11b0:	88 0f       	add	r24, r24
    11b2:	83 b9       	out	0x03, r24	; 3
		/*	send addr+W on i2c	*/
		I2C_TWCR_REG|=(1<<TWINT);
    11b4:	86 b7       	in	r24, 0x36	; 54
    11b6:	80 68       	ori	r24, 0x80	; 128
    11b8:	86 bf       	out	0x36, r24	; 54
		while(!CHECK_BIT(I2C_TWCR_REG,TWINT));
    11ba:	06 b6       	in	r0, 0x36	; 54
    11bc:	07 fe       	sbrs	r0, 7
    11be:	fd cf       	rjmp	.-6      	; 0x11ba <I2C_Send_SlaveAddressWriteOperation+0xa>
		/*	check I2C status then return ture or false	*/
		//LCD_WriteNumber(I2C_TWSR_REG&0xf8);
		if((I2C_TWSR_REG&0xf8)!=I2C_SLA_W_ACK)
    11c0:	91 b1       	in	r25, 0x01	; 1
    11c2:	98 7f       	andi	r25, 0xF8	; 248
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	98 31       	cpi	r25, 0x18	; 24
    11c8:	09 f0       	breq	.+2      	; 0x11cc <I2C_Send_SlaveAddressWriteOperation+0x1c>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
		{
			return FALSE;
		}
    return TRUE;

}
    11cc:	08 95       	ret

000011ce <I2C_Send_SlaveAddressReadOperation>:
		u8 add_write=0;
		/*	prepare address+W	*/
		add_write|=(addr<<1)|(0x01);
		
		/*	send addr+R on i2c	*/
		I2C_WriteByte(add_write);
    11ce:	88 0f       	add	r24, r24
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	0e 94 cd 08 	call	0x119a	; 0x119a <I2C_WriteByte>
		/*	check I2C status then return ture or false	*/
		if((I2C_TWSR_REG&0xf8)!=I2C_SLA_R_ACK)
    11d6:	91 b1       	in	r25, 0x01	; 1
    11d8:	98 7f       	andi	r25, 0xF8	; 248
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 34       	cpi	r25, 0x40	; 64
    11de:	09 f0       	breq	.+2      	; 0x11e2 <I2C_Send_SlaveAddressReadOperation+0x14>
    11e0:	80 e0       	ldi	r24, 0x00	; 0
		{
			return FALSE;
		}
		return TRUE;
}
    11e2:	08 95       	ret

000011e4 <I2C_ReadByte>:
u8 I2C_ReadByte(void)
{
	/*	Wait until data read successfully	*/
	CLEAR_BIT(I2C_TWCR_REG,TWSTA);
    11e4:	86 b7       	in	r24, 0x36	; 54
    11e6:	8f 7d       	andi	r24, 0xDF	; 223
    11e8:	86 bf       	out	0x36, r24	; 54
		I2C_TWCR_REG|=(1<<TWINT);
    11ea:	86 b7       	in	r24, 0x36	; 54
    11ec:	80 68       	ori	r24, 0x80	; 128
    11ee:	86 bf       	out	0x36, r24	; 54
		while(!CHECK_BIT(I2C_TWCR_REG,TWINT));
    11f0:	06 b6       	in	r0, 0x36	; 54
    11f2:	07 fe       	sbrs	r0, 7
    11f4:	fd cf       	rjmp	.-6      	; 0x11f0 <I2C_ReadByte+0xc>
		
    return I2C_TWDR_REG;
    11f6:	83 b1       	in	r24, 0x03	; 3
}
    11f8:	08 95       	ret

000011fa <__udivmodsi4>:
    11fa:	a1 e2       	ldi	r26, 0x21	; 33
    11fc:	1a 2e       	mov	r1, r26
    11fe:	aa 1b       	sub	r26, r26
    1200:	bb 1b       	sub	r27, r27
    1202:	fd 01       	movw	r30, r26
    1204:	0d c0       	rjmp	.+26     	; 0x1220 <__udivmodsi4_ep>

00001206 <__udivmodsi4_loop>:
    1206:	aa 1f       	adc	r26, r26
    1208:	bb 1f       	adc	r27, r27
    120a:	ee 1f       	adc	r30, r30
    120c:	ff 1f       	adc	r31, r31
    120e:	a2 17       	cp	r26, r18
    1210:	b3 07       	cpc	r27, r19
    1212:	e4 07       	cpc	r30, r20
    1214:	f5 07       	cpc	r31, r21
    1216:	20 f0       	brcs	.+8      	; 0x1220 <__udivmodsi4_ep>
    1218:	a2 1b       	sub	r26, r18
    121a:	b3 0b       	sbc	r27, r19
    121c:	e4 0b       	sbc	r30, r20
    121e:	f5 0b       	sbc	r31, r21

00001220 <__udivmodsi4_ep>:
    1220:	66 1f       	adc	r22, r22
    1222:	77 1f       	adc	r23, r23
    1224:	88 1f       	adc	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	1a 94       	dec	r1
    122a:	69 f7       	brne	.-38     	; 0x1206 <__udivmodsi4_loop>
    122c:	60 95       	com	r22
    122e:	70 95       	com	r23
    1230:	80 95       	com	r24
    1232:	90 95       	com	r25
    1234:	9b 01       	movw	r18, r22
    1236:	ac 01       	movw	r20, r24
    1238:	bd 01       	movw	r22, r26
    123a:	cf 01       	movw	r24, r30
    123c:	08 95       	ret

0000123e <_exit>:
    123e:	f8 94       	cli

00001240 <__stop_program>:
    1240:	ff cf       	rjmp	.-2      	; 0x1240 <__stop_program>
