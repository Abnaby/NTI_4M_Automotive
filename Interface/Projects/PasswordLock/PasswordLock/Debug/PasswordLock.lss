
PasswordLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000131e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00800060  0000131e  000013b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  008001ae  008001ae  00001500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000415f  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001191  00000000  00000000  000059b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ef2  00000000  00000000  00006b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e0  00000000  00000000  00008a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001673  00000000  00000000  00009318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e07  00000000  00000000  0000a98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000d792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_6>
      1c:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_9>
      28:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__vector_10>
      2c:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 08 06 	call	0xc10	; 0xc10 <main>
      8a:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_u8PasswordAuthentication>:
		#endif
	}
	return LOC_u8Result; 
}
static u8 APP_u8PasswordAuthentication(u8* ptrToInputPassword)
{
      92:	dc 01       	movw	r26, r24
      94:	ef ea       	ldi	r30, 0xAF	; 175
      96:	f1 e0       	ldi	r31, 0x01	; 1
      98:	45 eb       	ldi	r20, 0xB5	; 181
      9a:	51 e0       	ldi	r21, 0x01	; 1
	u8 Loc_u8IsEqual = 1 ; 
      9c:	81 e0       	ldi	r24, 0x01	; 1
	u8 Loc_u8Counter = 0 ; 
	for(Loc_u8Counter = 0 ; Loc_u8Counter<NUM_PASS_DIGITS ;  Loc_u8Counter++)
	{
		if(ptrToInputPassword[Loc_u8Counter] != APP_GlobalPasswordBuffer[Loc_u8Counter])
		{
			Loc_u8IsEqual = 0 ; 
      9e:	30 e0       	ldi	r19, 0x00	; 0
{
	u8 Loc_u8IsEqual = 1 ; 
	u8 Loc_u8Counter = 0 ; 
	for(Loc_u8Counter = 0 ; Loc_u8Counter<NUM_PASS_DIGITS ;  Loc_u8Counter++)
	{
		if(ptrToInputPassword[Loc_u8Counter] != APP_GlobalPasswordBuffer[Loc_u8Counter])
      a0:	2d 91       	ld	r18, X+
      a2:	91 91       	ld	r25, Z+
      a4:	29 13       	cpse	r18, r25
		{
			Loc_u8IsEqual = 0 ; 
      a6:	83 2f       	mov	r24, r19
}
static u8 APP_u8PasswordAuthentication(u8* ptrToInputPassword)
{
	u8 Loc_u8IsEqual = 1 ; 
	u8 Loc_u8Counter = 0 ; 
	for(Loc_u8Counter = 0 ; Loc_u8Counter<NUM_PASS_DIGITS ;  Loc_u8Counter++)
      a8:	e4 17       	cp	r30, r20
      aa:	f5 07       	cpc	r31, r21
      ac:	c9 f7       	brne	.-14     	; 0xa0 <APP_u8PasswordAuthentication+0xe>
		{
			Loc_u8IsEqual = 0 ; 
		}
	}
	return Loc_u8IsEqual ; 
}
      ae:	08 95       	ret

000000b0 <TIMER1_CallbackFunction>:
	}
	numOfFourSeconds++;	
#endif 
// Will Interrupt Every 20 Second
static u8 NumberOf_4_Seconds = 1 ; 
	if( NumberOf_4_Seconds >= 5)
      b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      b4:	85 30       	cpi	r24, 0x05	; 5
      b6:	40 f0       	brcs	.+16     	; 0xc8 <TIMER1_CallbackFunction+0x18>
	{
		// 20 Second Happen
		Global_u8SystemIsLocked = 1 ; 
      b8:	81 e0       	ldi	r24, 0x01	; 1
      ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Global_u8SystemIsLocked>
		NumberOf_4_Seconds = 1 ; 
      be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		// Stop Timer 
		Timer_voidStopTimer(TIMER1);
      c2:	0e 94 83 07 	call	0xf06	; 0xf06 <Timer_voidStopTimer>
      c6:	08 95       	ret

	}
	else
	{
		NumberOf_4_Seconds++ ; 
      c8:	8f 5f       	subi	r24, 0xFF	; 255
      ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      ce:	08 95       	ret

000000d0 <APP_voidDisplayMainScreen>:
	APP_WriteEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM, 0xFF);
	// Soft Reset 
	asm("jmp 0x0000");
}
static void APP_voidDisplayMainScreen(boolean copy_isLocked, u8 copy_u8PageNumber)
{
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	d8 2f       	mov	r29, r24
      d6:	c6 2f       	mov	r28, r22
	lcd_vidClrDislay(); 
      d8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
	lcd_vidGotoRowColumn(0,0);	
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
	lcd_vidDisplyStr((u8*)"State : ");
      e4:	83 ea       	ldi	r24, 0xA3	; 163
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
	if(copy_isLocked == 1)
      ec:	d1 30       	cpi	r29, 0x01	; 1
      ee:	71 f4       	brne	.+28     	; 0x10c <APP_voidDisplayMainScreen+0x3c>
	{
		lcd_vidDisplyStr((u8*)"Locked");
      f0:	8c ea       	ldi	r24, 0xAC	; 172
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
		lcd_vidGotoRowColumn(0,19);	
      f8:	63 e1       	ldi	r22, 0x13	; 19
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyChar(0);
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_vidDisplyChar>
	{
		lcd_vidDisplyStr((u8*)"Unlocked");
		lcd_vidGotoRowColumn(0,19);	
		lcd_vidDisplyChar(1);
	}
	if(copy_u8PageNumber == 0)
     106:	c1 11       	cpse	r28, r1
     108:	73 c0       	rjmp	.+230    	; 0x1f0 <APP_voidDisplayMainScreen+0x120>
     10a:	69 c0       	rjmp	.+210    	; 0x1de <APP_voidDisplayMainScreen+0x10e>
		lcd_vidGotoRowColumn(0,19);	
		lcd_vidDisplyChar(0);
	}
	else
	{
		lcd_vidDisplyStr((u8*)"Unlocked");
     10c:	83 eb       	ldi	r24, 0xB3	; 179
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
		lcd_vidGotoRowColumn(0,19);	
     114:	63 e1       	ldi	r22, 0x13	; 19
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyChar(1);
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_vidDisplyChar>
	}
	if(copy_u8PageNumber == 0)
     122:	c1 11       	cpse	r28, r1
     124:	2b c0       	rjmp	.+86     	; 0x17c <APP_voidDisplayMainScreen+0xac>
	{
		lcd_vidGotoRowColumn(1,3);	
     126:	63 e0       	ldi	r22, 0x03	; 3
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"Select One of: ");
     12e:	8c eb       	ldi	r24, 0xBC	; 188
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
		if(copy_isLocked)
     136:	dd 23       	and	r29, r29
     138:	49 f0       	breq	.+18     	; 0x14c <APP_voidDisplayMainScreen+0x7c>
		{
			lcd_vidGotoRowColumn(2,0);	
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr((u8*)"1- Unlock ");
     142:	8c ec       	ldi	r24, 0xCC	; 204
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     14a:	08 c0       	rjmp	.+16     	; 0x15c <APP_voidDisplayMainScreen+0x8c>
		}
		else
		{
			// Unlocked
			lcd_vidGotoRowColumn(2,0);	
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr((u8*)"1- Lock ");		
     154:	87 ed       	ldi	r24, 0xD7	; 215
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
		}
		lcd_vidGotoRowColumn(3,0);	
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"2- Change Password ");	
     164:	80 ee       	ldi	r24, 0xE0	; 224
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
		lcd_vidGotoRowColumn(3,19);	
     16c:	63 e1       	ldi	r22, 0x13	; 19
     16e:	83 e0       	ldi	r24, 0x03	; 3
     170:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyChar(2); // Down Button
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_vidDisplyChar>
     17a:	3c c0       	rjmp	.+120    	; 0x1f4 <APP_voidDisplayMainScreen+0x124>
			
	}
	else if (copy_u8PageNumber == 1)
     17c:	c1 30       	cpi	r28, 0x01	; 1
     17e:	d1 f5       	brne	.+116    	; 0x1f4 <APP_voidDisplayMainScreen+0x124>
	{
		if(copy_isLocked)
     180:	dd 23       	and	r29, r29
     182:	49 f0       	breq	.+18     	; 0x196 <APP_voidDisplayMainScreen+0xc6>
		{
			lcd_vidGotoRowColumn(1,0);	
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr((u8*)"1- Unlock ");
     18c:	8c ec       	ldi	r24, 0xCC	; 204
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     194:	08 c0       	rjmp	.+16     	; 0x1a6 <APP_voidDisplayMainScreen+0xd6>
		}
		else
		{
			// Unlocked
			lcd_vidGotoRowColumn(1,0);	
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr((u8*)"1- Lock ");		
     19e:	87 ed       	ldi	r24, 0xD7	; 215
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
		}
		lcd_vidGotoRowColumn(2,0);	
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"2- Change Password ");	
     1ae:	80 ee       	ldi	r24, 0xE0	; 224
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
		lcd_vidGotoRowColumn(2,19);	
     1b6:	63 e1       	ldi	r22, 0x13	; 19
     1b8:	82 e0       	ldi	r24, 0x02	; 2
     1ba:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidGotoRowColumn(3,0);	
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	83 e0       	ldi	r24, 0x03	; 3
     1c2:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"3- Factory Reset ");	
     1c6:	84 ef       	ldi	r24, 0xF4	; 244
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
		lcd_vidGotoRowColumn(3,19);	
     1ce:	63 e1       	ldi	r22, 0x13	; 19
     1d0:	83 e0       	ldi	r24, 0x03	; 3
     1d2:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		
		lcd_vidDisplyChar(3); // Up Button		
     1d6:	83 e0       	ldi	r24, 0x03	; 3
     1d8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_vidDisplyChar>
	}
	
}
     1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <APP_voidDisplayMainScreen+0x124>
		lcd_vidGotoRowColumn(0,19);	
		lcd_vidDisplyChar(1);
	}
	if(copy_u8PageNumber == 0)
	{
		lcd_vidGotoRowColumn(1,3);	
     1de:	63 e0       	ldi	r22, 0x03	; 3
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"Select One of: ");
     1e6:	8c eb       	ldi	r24, 0xBC	; 188
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     1ee:	a5 cf       	rjmp	.-182    	; 0x13a <APP_voidDisplayMainScreen+0x6a>
		lcd_vidDisplyStr((u8*)"2- Change Password ");	
		lcd_vidGotoRowColumn(3,19);	
		lcd_vidDisplyChar(2); // Down Button
			
	}
	else if (copy_u8PageNumber == 1)
     1f0:	c1 30       	cpi	r28, 0x01	; 1
     1f2:	41 f2       	breq	.-112    	; 0x184 <APP_voidDisplayMainScreen+0xb4>
		lcd_vidGotoRowColumn(3,19);	
		
		lcd_vidDisplyChar(3); // Up Button		
	}
	
}
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <APP_voidGetPassword>:
		}
	}
	return Loc_u8IsEqual ; 
}
static void APP_voidGetPassword(u8* Buffer)
{
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	8c 01       	movw	r16, r24
	u8 LOC_u8PasswordCounter = 0 ; 
	u8 LOC_u8key = 0xFF ; 
	lcd_vidClrDislay(); 
     202:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
	lcd_vidDisplyStr((u8*)"Enter Password ");
     206:	86 e0       	ldi	r24, 0x06	; 6
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
	lcd_vidGotoRowColumn(1,6);
     20e:	66 e0       	ldi	r22, 0x06	; 6
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
	}
	return Loc_u8IsEqual ; 
}
static void APP_voidGetPassword(u8* Buffer)
{
	u8 LOC_u8PasswordCounter = 0 ; 
     216:	c0 e0       	ldi	r28, 0x00	; 0
	lcd_vidClrDislay(); 
	lcd_vidDisplyStr((u8*)"Enter Password ");
	lcd_vidGotoRowColumn(1,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
	{
		LOC_u8key = keypad_u8GetKey();
     218:	0e 94 4a 04 	call	0x894	; 0x894 <keypad_u8GetKey>
		if(	LOC_u8key != 0xFF)
     21c:	8f 3f       	cpi	r24, 0xFF	; 255
     21e:	41 f0       	breq	.+16     	; 0x230 <APP_voidGetPassword+0x36>
		{
			// Pressed 
			Buffer[LOC_u8PasswordCounter] = LOC_u8key ; 
     220:	f8 01       	movw	r30, r16
     222:	ec 0f       	add	r30, r28
     224:	f1 1d       	adc	r31, r1
     226:	80 83       	st	Z, r24
			LOC_u8PasswordCounter++ ; 
     228:	cf 5f       	subi	r28, 0xFF	; 255
			lcd_vidDisplyChar('*');
     22a:	8a e2       	ldi	r24, 0x2A	; 42
     22c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_vidDisplyChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     230:	2f ef       	ldi	r18, 0xFF	; 255
     232:	81 ee       	ldi	r24, 0xE1	; 225
     234:	94 e0       	ldi	r25, 0x04	; 4
     236:	21 50       	subi	r18, 0x01	; 1
     238:	80 40       	sbci	r24, 0x00	; 0
     23a:	90 40       	sbci	r25, 0x00	; 0
     23c:	e1 f7       	brne	.-8      	; 0x236 <APP_voidGetPassword+0x3c>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <APP_voidGetPassword+0x46>
     240:	00 00       	nop
	u8 LOC_u8PasswordCounter = 0 ; 
	u8 LOC_u8key = 0xFF ; 
	lcd_vidClrDislay(); 
	lcd_vidDisplyStr((u8*)"Enter Password ");
	lcd_vidGotoRowColumn(1,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
     242:	c6 30       	cpi	r28, 0x06	; 6
     244:	48 f3       	brcs	.-46     	; 0x218 <APP_voidGetPassword+0x1e>
			LOC_u8PasswordCounter++ ; 
			lcd_vidDisplyChar('*');
		}
		_delay_ms(100);
	}	
}
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <APP_u8SetPassword>:
		lcd_vidDisplyChar(3); // Up Button		
	}
	
}
static APP_ErrorHandling_t APP_u8SetPassword(void)
{
     24e:	cf 92       	push	r12
     250:	df 92       	push	r13
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
	u8 LOC_u8PasswordCounter = 0 ; 
	u8  LOC_u8key = 0xff ; 
	u8 LOC_u8ComingEEPROM_Data ; 
	APP_ErrorHandling_t  LOC_u8Result = E_OK ; 

	lcd_vidClrDislay(); 
     25c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
	lcd_vidDisplyStr((u8*)"Enter ");
     260:	86 e1       	ldi	r24, 0x16	; 22
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
	lcd_vidDisplayNumbers(NUM_PASS_DIGITS);
     268:	66 e0       	ldi	r22, 0x06	; 6
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 b7 05 	call	0xb6e	; 0xb6e <lcd_vidDisplayNumbers>
	lcd_vidDisplyStr((u8*)"-digit Pass:");
     274:	8d e1       	ldi	r24, 0x1D	; 29
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
	lcd_vidGotoRowColumn(1,6);
     27c:	66 e0       	ldi	r22, 0x06	; 6
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
	
}
static APP_ErrorHandling_t APP_u8SetPassword(void)
{
	u8 LOC_u8PasswordFlag = 1;
	u8 LOC_u8PasswordCounter = 0 ; 
     284:	c0 e0       	ldi	r28, 0x00	; 0
	lcd_vidDisplayNumbers(NUM_PASS_DIGITS);
	lcd_vidDisplyStr((u8*)"-digit Pass:");
	lcd_vidGotoRowColumn(1,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
	{
		LOC_u8key = keypad_u8GetKey();
     286:	0e 94 4a 04 	call	0x894	; 0x894 <keypad_u8GetKey>
		if(	LOC_u8key != 0xFF)
     28a:	8f 3f       	cpi	r24, 0xFF	; 255
     28c:	49 f0       	breq	.+18     	; 0x2a0 <APP_u8SetPassword+0x52>
		{
			// Pressed 
			APP_GlobalPasswordBuffer[LOC_u8PasswordCounter] = LOC_u8key ; 
     28e:	ec 2f       	mov	r30, r28
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	e1 55       	subi	r30, 0x51	; 81
     294:	fe 4f       	sbci	r31, 0xFE	; 254
     296:	80 83       	st	Z, r24
			LOC_u8PasswordCounter++ ; 
     298:	cf 5f       	subi	r28, 0xFF	; 255
			lcd_vidDisplyChar('*');
     29a:	8a e2       	ldi	r24, 0x2A	; 42
     29c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_vidDisplyChar>
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	81 ee       	ldi	r24, 0xE1	; 225
     2a4:	94 e0       	ldi	r25, 0x04	; 4
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <APP_u8SetPassword+0x58>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <APP_u8SetPassword+0x62>
     2b0:	00 00       	nop
	lcd_vidClrDislay(); 
	lcd_vidDisplyStr((u8*)"Enter ");
	lcd_vidDisplayNumbers(NUM_PASS_DIGITS);
	lcd_vidDisplyStr((u8*)"-digit Pass:");
	lcd_vidGotoRowColumn(1,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
     2b2:	c6 30       	cpi	r28, 0x06	; 6
     2b4:	40 f3       	brcs	.-48     	; 0x286 <APP_u8SetPassword+0x38>
		_delay_ms(100);
	}	
			
	// Reset Password Counter
	LOC_u8PasswordCounter = 0 ; 
	lcd_vidGotoRowColumn(2,0);
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
	lcd_vidDisplyStr((u8*)"Repeat Password ");
     2be:	8a e2       	ldi	r24, 0x2A	; 42
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
	lcd_vidGotoRowColumn(3,6);
     2c6:	66 e0       	ldi	r22, 0x06	; 6
     2c8:	83 e0       	ldi	r24, 0x03	; 3
     2ca:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
     2ce:	0f 2e       	mov	r0, r31
     2d0:	ff ea       	ldi	r31, 0xAF	; 175
     2d2:	ef 2e       	mov	r14, r31
     2d4:	f1 e0       	ldi	r31, 0x01	; 1
     2d6:	ff 2e       	mov	r15, r31
     2d8:	f0 2d       	mov	r31, r0
     2da:	67 01       	movw	r12, r14
		}
		_delay_ms(100);
	}	
			
	// Reset Password Counter
	LOC_u8PasswordCounter = 0 ; 
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
}
static APP_ErrorHandling_t APP_u8SetPassword(void)
{
	u8 LOC_u8PasswordFlag = 1;
     2de:	11 e0       	ldi	r17, 0x01	; 1
		if(	LOC_u8key != 0xFF)
		{
			// Pressed 
			if (LOC_u8key != APP_GlobalPasswordBuffer[LOC_u8PasswordCounter])
			{
				LOC_u8PasswordFlag = 0 ; 
     2e0:	00 e0       	ldi	r16, 0x00	; 0
	lcd_vidGotoRowColumn(2,0);
	lcd_vidDisplyStr((u8*)"Repeat Password ");
	lcd_vidGotoRowColumn(3,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
	{
		LOC_u8key = keypad_u8GetKey();
     2e2:	0e 94 4a 04 	call	0x894	; 0x894 <keypad_u8GetKey>
		if(	LOC_u8key != 0xFF)
     2e6:	8f 3f       	cpi	r24, 0xFF	; 255
     2e8:	a9 f0       	breq	.+42     	; 0x314 <APP_u8SetPassword+0xc6>
		{
			// Pressed 
			if (LOC_u8key != APP_GlobalPasswordBuffer[LOC_u8PasswordCounter])
     2ea:	f6 01       	movw	r30, r12
     2ec:	91 91       	ld	r25, Z+
     2ee:	6f 01       	movw	r12, r30
     2f0:	89 13       	cpse	r24, r25
			{
				LOC_u8PasswordFlag = 0 ; 
     2f2:	10 2f       	mov	r17, r16
			}
			LOC_u8PasswordCounter++ ; 
     2f4:	cf 5f       	subi	r28, 0xFF	; 255
			lcd_vidDisplyChar('*');	
     2f6:	8a e2       	ldi	r24, 0x2A	; 42
     2f8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <lcd_vidDisplyChar>
     2fc:	ff ef       	ldi	r31, 0xFF	; 255
     2fe:	21 ee       	ldi	r18, 0xE1	; 225
     300:	84 e0       	ldi	r24, 0x04	; 4
     302:	f1 50       	subi	r31, 0x01	; 1
     304:	20 40       	sbci	r18, 0x00	; 0
     306:	80 40       	sbci	r24, 0x00	; 0
     308:	e1 f7       	brne	.-8      	; 0x302 <APP_u8SetPassword+0xb4>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <APP_u8SetPassword+0xbe>
     30c:	00 00       	nop
	// Reset Password Counter
	LOC_u8PasswordCounter = 0 ; 
	lcd_vidGotoRowColumn(2,0);
	lcd_vidDisplyStr((u8*)"Repeat Password ");
	lcd_vidGotoRowColumn(3,6);
	while(LOC_u8PasswordCounter < NUM_PASS_DIGITS)
     30e:	c6 30       	cpi	r28, 0x06	; 6
     310:	19 f0       	breq	.+6      	; 0x318 <APP_u8SetPassword+0xca>
     312:	e7 cf       	rjmp	.-50     	; 0x2e2 <APP_u8SetPassword+0x94>
     314:	c6 30       	cpi	r28, 0x06	; 6
     316:	28 f3       	brcs	.-54     	; 0x2e2 <APP_u8SetPassword+0x94>
			lcd_vidDisplyChar('*');	
			_delay_ms(100);
		}
	}
	// Check Identical Or Not 
	if(LOC_u8PasswordFlag == 1)
     318:	11 30       	cpi	r17, 0x01	; 1
     31a:	09 f0       	breq	.+2      	; 0x31e <APP_u8SetPassword+0xd0>
     31c:	52 c0       	rjmp	.+164    	; 0x3c2 <APP_u8SetPassword+0x174>
	{
	// Saving in EEPROM
		// Identical 
		lcd_vidClrDislay(); 
     31e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
		lcd_vidGotoRowColumn(1,5);
     322:	65 e0       	ldi	r22, 0x05	; 5
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"Good... ");
     32a:	8b e3       	ldi	r24, 0x3B	; 59
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
	}
}
static void APP_WriteEEPROM(u16 uiAddress, u8 ucData)
{
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	eep_writebyte(uiAddress, ucData);
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	80 ea       	ldi	r24, 0xA0	; 160
     336:	0e 94 2a 03 	call	0x654	; 0x654 <eep_writebyte>
}
static u8 APP_ReadEEPROM(u16 uiAddress)
{
	u8 LOC_u8ReturnValue = 0xFF ;  // 0xFF init. value for EEPROM
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	LOC_u8ReturnValue = eep_readByte(uiAddress);
     33a:	80 ea       	ldi	r24, 0xA0	; 160
     33c:	0e 94 44 03 	call	0x688	; 0x688 <eep_readByte>
		lcd_vidDisplyStr((u8*)"Good... ");
		// Set To Not First Time 
		APP_WriteEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM, NOT_FIRST_TIME);
		LOC_u8ComingEEPROM_Data = APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM);
		// Confirm Write Operation 
		if(NOT_FIRST_TIME != LOC_u8ComingEEPROM_Data)
     340:	88 23       	and	r24, r24
     342:	e1 f0       	breq	.+56     	; 0x37c <APP_u8SetPassword+0x12e>
		{
			// Print Failure in system
			lcd_vidClrDislay(); 
     344:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
			lcd_vidGotoRowColumn(0,3);
     348:	63 e0       	ldi	r22, 0x03	; 3
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr((u8*)"EEPROM FAIL");
     350:	84 e4       	ldi	r24, 0x44	; 68
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
			lcd_vidGotoRowColumn(2,5);	
     358:	65 e0       	ldi	r22, 0x05	; 5
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
			lcd_vidDisplyStr((u8*)"Power Mode");	
     360:	80 e5       	ldi	r24, 0x50	; 80
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     368:	9f ef       	ldi	r25, 0xFF	; 255
     36a:	e7 ea       	ldi	r30, 0xA7	; 167
     36c:	f1 e6       	ldi	r31, 0x61	; 97
     36e:	91 50       	subi	r25, 0x01	; 1
     370:	e0 40       	sbci	r30, 0x00	; 0
     372:	f0 40       	sbci	r31, 0x00	; 0
     374:	e1 f7       	brne	.-8      	; 0x36e <APP_u8SetPassword+0x120>
     376:	00 c0       	rjmp	.+0      	; 0x378 <APP_u8SetPassword+0x12a>
     378:	00 00       	nop
     37a:	18 c0       	rjmp	.+48     	; 0x3ac <APP_u8SetPassword+0x15e>
     37c:	c1 ea       	ldi	r28, 0xA1	; 161
     37e:	87 01       	movw	r16, r14
	}
}
static void APP_WriteEEPROM(u16 uiAddress, u8 ucData)
{
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	eep_writebyte(uiAddress, ucData);
     380:	f7 01       	movw	r30, r14
     382:	60 81       	ld	r22, Z
     384:	8c 2f       	mov	r24, r28
     386:	0e 94 2a 03 	call	0x654	; 0x654 <eep_writebyte>
     38a:	03 c0       	rjmp	.+6      	; 0x392 <APP_u8SetPassword+0x144>
     38c:	8c 2f       	mov	r24, r28
     38e:	0e 94 2a 03 	call	0x654	; 0x654 <eep_writebyte>
}
static u8 APP_ReadEEPROM(u16 uiAddress)
{
	u8 LOC_u8ReturnValue = 0xFF ;  // 0xFF init. value for EEPROM
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	LOC_u8ReturnValue = eep_readByte(uiAddress);
     392:	8c 2f       	mov	r24, r28
     394:	0e 94 44 03 	call	0x688	; 0x688 <eep_readByte>
			for(LOC_u8PasswordCounter = 0 ;  LOC_u8PasswordCounter < NUM_PASS_DIGITS ; LOC_u8PasswordCounter++)
			{
				// Write Password in EEPORM 
				APP_WriteEEPROM((IS_FIRST_TIME_ADDRESS_EEPROM+LOC_u8PasswordCounter+1) , 	APP_GlobalPasswordBuffer[LOC_u8PasswordCounter]);
				// Confirm That Everything is clear 
				while(APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM+LOC_u8PasswordCounter+1) !=APP_GlobalPasswordBuffer[LOC_u8PasswordCounter])
     398:	f8 01       	movw	r30, r16
     39a:	60 81       	ld	r22, Z
     39c:	68 13       	cpse	r22, r24
     39e:	f6 cf       	rjmp	.-20     	; 0x38c <APP_u8SetPassword+0x13e>
     3a0:	ff ef       	ldi	r31, 0xFF	; 255
     3a2:	ef 1a       	sub	r14, r31
     3a4:	ff 0a       	sbc	r15, r31
     3a6:	cf 5f       	subi	r28, 0xFF	; 255
		}
		else
		{
			Glob_u8IsFirstTime = NOT_FIRST_TIME ; 
			// Store Password In EEPROM 
			for(LOC_u8PasswordCounter = 0 ;  LOC_u8PasswordCounter < NUM_PASS_DIGITS ; LOC_u8PasswordCounter++)
     3a8:	c7 3a       	cpi	r28, 0xA7	; 167
     3aa:	49 f7       	brne	.-46     	; 0x37e <APP_u8SetPassword+0x130>
     3ac:	2f ef       	ldi	r18, 0xFF	; 255
     3ae:	83 ed       	ldi	r24, 0xD3	; 211
     3b0:	90 e3       	ldi	r25, 0x30	; 48
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	80 40       	sbci	r24, 0x00	; 0
     3b6:	90 40       	sbci	r25, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <APP_u8SetPassword+0x164>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <APP_u8SetPassword+0x16e>
     3bc:	00 00       	nop
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	14 c0       	rjmp	.+40     	; 0x3ea <APP_u8SetPassword+0x19c>
		_delay_ms(1000);		
	}
	else 
	{
		// Not Identical
		lcd_vidClrDislay(); 
     3c2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
		lcd_vidGotoRowColumn(1,2);
     3c6:	62 e0       	ldi	r22, 0x02	; 2
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"Not Identical...");
     3ce:	8b e5       	ldi	r24, 0x5B	; 91
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     3d6:	ef ef       	ldi	r30, 0xFF	; 255
     3d8:	f3 ed       	ldi	r31, 0xD3	; 211
     3da:	20 e3       	ldi	r18, 0x30	; 48
     3dc:	e1 50       	subi	r30, 0x01	; 1
     3de:	f0 40       	sbci	r31, 0x00	; 0
     3e0:	20 40       	sbci	r18, 0x00	; 0
     3e2:	e1 f7       	brne	.-8      	; 0x3dc <APP_u8SetPassword+0x18e>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <APP_u8SetPassword+0x198>
     3e6:	00 00       	nop
		_delay_ms(1000);
		LOC_u8Result = E_NOK ; 
     3e8:	80 e0       	ldi	r24, 0x00	; 0
	}				
	return LOC_u8Result ; 
}
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	ff 90       	pop	r15
     3f2:	ef 90       	pop	r14
     3f4:	df 90       	pop	r13
     3f6:	cf 90       	pop	r12
     3f8:	08 95       	ret

000003fa <PasswordLock_voidInit>:
		_delay_ms(100);
	}	
}
/************************************* Definitions ********************************/
void PasswordLock_voidInit(void)
{
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
	/********************************** Inits *****************************/
	// TIMER 
	PasswordLock_Timer.operationModeTIM1			 = TIM_CTC_Mode     ; 
     400:	e5 eb       	ldi	r30, 0xB5	; 181
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	88 e0       	ldi	r24, 0x08	; 8
     406:	80 83       	st	Z, r24
	PasswordLock_Timer.clockSourceAndPrescalerTimer1 = TIMER1_CLK_OVR_1024; 
     408:	85 e0       	ldi	r24, 0x05	; 5
     40a:	81 83       	std	Z+1, r24	; 0x01
	Timer_voidInitTimer1(&PasswordLock_Timer); 
     40c:	cf 01       	movw	r24, r30
     40e:	0e 94 29 07 	call	0xe52	; 0xe52 <Timer_voidInitTimer1>
	// 4sec = 1024 / 160000 * Ticks (Ticks = 62500) 
	Timer_voidSetCompareValue(TIMER1,62500-1);
     412:	63 e2       	ldi	r22, 0x23	; 35
     414:	74 ef       	ldi	r23, 0xF4	; 244
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Timer_voidSetCompareValue>
	Timer_voidStopTimer(TIMER1);
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0e 94 83 07 	call	0xf06	; 0xf06 <Timer_voidStopTimer>
	Timer_voidSetCompMatchInterrupState(TIMER1  , TIM_OCM_ENABLE) ; 
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	0e 94 bf 07 	call	0xf7e	; 0xf7e <Timer_voidSetCompMatchInterrupState>
	Timer_voidSetCompareMatchCallback(TIMER1 , TIMER1_CallbackFunction);
     42a:	68 e5       	ldi	r22, 0x58	; 88
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Timer_voidSetCompareMatchCallback>
	Timer_voidStartTimer(TIMER1);
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 3b 07 	call	0xe76	; 0xe76 <Timer_voidStartTimer>
	// I2C 
	I2C_MasterInit();
     43a:	0e 94 17 09 	call	0x122e	; 0x122e <I2C_MasterInit>
	// LCD Init 
	lcd_vidInit();	
     43e:	0e 94 62 05 	call	0xac4	; 0xac4 <lcd_vidInit>
	// Keypad Init
	keypad_vidInit(); 
     442:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <keypad_vidInit>
	// Enable Interrupts 
	sei();
     446:	78 94       	sei
	/**************************************** Check Operation Times ******************/ 
	//APP_FactoryReset();
	while(Global_ErrorHandling != E_OK )
     448:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__data_end>
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	81 f1       	breq	.+96     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
}
static u8 APP_ReadEEPROM(u16 uiAddress)
{
	u8 LOC_u8ReturnValue = 0xFF ;  // 0xFF init. value for EEPROM
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	LOC_u8ReturnValue = eep_readByte(uiAddress);
     450:	80 ea       	ldi	r24, 0xA0	; 160
     452:	0e 94 44 03 	call	0x688	; 0x688 <eep_readByte>
	// Vars 
	u8 LOC_u8ComingEEPROM_Data = 0 ; 
	APP_ErrorHandling_t  LOC_u8Result = E_OK ; 
	
	LOC_u8ComingEEPROM_Data = APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM);
	if(NOT_FIRST_TIME != LOC_u8ComingEEPROM_Data)
     456:	88 23       	and	r24, r24
     458:	d1 f0       	breq	.+52     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
	{
		lcd_vidClrDislay(); 
     45a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
		lcd_vidGotoRowColumn(1,0);	
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 12 05 	call	0xa24	; 0xa24 <lcd_vidGotoRowColumn>
		lcd_vidDisplyStr((u8*)"Welcome to safe area");
     466:	8c e6       	ldi	r24, 0x6C	; 108
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     46e:	2f ef       	ldi	r18, 0xFF	; 255
     470:	8d e3       	ldi	r24, 0x3D	; 61
     472:	99 e4       	ldi	r25, 0x49	; 73
     474:	21 50       	subi	r18, 0x01	; 1
     476:	80 40       	sbci	r24, 0x00	; 0
     478:	90 40       	sbci	r25, 0x00	; 0
     47a:	e1 f7       	brne	.-8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     47e:	00 00       	nop
		_delay_ms(1500);
		// Get Password 
		LOC_u8Result = APP_u8SetPassword();
     480:	0e 94 27 01 	call	0x24e	; 0x24e <APP_u8SetPassword>
	sei();
	/**************************************** Check Operation Times ******************/ 
	//APP_FactoryReset();
	while(Global_ErrorHandling != E_OK )
	{
		Global_ErrorHandling = APP_HandleFirstTime();
     484:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>
	keypad_vidInit(); 
	// Enable Interrupts 
	sei();
	/**************************************** Check Operation Times ******************/ 
	//APP_FactoryReset();
	while(Global_ErrorHandling != E_OK )
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	11 f7       	brne	.-60     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     48c:	11 c0       	rjmp	.+34     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     48e:	0f ea       	ldi	r16, 0xAF	; 175
     490:	11 e0       	ldi	r17, 0x01	; 1
	// Vars 
	u8 LOC_u8ComingEEPROM_Data = 0 ; 
	APP_ErrorHandling_t  LOC_u8Result = E_OK ; 
	
	LOC_u8ComingEEPROM_Data = APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM);
	if(NOT_FIRST_TIME != LOC_u8ComingEEPROM_Data)
     492:	c1 ea       	ldi	r28, 0xA1	; 161
}
static u8 APP_ReadEEPROM(u16 uiAddress)
{
	u8 LOC_u8ReturnValue = 0xFF ;  // 0xFF init. value for EEPROM
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	LOC_u8ReturnValue = eep_readByte(uiAddress);
     494:	8c 2f       	mov	r24, r28
     496:	0e 94 44 03 	call	0x688	; 0x688 <eep_readByte>
		lcd_vidClrDislay(); 
		#endif
		for(LOC_u8PasswordCounter = 0 ;  LOC_u8PasswordCounter < NUM_PASS_DIGITS ; LOC_u8PasswordCounter++)
		{
			// Write Password in EEPORM 
			APP_GlobalPasswordBuffer[LOC_u8PasswordCounter]	 = APP_ReadEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM+LOC_u8PasswordCounter+1);
     49a:	f8 01       	movw	r30, r16
     49c:	81 93       	st	Z+, r24
     49e:	8f 01       	movw	r16, r30
     4a0:	cf 5f       	subi	r28, 0xFF	; 255
		Glob_u8IsFirstTime = NOT_FIRST_TIME ; 
		// Reload Password From EEPROM to APP_GlobalPasswordBuffer
		#if DEBUG_MODE == 1 
		lcd_vidClrDislay(); 
		#endif
		for(LOC_u8PasswordCounter = 0 ;  LOC_u8PasswordCounter < NUM_PASS_DIGITS ; LOC_u8PasswordCounter++)
     4a2:	c7 3a       	cpi	r28, 0xA7	; 167
     4a4:	b9 f7       	brne	.-18     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
			#if DEBUG_MODE == 1 
			lcd_vidDisplyChar(APP_GlobalPasswordBuffer[LOC_u8PasswordCounter]);
			_delay_ms(1000);
			#endif
		}
		APP_GlobalPasswordBuffer[LOC_u8PasswordCounter]	 = '\0';
     4a6:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <PasswordLock_Timer>
	sei();
	/**************************************** Check Operation Times ******************/ 
	//APP_FactoryReset();
	while(Global_ErrorHandling != E_OK )
	{
		Global_ErrorHandling = APP_HandleFirstTime();
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>
	}
	APP_voidDisplayMainScreen(Global_u8SystemIsLocked,0);	
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     4b6:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_voidDisplayMainScreen>
	#endif
	#if EXTERNAL_EEPROM_TST == 1
	ExternalEEPROM_Test();
	#endif
	#endif 
}
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <PasswordLock_voidStart>:

void PasswordLock_voidStart(void)
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <PasswordLock_voidStart+0x6>
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <PasswordLock_voidStart+0x8>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <PasswordLock_voidStart+0xa>
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8PressedKey = 0xFF;
	u8 LOC_u8PasswordBuffer[NUM_PASS_DIGITS] = {0}; 
     4d0:	fe 01       	movw	r30, r28
     4d2:	31 96       	adiw	r30, 0x01	; 1
     4d4:	86 e0       	ldi	r24, 0x06	; 6
     4d6:	df 01       	movw	r26, r30
     4d8:	1d 92       	st	X+, r1
     4da:	8a 95       	dec	r24
     4dc:	e9 f7       	brne	.-6      	; 0x4d8 <PasswordLock_voidStart+0x16>
	/**************** Keypad Test ***********************/ 
	#if TEST_MODE == 1 
	Keypad_voidTest();
	#endif 
	/**************** Application ************************/
	if(Global_u8SystemIsLocked != Loc_u8SystemPrevState)
     4de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     4e2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Loc_u8SystemPrevState>
     4e6:	89 17       	cp	r24, r25
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <PasswordLock_voidStart+0x36>
	{
		// Password Buffer is Ready 
		APP_voidDisplayMainScreen(Global_u8SystemIsLocked,0);	
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_voidDisplayMainScreen>
		Loc_u8SystemPrevState = Global_u8SystemIsLocked ;	
     4f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     4f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Loc_u8SystemPrevState>
	}
	// Check Pressed Key 
	LOC_u8PressedKey = keypad_u8GetKey(); 
     4f8:	0e 94 4a 04 	call	0x894	; 0x894 <keypad_u8GetKey>
	if(LOC_u8PressedKey == '1')
     4fc:	81 33       	cpi	r24, 0x31	; 49
     4fe:	79 f5       	brne	.+94     	; 0x55e <PasswordLock_voidStart+0x9c>
	{
		if(Global_u8SystemIsLocked == 1)
     500:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	39 f5       	brne	.+78     	; 0x556 <PasswordLock_voidStart+0x94>
		{
			// Ready to Unlock
			APP_voidGetPassword(LOC_u8PasswordBuffer); 
     508:	ce 01       	movw	r24, r28
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <APP_voidGetPassword>
			LOC_u8Result = APP_u8PasswordAuthentication(LOC_u8PasswordBuffer); 
     510:	ce 01       	movw	r24, r28
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	0e 94 49 00 	call	0x92	; 0x92 <APP_u8PasswordAuthentication>
			if(LOC_u8Result == 1)
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	29 f4       	brne	.+10     	; 0x526 <PasswordLock_voidStart+0x64>
			{
				Global_u8SystemIsLocked = 0 ;
     51c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Global_u8SystemIsLocked>
				Timer_voidStartTimer(TIMER1);
     520:	0e 94 3b 07 	call	0xe76	; 0xe76 <Timer_voidStartTimer>
     524:	8e c0       	rjmp	.+284    	; 0x642 <PasswordLock_voidStart+0x180>
			}
			else
			{
				Global_u8SystemIsLocked = 1 ;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Global_u8SystemIsLocked>
				lcd_vidClrDislay(); 
     52c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
				lcd_vidDisplyStr((u8*)"Wrong Password"); 
     530:	81 e8       	ldi	r24, 0x81	; 129
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     538:	bf ef       	ldi	r27, 0xFF	; 255
     53a:	23 ed       	ldi	r18, 0xD3	; 211
     53c:	80 e3       	ldi	r24, 0x30	; 48
     53e:	b1 50       	subi	r27, 0x01	; 1
     540:	20 40       	sbci	r18, 0x00	; 0
     542:	80 40       	sbci	r24, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <PasswordLock_voidStart+0x7c>
     546:	00 c0       	rjmp	.+0      	; 0x548 <PasswordLock_voidStart+0x86>
     548:	00 00       	nop
				_delay_ms(1000);
				APP_voidDisplayMainScreen(Global_u8SystemIsLocked,0);	
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     550:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_voidDisplayMainScreen>
     554:	76 c0       	rjmp	.+236    	; 0x642 <PasswordLock_voidStart+0x180>
			}
		}
		else
		{
			// Ready to Locked
			Global_u8SystemIsLocked = 1 ; 
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Global_u8SystemIsLocked>
     55c:	72 c0       	rjmp	.+228    	; 0x642 <PasswordLock_voidStart+0x180>
		}
		
	}
	else if ( LOC_u8PressedKey == '2' )
     55e:	82 33       	cpi	r24, 0x32	; 50
     560:	11 f5       	brne	.+68     	; 0x5a6 <PasswordLock_voidStart+0xe4>
	{
		APP_voidGetPassword(LOC_u8PasswordBuffer); 
     562:	ce 01       	movw	r24, r28
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	0e 94 fd 00 	call	0x1fa	; 0x1fa <APP_voidGetPassword>
		LOC_u8Result = APP_u8PasswordAuthentication(LOC_u8PasswordBuffer); 
     56a:	ce 01       	movw	r24, r28
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	0e 94 49 00 	call	0x92	; 0x92 <APP_u8PasswordAuthentication>
		if(LOC_u8Result == 1)
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	19 f4       	brne	.+6      	; 0x57c <PasswordLock_voidStart+0xba>
		{
			APP_u8SetPassword();
     576:	0e 94 27 01 	call	0x24e	; 0x24e <APP_u8SetPassword>
     57a:	0f c0       	rjmp	.+30     	; 0x59a <PasswordLock_voidStart+0xd8>
		}
		else
		{
			lcd_vidClrDislay(); 
     57c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
			lcd_vidDisplyStr((u8*)"Wrong Password"); 
     580:	81 e8       	ldi	r24, 0x81	; 129
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     588:	9f ef       	ldi	r25, 0xFF	; 255
     58a:	a3 ed       	ldi	r26, 0xD3	; 211
     58c:	b0 e3       	ldi	r27, 0x30	; 48
     58e:	91 50       	subi	r25, 0x01	; 1
     590:	a0 40       	sbci	r26, 0x00	; 0
     592:	b0 40       	sbci	r27, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <PasswordLock_voidStart+0xcc>
     596:	00 c0       	rjmp	.+0      	; 0x598 <PasswordLock_voidStart+0xd6>
     598:	00 00       	nop
			_delay_ms(1000);
		}
		APP_voidDisplayMainScreen(Global_u8SystemIsLocked,0);	
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     5a0:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_voidDisplayMainScreen>
     5a4:	4e c0       	rjmp	.+156    	; 0x642 <PasswordLock_voidStart+0x180>
	}
	else if (LOC_u8PressedKey == UP_BTN)
     5a6:	81 34       	cpi	r24, 0x41	; 65
     5a8:	31 f4       	brne	.+12     	; 0x5b6 <PasswordLock_voidStart+0xf4>
	{
		APP_voidDisplayMainScreen(Global_u8SystemIsLocked,0);	
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     5b0:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_voidDisplayMainScreen>
     5b4:	46 c0       	rjmp	.+140    	; 0x642 <PasswordLock_voidStart+0x180>
	}
	else if(LOC_u8PressedKey == DOWN_BTN)
     5b6:	84 34       	cpi	r24, 0x44	; 68
     5b8:	31 f4       	brne	.+12     	; 0x5c6 <PasswordLock_voidStart+0x104>
	{
		APP_voidDisplayMainScreen(Global_u8SystemIsLocked,1);
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     5c0:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_voidDisplayMainScreen>
     5c4:	3e c0       	rjmp	.+124    	; 0x642 <PasswordLock_voidStart+0x180>
	}
	else if (LOC_u8PressedKey == '3')
     5c6:	83 33       	cpi	r24, 0x33	; 51
     5c8:	31 f5       	brne	.+76     	; 0x616 <PasswordLock_voidStart+0x154>
	{
		APP_voidGetPassword(LOC_u8PasswordBuffer); 
     5ca:	ce 01       	movw	r24, r28
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	0e 94 fd 00 	call	0x1fa	; 0x1fa <APP_voidGetPassword>
		LOC_u8Result = APP_u8PasswordAuthentication(LOC_u8PasswordBuffer); 
     5d2:	ce 01       	movw	r24, r28
     5d4:	01 96       	adiw	r24, 0x01	; 1
     5d6:	0e 94 49 00 	call	0x92	; 0x92 <APP_u8PasswordAuthentication>
		if(LOC_u8Result == 1)
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	39 f4       	brne	.+14     	; 0x5ec <PasswordLock_voidStart+0x12a>
	}
}
static void APP_WriteEEPROM(u16 uiAddress, u8 ucData)
{
	#if USAGE_EEPROM  == APP_USES_EXTERNAL_EEPROM
	eep_writebyte(uiAddress, ucData);
     5de:	6f ef       	ldi	r22, 0xFF	; 255
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	0e 94 2a 03 	call	0x654	; 0x654 <eep_writebyte>
static void APP_FactoryReset(void)
{
	// Clear EEPROM 
	APP_WriteEEPROM(IS_FIRST_TIME_ADDRESS_EEPROM, 0xFF);
	// Soft Reset 
	asm("jmp 0x0000");
     5e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     5ea:	2b c0       	rjmp	.+86     	; 0x642 <PasswordLock_voidStart+0x180>
		{
			APP_FactoryReset(); 
		}
		else
		{
			lcd_vidClrDislay(); 
     5ec:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
			lcd_vidDisplyStr((u8*)"Wrong Password"); 
     5f0:	81 e8       	ldi	r24, 0x81	; 129
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     5f8:	2f ef       	ldi	r18, 0xFF	; 255
     5fa:	83 ed       	ldi	r24, 0xD3	; 211
     5fc:	90 e3       	ldi	r25, 0x30	; 48
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	80 40       	sbci	r24, 0x00	; 0
     602:	90 40       	sbci	r25, 0x00	; 0
     604:	e1 f7       	brne	.-8      	; 0x5fe <PasswordLock_voidStart+0x13c>
     606:	00 c0       	rjmp	.+0      	; 0x608 <PasswordLock_voidStart+0x146>
     608:	00 00       	nop
			_delay_ms(1000);
			APP_voidDisplayMainScreen(Global_u8SystemIsLocked,0);	
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     610:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_voidDisplayMainScreen>
     614:	16 c0       	rjmp	.+44     	; 0x642 <PasswordLock_voidStart+0x180>

		}


	}
	else if(LOC_u8PressedKey != 0xFF)
     616:	8f 3f       	cpi	r24, 0xFF	; 255
     618:	a1 f0       	breq	.+40     	; 0x642 <PasswordLock_voidStart+0x180>
	{
		lcd_vidClrDislay(); 
     61a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <lcd_vidClrDislay>
		lcd_vidDisplyStr((u8*)"Wrong Choice"); 
     61e:	80 e9       	ldi	r24, 0x90	; 144
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 31 05 	call	0xa62	; 0xa62 <lcd_vidDisplyStr>
     626:	af ef       	ldi	r26, 0xFF	; 255
     628:	bd e2       	ldi	r27, 0x2D	; 45
     62a:	22 e2       	ldi	r18, 0x22	; 34
     62c:	a1 50       	subi	r26, 0x01	; 1
     62e:	b0 40       	sbci	r27, 0x00	; 0
     630:	20 40       	sbci	r18, 0x00	; 0
     632:	e1 f7       	brne	.-8      	; 0x62c <PasswordLock_voidStart+0x16a>
     634:	00 c0       	rjmp	.+0      	; 0x636 <PasswordLock_voidStart+0x174>
     636:	00 00       	nop
		_delay_ms(700);
		APP_voidDisplayMainScreen(Global_u8SystemIsLocked,0);	
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Global_u8SystemIsLocked>
     63e:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_voidDisplayMainScreen>
	}
	else
	{
		// Not Supported 
	}
}
     642:	26 96       	adiw	r28, 0x06	; 6
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <eep_writebyte>:
#include "bit_math.h"
#include "i2c.h"
#include "i2c_reg.h"

void eep_writebyte(u8 addr,u8 data)
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	d8 2f       	mov	r29, r24
     65a:	c6 2f       	mov	r28, r22
	I2C_StartCondition();
     65c:	0e 94 1d 09 	call	0x123a	; 0x123a <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation(0b01010000);
     660:	80 e5       	ldi	r24, 0x50	; 80
     662:	0e 94 46 09 	call	0x128c	; 0x128c <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(addr);
     666:	8d 2f       	mov	r24, r29
     668:	0e 94 3b 09 	call	0x1276	; 0x1276 <I2C_WriteByte>
	I2C_WriteByte(data);
     66c:	8c 2f       	mov	r24, r28
     66e:	0e 94 3b 09 	call	0x1276	; 0x1276 <I2C_WriteByte>
	I2C_StopCondition();
     672:	0e 94 37 09 	call	0x126e	; 0x126e <I2C_StopCondition>
     676:	8f e3       	ldi	r24, 0x3F	; 63
     678:	9f e1       	ldi	r25, 0x1F	; 31
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <eep_writebyte+0x26>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <eep_writebyte+0x2c>
     680:	00 00       	nop
	_delay_ms(2);
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <eep_readByte>:

u8 eep_readByte(u8 addr)
{
     688:	cf 93       	push	r28
     68a:	c8 2f       	mov	r28, r24
	u8 x=0;
	I2C_StartCondition();
     68c:	0e 94 1d 09 	call	0x123a	; 0x123a <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation(0b01010000);
     690:	80 e5       	ldi	r24, 0x50	; 80
     692:	0e 94 46 09 	call	0x128c	; 0x128c <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(addr);
     696:	8c 2f       	mov	r24, r28
     698:	0e 94 3b 09 	call	0x1276	; 0x1276 <I2C_WriteByte>
	I2C_RepeatedStartCondition();
     69c:	0e 94 2a 09 	call	0x1254	; 0x1254 <I2C_RepeatedStartCondition>
	I2C_Send_SlaveAddressReadOperation(0b01010000);
     6a0:	80 e5       	ldi	r24, 0x50	; 80
     6a2:	0e 94 55 09 	call	0x12aa	; 0x12aa <I2C_Send_SlaveAddressReadOperation>
	x=I2C_ReadByte();
     6a6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <I2C_ReadByte>
     6aa:	c8 2f       	mov	r28, r24
	I2C_StopCondition();
     6ac:	0e 94 37 09 	call	0x126e	; 0x126e <I2C_StopCondition>
	return x;
     6b0:	8c 2f       	mov	r24, r28
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <keypad_vidInit>:
* \Return value:   : None                               
*******************************************************************************/
void keypad_vidInit(void)
{
	/*	ROW channel direction -> output	*/
	dio_vidConfigChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,OUTPUT);
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	65 e0       	ldi	r22, 0x05	; 5
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,OUTPUT);
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	64 e0       	ldi	r22, 0x04	; 4
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,OUTPUT);
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	63 e0       	ldi	r22, 0x03	; 3
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,OUTPUT);
     6d4:	41 e0       	ldi	r20, 0x01	; 1
     6d6:	62 e0       	ldi	r22, 0x02	; 2
     6d8:	82 e0       	ldi	r24, 0x02	; 2
     6da:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	
	/*	COLUMN channel direction -> input	*/
	dio_vidConfigChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL,INPUT);
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	67 e0       	ldi	r22, 0x07	; 7
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL,INPUT);
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	66 e0       	ldi	r22, 0x06	; 6
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL,INPUT);
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	65 e0       	ldi	r22, 0x05	; 5
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL,INPUT);
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	63 e0       	ldi	r22, 0x03	; 3
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_LOW);
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	65 e0       	ldi	r22, 0x05	; 5
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	64 e0       	ldi	r22, 0x04	; 4
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_LOW);
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	63 e0       	ldi	r22, 0x03	; 3
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_LOW);
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	62 e0       	ldi	r22, 0x02	; 2
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
     72e:	08 95       	ret

00000730 <keypad_bolIsPressed>:


boolean keypad_bolIsPressed(void)
{
	if (
		!dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL)||
     730:	67 e0       	ldi	r22, 0x07	; 7
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	0e 94 f7 06 	call	0xdee	; 0xdee <dio_dioLevelReadChannel>
}


boolean keypad_bolIsPressed(void)
{
	if (
     738:	88 23       	and	r24, r24
     73a:	a9 f0       	breq	.+42     	; 0x766 <keypad_bolIsPressed+0x36>
		!dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL)||
		!dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL)||
     73c:	66 e0       	ldi	r22, 0x06	; 6
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	0e 94 f7 06 	call	0xdee	; 0xdee <dio_dioLevelReadChannel>


boolean keypad_bolIsPressed(void)
{
	if (
		!dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL)||
     744:	88 23       	and	r24, r24
     746:	89 f0       	breq	.+34     	; 0x76a <keypad_bolIsPressed+0x3a>
		!dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL)||
		!dio_vidReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL)||
     748:	65 e0       	ldi	r22, 0x05	; 5
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	0e 94 f7 06 	call	0xdee	; 0xdee <dio_dioLevelReadChannel>

boolean keypad_bolIsPressed(void)
{
	if (
		!dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL)||
		!dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL)||
     750:	88 23       	and	r24, r24
     752:	69 f0       	breq	.+26     	; 0x76e <keypad_bolIsPressed+0x3e>
		!dio_vidReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL)||
		!dio_vidReadChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL)
     754:	63 e0       	ldi	r22, 0x03	; 3
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	0e 94 f7 06 	call	0xdee	; 0xdee <dio_dioLevelReadChannel>
		)
		{
		  return TRUE;
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	88 23       	and	r24, r24
     760:	39 f0       	breq	.+14     	; 0x770 <keypad_bolIsPressed+0x40>
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	05 c0       	rjmp	.+10     	; 0x770 <keypad_bolIsPressed+0x40>
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	03 c0       	rjmp	.+6      	; 0x770 <keypad_bolIsPressed+0x40>
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	01 c0       	rjmp	.+2      	; 0x770 <keypad_bolIsPressed+0x40>
     76e:	91 e0       	ldi	r25, 0x01	; 1
		}
		else
		{
		  return FALSE;
		}
}
     770:	89 2f       	mov	r24, r25
     772:	08 95       	ret

00000774 <keypad_GetCol>:
u8 keypad_GetCol(void)
{
     774:	cf 93       	push	r28
	u8 loc_col = 0;
	if (STD_LOW == dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL))
     776:	67 e0       	ldi	r22, 0x07	; 7
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	0e 94 f7 06 	call	0xdee	; 0xdee <dio_dioLevelReadChannel>
     77e:	88 23       	and	r24, r24
     780:	a1 f0       	breq	.+40     	; 0x7aa <keypad_GetCol+0x36>
	{
		loc_col = 1;	
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL))
     782:	66 e0       	ldi	r22, 0x06	; 6
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	0e 94 f7 06 	call	0xdee	; 0xdee <dio_dioLevelReadChannel>
     78a:	88 23       	and	r24, r24
     78c:	81 f0       	breq	.+32     	; 0x7ae <keypad_GetCol+0x3a>
	{
	 loc_col = 2;	
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL))
     78e:	65 e0       	ldi	r22, 0x05	; 5
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	0e 94 f7 06 	call	0xdee	; 0xdee <dio_dioLevelReadChannel>
     796:	88 23       	and	r24, r24
     798:	61 f0       	breq	.+24     	; 0x7b2 <keypad_GetCol+0x3e>
	{
	 loc_col = 3;	
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL4_PORT,KEYPAD_COL4_CHANNEL))
     79a:	63 e0       	ldi	r22, 0x03	; 3
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	0e 94 f7 06 	call	0xdee	; 0xdee <dio_dioLevelReadChannel>
     7a2:	81 11       	cpse	r24, r1
     7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <keypad_GetCol+0x42>
	{
	 loc_col = 4;	
     7a6:	c4 e0       	ldi	r28, 0x04	; 4
     7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <keypad_GetCol+0x44>
u8 keypad_GetCol(void)
{
	u8 loc_col = 0;
	if (STD_LOW == dio_vidReadChannel(KEYPAD_COL1_PORT,KEYPAD_COL1_CHANNEL))
	{
		loc_col = 1;	
     7aa:	c1 e0       	ldi	r28, 0x01	; 1
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <keypad_GetCol+0x44>
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL2_PORT,KEYPAD_COL2_CHANNEL))
	{
	 loc_col = 2;	
     7ae:	c2 e0       	ldi	r28, 0x02	; 2
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <keypad_GetCol+0x44>
	}
	else if (STD_LOW == dio_vidReadChannel(KEYPAD_COL3_PORT,KEYPAD_COL3_CHANNEL))
	{
	 loc_col = 3;	
     7b2:	c3 e0       	ldi	r28, 0x03	; 3
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <keypad_GetCol+0x44>
		  return FALSE;
		}
}
u8 keypad_GetCol(void)
{
	u8 loc_col = 0;
     7b6:	c0 e0       	ldi	r28, 0x00	; 0
	}
	else
	{
		/*	do nothing	*/
	}
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	65 e0       	ldi	r22, 0x05	; 5
     7bc:	82 e0       	ldi	r24, 0x02	; 2
     7be:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	64 e0       	ldi	r22, 0x04	; 4
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	63 e0       	ldi	r22, 0x03	; 3
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_HIGH);
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	
	return loc_col;
}
     7e0:	8c 2f       	mov	r24, r28
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <keypad_GetRow>:

u8 keypad_GetRow(u8 col)
{
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	c8 2f       	mov	r28, r24
	u8 loc_row =0;
	
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_LOW);
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	65 e0       	ldi	r22, 0x05	; 5
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
     7f8:	0e 94 ba 03 	call	0x774	; 0x774 <keypad_GetCol>
     7fc:	18 2f       	mov	r17, r24
	{
		loc_row = 1;	
	}
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	65 e0       	ldi	r22, 0x05	; 5
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	64 e0       	ldi	r22, 0x04	; 4
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
     812:	0e 94 ba 03 	call	0x774	; 0x774 <keypad_GetCol>
     816:	c8 17       	cp	r28, r24
     818:	29 f0       	breq	.+10     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
	return loc_col;
}

u8 keypad_GetRow(u8 col)
{
	u8 loc_row =0;
     81a:	d1 e0       	ldi	r29, 0x01	; 1
     81c:	1c 17       	cp	r17, r28
     81e:	19 f0       	breq	.+6      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     820:	d0 e0       	ldi	r29, 0x00	; 0
     822:	01 c0       	rjmp	.+2      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	}
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_HIGH);
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
	if (keypad_GetCol() == col)
	{
		loc_row = 2;	
     824:	d2 e0       	ldi	r29, 0x02	; 2
	}
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_HIGH);
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	64 e0       	ldi	r22, 0x04	; 4
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_LOW);
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	63 e0       	ldi	r22, 0x03	; 3
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
     83a:	0e 94 ba 03 	call	0x774	; 0x774 <keypad_GetCol>
     83e:	c8 13       	cpse	r28, r24
     840:	01 c0       	rjmp	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
	{
		loc_row = 3;	
     842:	d3 e0       	ldi	r29, 0x03	; 3
	}
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_HIGH);
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	63 e0       	ldi	r22, 0x03	; 3
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_LOW);
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	62 e0       	ldi	r22, 0x02	; 2
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	if (keypad_GetCol() == col)
     858:	0e 94 ba 03 	call	0x774	; 0x774 <keypad_GetCol>
     85c:	c8 13       	cpse	r28, r24
     85e:	01 c0       	rjmp	.+2      	; 0x862 <__stack+0x3>
	{
		loc_row = 4;	
     860:	d4 e0       	ldi	r29, 0x04	; 4
	}
	dio_vidWriteChannel(KEYPAD_ROW1_PORT,KEYPAD_ROW1_CHANNEL,STD_LOW);
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	65 e0       	ldi	r22, 0x05	; 5
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW2_PORT,KEYPAD_ROW2_CHANNEL,STD_LOW);
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	64 e0       	ldi	r22, 0x04	; 4
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW3_PORT,KEYPAD_ROW3_CHANNEL,STD_LOW);
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	63 e0       	ldi	r22, 0x03	; 3
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(KEYPAD_ROW4_PORT,KEYPAD_ROW4_CHANNEL,STD_LOW);
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	62 e0       	ldi	r22, 0x02	; 2
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	return loc_row;
}
     88a:	8d 2f       	mov	r24, r29
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	08 95       	ret

00000894 <keypad_u8GetKey>:
/*	it shall be called periodically	*/
u8 keypad_u8GetKey(void)
{
     894:	cf 93       	push	r28
	u8 loc_row = 0;
	u8 loc_col = 0;
	
	if (TRUE == keypad_bolIsPressed())
     896:	0e 94 98 03 	call	0x730	; 0x730 <keypad_bolIsPressed>
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	d9 f4       	brne	.+54     	; 0x8d4 <keypad_u8GetKey+0x40>
	{
		//loc_col = 1;
		//loc_row = 1;
		loc_col = keypad_GetCol();
     89e:	0e 94 ba 03 	call	0x774	; 0x774 <keypad_GetCol>
     8a2:	c8 2f       	mov	r28, r24
		loc_row = keypad_GetRow(loc_col);
     8a4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <keypad_GetRow>
     8a8:	2f ef       	ldi	r18, 0xFF	; 255
     8aa:	31 ee       	ldi	r19, 0xE1	; 225
     8ac:	94 e0       	ldi	r25, 0x04	; 4
     8ae:	21 50       	subi	r18, 0x01	; 1
     8b0:	30 40       	sbci	r19, 0x00	; 0
     8b2:	90 40       	sbci	r25, 0x00	; 0
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <keypad_u8GetKey+0x1a>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <keypad_u8GetKey+0x24>
     8b8:	00 00       	nop
		_delay_ms(100);	/*	press time	*/	
		return 	keys_value[loc_row-1][loc_col-1];
     8ba:	e8 2f       	mov	r30, r24
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	e7 56       	subi	r30, 0x67	; 103
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	ec 0f       	add	r30, r28
     8cc:	f1 1d       	adc	r31, r1
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	80 81       	ld	r24, Z
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <keypad_u8GetKey+0x42>
	}
	else
	{
		return 0xFF;
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <enablePulse>:
* \Return value:   : None                                 
*******************************************************************************/

static void enablePulse(void)
{
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_HIGH);
     8da:	41 e0       	ldi	r20, 0x01	; 1
     8dc:	62 e0       	ldi	r22, 0x02	; 2
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e4:	85 e0       	ldi	r24, 0x05	; 5
     8e6:	8a 95       	dec	r24
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <enablePulse+0xc>
     8ea:	00 00       	nop
	_delay_us(1);
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_LOW);
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f6:	8f e3       	ldi	r24, 0x3F	; 63
     8f8:	9f e1       	ldi	r25, 0x1F	; 31
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <enablePulse+0x20>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <enablePulse+0x26>
     900:	00 00       	nop
     902:	08 95       	ret

00000904 <lcd_vidSendCmd>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : cmd	-> LCD command ID                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendCmd(lcd_cmd_t cmd)
{
     904:	cf 93       	push	r28
     906:	c8 2f       	mov	r28, r24
     908:	8f e9       	ldi	r24, 0x9F	; 159
     90a:	9f e0       	ldi	r25, 0x0F	; 15
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <lcd_vidSendCmd+0x8>
     910:	00 c0       	rjmp	.+0      	; 0x912 <lcd_vidSendCmd+0xe>
     912:	00 00       	nop
	/*	RS -> Command Mode	*/
	_delay_ms(1);
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_LOW);
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	63 e0       	ldi	r22, 0x03	; 3
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,4));
     91e:	c4 fb       	bst	r28, 4
     920:	44 27       	eor	r20, r20
     922:	40 f9       	bld	r20, 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D5_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,5));
     92c:	c5 fb       	bst	r28, 5
     92e:	44 27       	eor	r20, r20
     930:	40 f9       	bld	r20, 0
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D6_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,6));
     93a:	c6 fb       	bst	r28, 6
     93c:	44 27       	eor	r20, r20
     93e:	40 f9       	bld	r20, 0
     940:	62 e0       	ldi	r22, 0x02	; 2
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D7_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,7));
     948:	4c 2f       	mov	r20, r28
     94a:	44 1f       	adc	r20, r20
     94c:	44 27       	eor	r20, r20
     94e:	44 1f       	adc	r20, r20
     950:	64 e0       	ldi	r22, 0x04	; 4
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	
	enablePulse();
     958:	0e 94 6d 04 	call	0x8da	; 0x8da <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,0));
     95c:	4c 2f       	mov	r20, r28
     95e:	41 70       	andi	r20, 0x01	; 1
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D5_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,1));
     968:	c1 fb       	bst	r28, 1
     96a:	44 27       	eor	r20, r20
     96c:	40 f9       	bld	r20, 0
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D6_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,2));
     976:	c2 fb       	bst	r28, 2
     978:	44 27       	eor	r20, r20
     97a:	40 f9       	bld	r20, 0
     97c:	62 e0       	ldi	r22, 0x02	; 2
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D7_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,3));
     984:	c3 fb       	bst	r28, 3
     986:	44 27       	eor	r20, r20
     988:	40 f9       	bld	r20, 0
     98a:	64 e0       	ldi	r22, 0x04	; 4
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	
	enablePulse();
     992:	0e 94 6d 04 	call	0x8da	; 0x8da <enablePulse>
}
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <lcd_vidSendData>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : data	-> LCD data input                                                                       
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendData(u8 data)
{
     99a:	cf 93       	push	r28
     99c:	c8 2f       	mov	r28, r24
	/*	RS -> Data Mode	*/
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_HIGH);
     99e:	41 e0       	ldi	r20, 0x01	; 1
     9a0:	63 e0       	ldi	r22, 0x03	; 3
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,4));
     9a8:	c4 fb       	bst	r28, 4
     9aa:	44 27       	eor	r20, r20
     9ac:	40 f9       	bld	r20, 0
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,5));
     9b6:	c5 fb       	bst	r28, 5
     9b8:	44 27       	eor	r20, r20
     9ba:	40 f9       	bld	r20, 0
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,6));
     9c4:	c6 fb       	bst	r28, 6
     9c6:	44 27       	eor	r20, r20
     9c8:	40 f9       	bld	r20, 0
     9ca:	62 e0       	ldi	r22, 0x02	; 2
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,7));
     9d2:	4c 2f       	mov	r20, r28
     9d4:	44 1f       	adc	r20, r20
     9d6:	44 27       	eor	r20, r20
     9d8:	44 1f       	adc	r20, r20
     9da:	64 e0       	ldi	r22, 0x04	; 4
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	
	enablePulse();
     9e2:	0e 94 6d 04 	call	0x8da	; 0x8da <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,0));
     9e6:	4c 2f       	mov	r20, r28
     9e8:	41 70       	andi	r20, 0x01	; 1
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,1));
     9f2:	c1 fb       	bst	r28, 1
     9f4:	44 27       	eor	r20, r20
     9f6:	40 f9       	bld	r20, 0
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,2));
     a00:	c2 fb       	bst	r28, 2
     a02:	44 27       	eor	r20, r20
     a04:	40 f9       	bld	r20, 0
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,3));
     a0e:	c3 fb       	bst	r28, 3
     a10:	44 27       	eor	r20, r20
     a12:	40 f9       	bld	r20, 0
     a14:	64 e0       	ldi	r22, 0x04	; 4
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 8a 06 	call	0xd14	; 0xd14 <dio_vidWriteChannel>
	
	enablePulse();
     a1c:	0e 94 6d 04 	call	0x8da	; 0x8da <enablePulse>
	
}
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <lcd_vidGotoRowColumn>:
					 column -> LCD column ID															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidGotoRowColumn(u8 row, u8 column)
{
	switch (row)
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	59 f0       	breq	.+22     	; 0xa3e <lcd_vidGotoRowColumn+0x1a>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <lcd_vidGotoRowColumn+0x10>
     a2a:	82 30       	cpi	r24, 0x02	; 2
     a2c:	69 f0       	breq	.+26     	; 0xa48 <lcd_vidGotoRowColumn+0x24>
     a2e:	83 30       	cpi	r24, 0x03	; 3
     a30:	81 f0       	breq	.+32     	; 0xa52 <lcd_vidGotoRowColumn+0x2e>
     a32:	08 95       	ret
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
     a34:	80 e8       	ldi	r24, 0x80	; 128
     a36:	86 0f       	add	r24, r22
     a38:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
		break;
     a3c:	08 95       	ret
	case 1:
		/* Row 1 */
		lcd_vidSendCmd(0xC0+column);
     a3e:	80 ec       	ldi	r24, 0xC0	; 192
     a40:	86 0f       	add	r24, r22
     a42:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
		break;
     a46:	08 95       	ret
	case 2:
	/* Row 1 */
	lcd_vidSendCmd(0x94+column);
     a48:	84 e9       	ldi	r24, 0x94	; 148
     a4a:	86 0f       	add	r24, r22
     a4c:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
	break;
     a50:	08 95       	ret
	
	case 3:
	/* Row 1 */
	lcd_vidSendCmd(0xD4+column);
     a52:	84 ed       	ldi	r24, 0xD4	; 212
     a54:	86 0f       	add	r24, r22
     a56:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
     a5a:	08 95       	ret

00000a5c <lcd_vidDisplyChar>:
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
	lcd_vidSendData(chr);
     a5c:	0e 94 cd 04 	call	0x99a	; 0x99a <lcd_vidSendData>
     a60:	08 95       	ret

00000a62 <lcd_vidDisplyStr>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	ec 01       	movw	r28, r24
	while (*str != '\0')
     a68:	88 81       	ld	r24, Y
     a6a:	88 23       	and	r24, r24
     a6c:	31 f0       	breq	.+12     	; 0xa7a <lcd_vidDisplyStr+0x18>
     a6e:	21 96       	adiw	r28, 0x01	; 1
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
	lcd_vidSendData(chr);
     a70:	0e 94 cd 04 	call	0x99a	; 0x99a <lcd_vidSendData>
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
     a74:	89 91       	ld	r24, Y+
     a76:	81 11       	cpse	r24, r1
     a78:	fb cf       	rjmp	.-10     	; 0xa70 <lcd_vidDisplyStr+0xe>
	{
		lcd_vidDisplyChar(*str);
		str++;
	}
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <lcd_vidCustomWrite>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidCustomWrite(void)
{
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	c3 e6       	ldi	r28, 0x63	; 99
     a8c:	d0 e0       	ldi	r29, 0x00	; 0
     a8e:	68 94       	set
     a90:	ff 24       	eor	r15, r15
     a92:	f6 f8       	bld	r15, 6
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
     a94:	8f 2d       	mov	r24, r15
     a96:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
     a9a:	8e 01       	movw	r16, r28
     a9c:	08 5f       	subi	r16, 0xF8	; 248
     a9e:	1f 4f       	sbci	r17, 0xFF	; 255
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
	lcd_vidSendData(chr);
     aa0:	89 91       	ld	r24, Y+
     aa2:	0e 94 cd 04 	call	0x99a	; 0x99a <lcd_vidSendData>
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
     aa6:	c0 17       	cp	r28, r16
     aa8:	d1 07       	cpc	r29, r17
     aaa:	d1 f7       	brne	.-12     	; 0xaa0 <lcd_vidCustomWrite+0x20>
     aac:	88 e0       	ldi	r24, 0x08	; 8
     aae:	f8 0e       	add	r15, r24
     ab0:	e8 01       	movw	r28, r16
void lcd_vidCustomWrite(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
     ab2:	80 e8       	ldi	r24, 0x80	; 128
     ab4:	f8 12       	cpse	r15, r24
     ab6:	ee cf       	rjmp	.-36     	; 0xa94 <lcd_vidCustomWrite+0x14>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	08 95       	ret

00000ac4 <lcd_vidInit>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidInit(void)
{
	dio_vidConfigChannel(LCD_RS_PORT, LCD_RS_CHANNEL, OUTPUT);
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	63 e0       	ldi	r22, 0x03	; 3
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_EN_PORT, LCD_EN_CHANNEL, OUTPUT);
     ace:	41 e0       	ldi	r20, 0x01	; 1
     ad0:	62 e0       	ldi	r22, 0x02	; 2
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>

	dio_vidConfigChannel(LCD_D4_PORT, LCD_D4_CHANNEL, OUTPUT);
     ad8:	41 e0       	ldi	r20, 0x01	; 1
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D5_PORT, LCD_D5_CHANNEL, OUTPUT);
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D6_PORT, LCD_D6_CHANNEL, OUTPUT);
     aec:	41 e0       	ldi	r20, 0x01	; 1
     aee:	62 e0       	ldi	r22, 0x02	; 2
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D7_PORT, LCD_D7_CHANNEL, OUTPUT);
     af6:	41 e0       	ldi	r20, 0x01	; 1
     af8:	64 e0       	ldi	r22, 0x04	; 4
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <dio_vidConfigChannel>
     b00:	2f ef       	ldi	r18, 0xFF	; 255
     b02:	89 ef       	ldi	r24, 0xF9	; 249
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	21 50       	subi	r18, 0x01	; 1
     b08:	80 40       	sbci	r24, 0x00	; 0
     b0a:	90 40       	sbci	r25, 0x00	; 0
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <lcd_vidInit+0x42>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <lcd_vidInit+0x4c>
     b10:	00 00       	nop

	_delay_ms(20);

	lcd_vidSendCmd(0x03);
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
     b18:	8f e1       	ldi	r24, 0x1F	; 31
     b1a:	9e e4       	ldi	r25, 0x4E	; 78
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <lcd_vidInit+0x58>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <lcd_vidInit+0x5e>
     b22:	00 00       	nop
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b2a:	8f e8       	ldi	r24, 0x8F	; 143
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <lcd_vidInit+0x6a>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <lcd_vidInit+0x70>
     b34:	00 00       	nop
	_delay_us(100);
	lcd_vidSendCmd(0x03);
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
	lcd_vidSendCmd(0x02);
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_4BIT_MODE);
     b42:	88 e2       	ldi	r24, 0x28	; 40
     b44:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_CURSOR_OFF);
     b48:	8c e0       	ldi	r24, 0x0C	; 12
     b4a:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
	lcd_vidCustomWrite();
     b4e:	0e 94 40 05 	call	0xa80	; 0xa80 <lcd_vidCustomWrite>
{
	switch (row)
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
     b58:	08 95       	ret

00000b5a <lcd_vidClrDislay>:
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidClrDislay(void)
{
	lcd_vidSendCmd(_LCD_CLEAR);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	0e 94 82 04 	call	0x904	; 0x904 <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b60:	8f e1       	ldi	r24, 0x1F	; 31
     b62:	9e e4       	ldi	r25, 0x4E	; 78
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <lcd_vidClrDislay+0xa>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <lcd_vidClrDislay+0x10>
     b6a:	00 00       	nop
     b6c:	08 95       	ret

00000b6e <lcd_vidDisplayNumbers>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : copy_u8Number
* \Return value:   : None
*******************************************************************************/
void lcd_vidDisplayNumbers(u32 copy_u8Number)
{
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	2c 97       	sbiw	r28, 0x0c	; 12
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8Buffer[12] ; 
	u8 LOC_u8Counter = 0 ; 
	u8  LOC_u8ASCII ; 
	if(copy_u8Number == 0)
     b8c:	61 15       	cp	r22, r1
     b8e:	71 05       	cpc	r23, r1
     b90:	81 05       	cpc	r24, r1
     b92:	91 05       	cpc	r25, r1
     b94:	21 f4       	brne	.+8      	; 0xb9e <lcd_vidDisplayNumbers+0x30>
	{
		lcd_vidSendData('0'); 
     b96:	80 e3       	ldi	r24, 0x30	; 48
     b98:	0e 94 cd 04 	call	0x99a	; 0x99a <lcd_vidSendData>
     b9c:	2b c0       	rjmp	.+86     	; 0xbf4 <lcd_vidDisplayNumbers+0x86>
     b9e:	10 e0       	ldi	r17, 0x00	; 0
		return ; 
	}
	while(copy_u8Number)
	{
		LOC_u8Counter++ ;
		LOC_u8ASCII = copy_u8Number % 10 ; 
     ba0:	0f 2e       	mov	r0, r31
     ba2:	fa e0       	ldi	r31, 0x0A	; 10
     ba4:	cf 2e       	mov	r12, r31
     ba6:	d1 2c       	mov	r13, r1
     ba8:	e1 2c       	mov	r14, r1
     baa:	f1 2c       	mov	r15, r1
     bac:	f0 2d       	mov	r31, r0
		lcd_vidSendData('0'); 
		return ; 
	}
	while(copy_u8Number)
	{
		LOC_u8Counter++ ;
     bae:	1f 5f       	subi	r17, 0xFF	; 255
		LOC_u8ASCII = copy_u8Number % 10 ; 
     bb0:	a7 01       	movw	r20, r14
     bb2:	96 01       	movw	r18, r12
     bb4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__udivmodsi4>
		LOC_u8ASCII = LOC_u8ASCII + '0' ; 
		LOC_u8Buffer[LOC_u8Counter]=LOC_u8ASCII;
     bb8:	e1 e0       	ldi	r30, 0x01	; 1
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	ec 0f       	add	r30, r28
     bbe:	fd 1f       	adc	r31, r29
     bc0:	e1 0f       	add	r30, r17
     bc2:	f1 1d       	adc	r31, r1
     bc4:	60 5d       	subi	r22, 0xD0	; 208
     bc6:	60 83       	st	Z, r22
		copy_u8Number = copy_u8Number / 10 ; 
     bc8:	62 2f       	mov	r22, r18
     bca:	73 2f       	mov	r23, r19
     bcc:	84 2f       	mov	r24, r20
     bce:	95 2f       	mov	r25, r21
	if(copy_u8Number == 0)
	{
		lcd_vidSendData('0'); 
		return ; 
	}
	while(copy_u8Number)
     bd0:	61 15       	cp	r22, r1
     bd2:	71 05       	cpc	r23, r1
     bd4:	81 05       	cpc	r24, r1
     bd6:	91 05       	cpc	r25, r1
     bd8:	51 f7       	brne	.-44     	; 0xbae <lcd_vidDisplayNumbers+0x40>
		LOC_u8ASCII = copy_u8Number % 10 ; 
		LOC_u8ASCII = LOC_u8ASCII + '0' ; 
		LOC_u8Buffer[LOC_u8Counter]=LOC_u8ASCII;
		copy_u8Number = copy_u8Number / 10 ; 
	}
	while(LOC_u8Counter)
     bda:	11 23       	and	r17, r17
     bdc:	59 f0       	breq	.+22     	; 0xbf4 <lcd_vidDisplayNumbers+0x86>
	{
		lcd_vidSendData(LOC_u8Buffer[LOC_u8Counter]); 
     bde:	e1 e0       	ldi	r30, 0x01	; 1
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	ec 0f       	add	r30, r28
     be4:	fd 1f       	adc	r31, r29
     be6:	e1 0f       	add	r30, r17
     be8:	f1 1d       	adc	r31, r1
     bea:	80 81       	ld	r24, Z
     bec:	0e 94 cd 04 	call	0x99a	; 0x99a <lcd_vidSendData>
		LOC_u8Counter--; 
     bf0:	11 50       	subi	r17, 0x01	; 1
		LOC_u8ASCII = copy_u8Number % 10 ; 
		LOC_u8ASCII = LOC_u8ASCII + '0' ; 
		LOC_u8Buffer[LOC_u8Counter]=LOC_u8ASCII;
		copy_u8Number = copy_u8Number / 10 ; 
	}
	while(LOC_u8Counter)
     bf2:	a9 f7       	brne	.-22     	; 0xbde <lcd_vidDisplayNumbers+0x70>
	{
		lcd_vidSendData(LOC_u8Buffer[LOC_u8Counter]); 
		LOC_u8Counter--; 
	}
	
}
     bf4:	2c 96       	adiw	r28, 0x0c	; 12
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	08 95       	ret

00000c10 <main>:
#include "PasswordLock.h"
#include <avr/io.h>

int main(void)
{
	PasswordLock_voidInit(); 
     c10:	0e 94 fd 01 	call	0x3fa	; 0x3fa <PasswordLock_voidInit>
    while (1) 
    {
		PasswordLock_voidStart();
     c14:	0e 94 61 02 	call	0x4c2	; 0x4c2 <PasswordLock_voidStart>
     c18:	fd cf       	rjmp	.-6      	; 0xc14 <main+0x4>

00000c1a <dio_vidConfigChannel>:
	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	21 f1       	breq	.+72     	; 0xc66 <dio_vidConfigChannel+0x4c>
     c1e:	30 f0       	brcs	.+12     	; 0xc2c <dio_vidConfigChannel+0x12>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	f1 f1       	breq	.+124    	; 0xca0 <dio_vidConfigChannel+0x86>
     c24:	83 30       	cpi	r24, 0x03	; 3
     c26:	09 f4       	brne	.+2      	; 0xc2a <dio_vidConfigChannel+0x10>
     c28:	58 c0       	rjmp	.+176    	; 0xcda <dio_vidConfigChannel+0xc0>
     c2a:	08 95       	ret
     c2c:	41 30       	cpi	r20, 0x01	; 1
     c2e:	59 f4       	brne	.+22     	; 0xc46 <dio_vidConfigChannel+0x2c>
     c30:	2a b3       	in	r18, 0x1a	; 26
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <dio_vidConfigChannel+0x22>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	6a 95       	dec	r22
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <dio_vidConfigChannel+0x1e>
     c40:	82 2b       	or	r24, r18
     c42:	8a bb       	out	0x1a, r24	; 26
     c44:	08 95       	ret
     c46:	2a b3       	in	r18, 0x1a	; 26
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <dio_vidConfigChannel+0x38>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	6a 95       	dec	r22
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <dio_vidConfigChannel+0x34>
     c56:	80 95       	com	r24
     c58:	92 2f       	mov	r25, r18
     c5a:	98 23       	and	r25, r24
     c5c:	9a bb       	out	0x1a, r25	; 26
     c5e:	9b b3       	in	r25, 0x1b	; 27
     c60:	89 23       	and	r24, r25
     c62:	8b bb       	out	0x1b, r24	; 27
     c64:	08 95       	ret
     c66:	41 30       	cpi	r20, 0x01	; 1
     c68:	59 f4       	brne	.+22     	; 0xc80 <dio_vidConfigChannel+0x66>
     c6a:	27 b3       	in	r18, 0x17	; 23
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <dio_vidConfigChannel+0x5c>
     c72:	88 0f       	add	r24, r24
     c74:	99 1f       	adc	r25, r25
     c76:	6a 95       	dec	r22
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <dio_vidConfigChannel+0x58>
     c7a:	82 2b       	or	r24, r18
     c7c:	87 bb       	out	0x17, r24	; 23
     c7e:	08 95       	ret
     c80:	27 b3       	in	r18, 0x17	; 23
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <dio_vidConfigChannel+0x72>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	6a 95       	dec	r22
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <dio_vidConfigChannel+0x6e>
     c90:	80 95       	com	r24
     c92:	92 2f       	mov	r25, r18
     c94:	98 23       	and	r25, r24
     c96:	97 bb       	out	0x17, r25	; 23
     c98:	98 b3       	in	r25, 0x18	; 24
     c9a:	89 23       	and	r24, r25
     c9c:	88 bb       	out	0x18, r24	; 24
     c9e:	08 95       	ret
     ca0:	41 30       	cpi	r20, 0x01	; 1
     ca2:	59 f4       	brne	.+22     	; 0xcba <dio_vidConfigChannel+0xa0>
     ca4:	24 b3       	in	r18, 0x14	; 20
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <dio_vidConfigChannel+0x96>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	6a 95       	dec	r22
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <dio_vidConfigChannel+0x92>
     cb4:	82 2b       	or	r24, r18
     cb6:	84 bb       	out	0x14, r24	; 20
     cb8:	08 95       	ret
     cba:	24 b3       	in	r18, 0x14	; 20
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <dio_vidConfigChannel+0xac>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	6a 95       	dec	r22
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <dio_vidConfigChannel+0xa8>
     cca:	80 95       	com	r24
     ccc:	92 2f       	mov	r25, r18
     cce:	98 23       	and	r25, r24
     cd0:	94 bb       	out	0x14, r25	; 20
     cd2:	95 b3       	in	r25, 0x15	; 21
     cd4:	89 23       	and	r24, r25
     cd6:	85 bb       	out	0x15, r24	; 21
     cd8:	08 95       	ret
     cda:	41 30       	cpi	r20, 0x01	; 1
     cdc:	59 f4       	brne	.+22     	; 0xcf4 <dio_vidConfigChannel+0xda>
     cde:	21 b3       	in	r18, 0x11	; 17
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <dio_vidConfigChannel+0xd0>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	6a 95       	dec	r22
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <dio_vidConfigChannel+0xcc>
     cee:	82 2b       	or	r24, r18
     cf0:	81 bb       	out	0x11, r24	; 17
     cf2:	08 95       	ret
     cf4:	21 b3       	in	r18, 0x11	; 17
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <dio_vidConfigChannel+0xe6>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	6a 95       	dec	r22
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <dio_vidConfigChannel+0xe2>
     d04:	80 95       	com	r24
     d06:	92 2f       	mov	r25, r18
     d08:	98 23       	and	r25, r24
     d0a:	91 bb       	out	0x11, r25	; 17
     d0c:	92 b3       	in	r25, 0x12	; 18
     d0e:	89 23       	and	r24, r25
     d10:	82 bb       	out	0x12, r24	; 18
     d12:	08 95       	ret

00000d14 <dio_vidWriteChannel>:
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	01 f1       	breq	.+64     	; 0xd58 <dio_vidWriteChannel+0x44>
     d18:	30 f0       	brcs	.+12     	; 0xd26 <dio_vidWriteChannel+0x12>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	b1 f1       	breq	.+108    	; 0xd8a <dio_vidWriteChannel+0x76>
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	09 f4       	brne	.+2      	; 0xd24 <dio_vidWriteChannel+0x10>
     d22:	4c c0       	rjmp	.+152    	; 0xdbc <dio_vidWriteChannel+0xa8>
     d24:	08 95       	ret
     d26:	41 11       	cpse	r20, r1
     d28:	0c c0       	rjmp	.+24     	; 0xd42 <dio_vidWriteChannel+0x2e>
     d2a:	2b b3       	in	r18, 0x1b	; 27
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <dio_vidWriteChannel+0x22>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	6a 95       	dec	r22
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <dio_vidWriteChannel+0x1e>
     d3a:	80 95       	com	r24
     d3c:	82 23       	and	r24, r18
     d3e:	8b bb       	out	0x1b, r24	; 27
     d40:	08 95       	ret
     d42:	2b b3       	in	r18, 0x1b	; 27
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <dio_vidWriteChannel+0x3a>
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	6a 95       	dec	r22
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <dio_vidWriteChannel+0x36>
     d52:	82 2b       	or	r24, r18
     d54:	8b bb       	out	0x1b, r24	; 27
     d56:	08 95       	ret
     d58:	41 11       	cpse	r20, r1
     d5a:	0c c0       	rjmp	.+24     	; 0xd74 <dio_vidWriteChannel+0x60>
     d5c:	28 b3       	in	r18, 0x18	; 24
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <dio_vidWriteChannel+0x54>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	6a 95       	dec	r22
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <dio_vidWriteChannel+0x50>
     d6c:	80 95       	com	r24
     d6e:	82 23       	and	r24, r18
     d70:	88 bb       	out	0x18, r24	; 24
     d72:	08 95       	ret
     d74:	28 b3       	in	r18, 0x18	; 24
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <dio_vidWriteChannel+0x6c>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	6a 95       	dec	r22
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <dio_vidWriteChannel+0x68>
     d84:	82 2b       	or	r24, r18
     d86:	88 bb       	out	0x18, r24	; 24
     d88:	08 95       	ret
     d8a:	41 11       	cpse	r20, r1
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <dio_vidWriteChannel+0x92>
     d8e:	25 b3       	in	r18, 0x15	; 21
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <dio_vidWriteChannel+0x86>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	6a 95       	dec	r22
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <dio_vidWriteChannel+0x82>
     d9e:	80 95       	com	r24
     da0:	82 23       	and	r24, r18
     da2:	85 bb       	out	0x15, r24	; 21
     da4:	08 95       	ret
     da6:	25 b3       	in	r18, 0x15	; 21
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <dio_vidWriteChannel+0x9e>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	6a 95       	dec	r22
     db4:	e2 f7       	brpl	.-8      	; 0xdae <dio_vidWriteChannel+0x9a>
     db6:	82 2b       	or	r24, r18
     db8:	85 bb       	out	0x15, r24	; 21
     dba:	08 95       	ret
     dbc:	41 11       	cpse	r20, r1
     dbe:	0c c0       	rjmp	.+24     	; 0xdd8 <dio_vidWriteChannel+0xc4>
     dc0:	22 b3       	in	r18, 0x12	; 18
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <dio_vidWriteChannel+0xb8>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	6a 95       	dec	r22
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <dio_vidWriteChannel+0xb4>
     dd0:	80 95       	com	r24
     dd2:	82 23       	and	r24, r18
     dd4:	82 bb       	out	0x12, r24	; 18
     dd6:	08 95       	ret
     dd8:	22 b3       	in	r18, 0x12	; 18
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <dio_vidWriteChannel+0xd0>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	6a 95       	dec	r22
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <dio_vidWriteChannel+0xcc>
     de8:	82 2b       	or	r24, r18
     dea:	82 bb       	out	0x12, r24	; 18
     dec:	08 95       	ret

00000dee <dio_dioLevelReadChannel>:
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	dio_level_t LOC_u8PinValue = STD_HIGH; 
	// Check Input Range
	if(channel >= DIO_PIN0 && channel <= DIO_PIN7)
     dee:	68 30       	cpi	r22, 0x08	; 8
     df0:	60 f5       	brcc	.+88     	; 0xe4a <dio_dioLevelReadChannel+0x5c>
	{
		switch(port)
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	79 f0       	breq	.+30     	; 0xe14 <dio_dioLevelReadChannel+0x26>
     df6:	28 f0       	brcs	.+10     	; 0xe02 <dio_dioLevelReadChannel+0x14>
     df8:	82 30       	cpi	r24, 0x02	; 2
     dfa:	a9 f0       	breq	.+42     	; 0xe26 <dio_dioLevelReadChannel+0x38>
     dfc:	83 30       	cpi	r24, 0x03	; 3
     dfe:	e1 f0       	breq	.+56     	; 0xe38 <dio_dioLevelReadChannel+0x4a>
     e00:	26 c0       	rjmp	.+76     	; 0xe4e <dio_dioLevelReadChannel+0x60>
		{
			case DIO_PORTA :
				LOC_u8PinValue =   CHECK_BIT(DIO_PINA_REG,channel);
     e02:	89 b3       	in	r24, 0x19	; 25
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <dio_dioLevelReadChannel+0x1e>
     e08:	95 95       	asr	r25
     e0a:	87 95       	ror	r24
     e0c:	6a 95       	dec	r22
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <dio_dioLevelReadChannel+0x1a>
     e10:	81 70       	andi	r24, 0x01	; 1
				break ;
     e12:	08 95       	ret
			case DIO_PORTB : 
				LOC_u8PinValue =   CHECK_BIT(DIO_PINB_REG,channel);
     e14:	86 b3       	in	r24, 0x16	; 22
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <dio_dioLevelReadChannel+0x30>
     e1a:	95 95       	asr	r25
     e1c:	87 95       	ror	r24
     e1e:	6a 95       	dec	r22
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <dio_dioLevelReadChannel+0x2c>
     e22:	81 70       	andi	r24, 0x01	; 1
				break ;
     e24:	08 95       	ret
			case DIO_PORTC :
				LOC_u8PinValue =   CHECK_BIT(DIO_PINC_REG,channel);
     e26:	83 b3       	in	r24, 0x13	; 19
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <dio_dioLevelReadChannel+0x42>
     e2c:	95 95       	asr	r25
     e2e:	87 95       	ror	r24
     e30:	6a 95       	dec	r22
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <dio_dioLevelReadChannel+0x3e>
     e34:	81 70       	andi	r24, 0x01	; 1
				break ;
     e36:	08 95       	ret
			case DIO_PORTD :
				LOC_u8PinValue =   CHECK_BIT(DIO_PIND_REG,channel);
     e38:	80 b3       	in	r24, 0x10	; 16
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <dio_dioLevelReadChannel+0x54>
     e3e:	95 95       	asr	r25
     e40:	87 95       	ror	r24
     e42:	6a 95       	dec	r22
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <dio_dioLevelReadChannel+0x50>
     e46:	81 70       	andi	r24, 0x01	; 1
				break ;
     e48:	08 95       	ret
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */
	dio_level_t LOC_u8PinValue = STD_HIGH; 
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 95       	ret
     e4e:	81 e0       	ldi	r24, 0x01	; 1
				break ;
			default : break;
		}
	}
	return LOC_u8PinValue; 
}
     e50:	08 95       	ret

00000e52 <Timer_voidInitTimer1>:
        // <TODO ERROR> This Feature supported only for timer1
    }
}
void Timer_voidGetFlagsRegStatus(u8 * ptr_u8Reg)
{
	* ptr_u8Reg = TIM_TIFR ; 
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	79 f0       	breq	.+30     	; 0xe74 <Timer_voidInitTimer1+0x22>
     e56:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <GLOBAL_ptrToTimer1UserConf+0x1>
     e5a:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <GLOBAL_ptrToTimer1UserConf>
     e5e:	1f bc       	out	0x2f, r1	; 47
     e60:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <GLOBAL_ptrToTimer1UserConf>
     e64:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <GLOBAL_ptrToTimer1UserConf+0x1>
     e68:	80 81       	ld	r24, Z
     e6a:	88 30       	cpi	r24, 0x08	; 8
     e6c:	19 f4       	brne	.+6      	; 0xe74 <Timer_voidInitTimer1+0x22>
     e6e:	8e b5       	in	r24, 0x2e	; 46
     e70:	88 60       	ori	r24, 0x08	; 8
     e72:	8e bd       	out	0x2e, r24	; 46
     e74:	08 95       	ret

00000e76 <Timer_voidStartTimer>:
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	b1 f0       	breq	.+44     	; 0xea6 <Timer_voidStartTimer+0x30>
     e7a:	18 f0       	brcs	.+6      	; 0xe82 <Timer_voidStartTimer+0xc>
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	39 f1       	breq	.+78     	; 0xece <Timer_voidStartTimer+0x58>
     e80:	08 95       	ret
     e82:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GLOBAL_ptrToTimer0UserConf>
     e86:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <GLOBAL_ptrToTimer0UserConf+0x1>
     e8a:	89 2b       	or	r24, r25
     e8c:	d9 f1       	breq	.+118    	; 0xf04 <Timer_voidStartTimer+0x8e>
     e8e:	83 b7       	in	r24, 0x33	; 51
     e90:	88 7f       	andi	r24, 0xF8	; 248
     e92:	83 bf       	out	0x33, r24	; 51
     e94:	93 b7       	in	r25, 0x33	; 51
     e96:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <GLOBAL_ptrToTimer0UserConf>
     e9a:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <GLOBAL_ptrToTimer0UserConf+0x1>
     e9e:	81 81       	ldd	r24, Z+1	; 0x01
     ea0:	89 2b       	or	r24, r25
     ea2:	83 bf       	out	0x33, r24	; 51
     ea4:	08 95       	ret
     ea6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <GLOBAL_ptrToTimer1UserConf>
     eaa:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <GLOBAL_ptrToTimer1UserConf+0x1>
     eae:	89 2b       	or	r24, r25
     eb0:	49 f1       	breq	.+82     	; 0xf04 <Timer_voidStartTimer+0x8e>
     eb2:	8e b5       	in	r24, 0x2e	; 46
     eb4:	88 7f       	andi	r24, 0xF8	; 248
     eb6:	8e bd       	out	0x2e, r24	; 46
     eb8:	1f bc       	out	0x2f, r1	; 47
     eba:	1e bc       	out	0x2e, r1	; 46
     ebc:	9e b5       	in	r25, 0x2e	; 46
     ebe:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <GLOBAL_ptrToTimer1UserConf>
     ec2:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <GLOBAL_ptrToTimer1UserConf+0x1>
     ec6:	81 81       	ldd	r24, Z+1	; 0x01
     ec8:	89 2b       	or	r24, r25
     eca:	8e bd       	out	0x2e, r24	; 46
     ecc:	08 95       	ret
     ece:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <GLOBAL_ptrToTimer2UserConf>
     ed2:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <GLOBAL_ptrToTimer2UserConf+0x1>
     ed6:	89 2b       	or	r24, r25
     ed8:	a9 f0       	breq	.+42     	; 0xf04 <Timer_voidStartTimer+0x8e>
     eda:	85 b5       	in	r24, 0x25	; 37
     edc:	88 7f       	andi	r24, 0xF8	; 248
     ede:	85 bd       	out	0x25, r24	; 37
     ee0:	95 b5       	in	r25, 0x25	; 37
     ee2:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <GLOBAL_ptrToTimer2UserConf>
     ee6:	f0 91 ba 01 	lds	r31, 0x01BA	; 0x8001ba <GLOBAL_ptrToTimer2UserConf+0x1>
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	89 2b       	or	r24, r25
     eee:	85 bd       	out	0x25, r24	; 37
     ef0:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <GLOBAL_ptrToTimer2UserConf>
     ef4:	f0 91 ba 01 	lds	r31, 0x01BA	; 0x8001ba <GLOBAL_ptrToTimer2UserConf+0x1>
     ef8:	80 81       	ld	r24, Z
     efa:	88 23       	and	r24, r24
     efc:	19 f0       	breq	.+6      	; 0xf04 <Timer_voidStartTimer+0x8e>
     efe:	02 b4       	in	r0, 0x22	; 34
     f00:	00 fc       	sbrc	r0, 0
     f02:	fd cf       	rjmp	.-6      	; 0xefe <Timer_voidStartTimer+0x88>
     f04:	08 95       	ret

00000f06 <Timer_voidStopTimer>:
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	41 f0       	breq	.+16     	; 0xf1a <Timer_voidStopTimer+0x14>
     f0a:	18 f0       	brcs	.+6      	; 0xf12 <Timer_voidStopTimer+0xc>
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	49 f0       	breq	.+18     	; 0xf22 <Timer_voidStopTimer+0x1c>
     f10:	08 95       	ret
     f12:	83 b7       	in	r24, 0x33	; 51
     f14:	88 7f       	andi	r24, 0xF8	; 248
     f16:	83 bf       	out	0x33, r24	; 51
     f18:	08 95       	ret
     f1a:	8e b5       	in	r24, 0x2e	; 46
     f1c:	88 7f       	andi	r24, 0xF8	; 248
     f1e:	8e bd       	out	0x2e, r24	; 46
     f20:	08 95       	ret
     f22:	85 b5       	in	r24, 0x25	; 37
     f24:	88 7f       	andi	r24, 0xF8	; 248
     f26:	85 bd       	out	0x25, r24	; 37
     f28:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <GLOBAL_ptrToTimer2UserConf>
     f2c:	f0 91 ba 01 	lds	r31, 0x01BA	; 0x8001ba <GLOBAL_ptrToTimer2UserConf+0x1>
     f30:	80 81       	ld	r24, Z
     f32:	88 23       	and	r24, r24
     f34:	19 f0       	breq	.+6      	; 0xf3c <Timer_voidStopTimer+0x36>
     f36:	02 b4       	in	r0, 0x22	; 34
     f38:	00 fc       	sbrc	r0, 0
     f3a:	fd cf       	rjmp	.-6      	; 0xf36 <Timer_voidStopTimer+0x30>
     f3c:	08 95       	ret

00000f3e <Timer_voidSetCompareValue>:
     f3e:	88 23       	and	r24, r24
     f40:	19 f0       	breq	.+6      	; 0xf48 <Timer_voidSetCompareValue+0xa>
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	39 f0       	breq	.+14     	; 0xf54 <Timer_voidSetCompareValue+0x16>
     f46:	08 95       	ret
     f48:	6f 3f       	cpi	r22, 0xFF	; 255
     f4a:	71 05       	cpc	r23, r1
     f4c:	09 f0       	breq	.+2      	; 0xf50 <Timer_voidSetCompareValue+0x12>
     f4e:	20 f4       	brcc	.+8      	; 0xf58 <Timer_voidSetCompareValue+0x1a>
     f50:	6c bf       	out	0x3c, r22	; 60
     f52:	08 95       	ret
     f54:	7b bd       	out	0x2b, r23	; 43
     f56:	6a bd       	out	0x2a, r22	; 42
     f58:	08 95       	ret

00000f5a <Timer_voidSetCompareMatchCallback>:
     f5a:	61 15       	cp	r22, r1
     f5c:	71 05       	cpc	r23, r1
     f5e:	71 f0       	breq	.+28     	; 0xf7c <Timer_voidSetCompareMatchCallback+0x22>
     f60:	88 23       	and	r24, r24
     f62:	19 f0       	breq	.+6      	; 0xf6a <Timer_voidSetCompareMatchCallback+0x10>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	31 f0       	breq	.+12     	; 0xf74 <Timer_voidSetCompareMatchCallback+0x1a>
     f68:	08 95       	ret
     f6a:	70 93 d6 01 	sts	0x01D6, r23	; 0x8001d6 <TIMER0_CTC_CallBack_Periodic+0x1>
     f6e:	60 93 d5 01 	sts	0x01D5, r22	; 0x8001d5 <TIMER0_CTC_CallBack_Periodic>
     f72:	08 95       	ret
     f74:	70 93 d8 01 	sts	0x01D8, r23	; 0x8001d8 <TIMER1_CTCA_Callback+0x1>
     f78:	60 93 d7 01 	sts	0x01D7, r22	; 0x8001d7 <TIMER1_CTCA_Callback>
     f7c:	08 95       	ret

00000f7e <Timer_voidSetCompMatchInterrupState>:
     f7e:	88 23       	and	r24, r24
     f80:	19 f0       	breq	.+6      	; 0xf88 <Timer_voidSetCompMatchInterrupState+0xa>
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	49 f0       	breq	.+18     	; 0xf98 <Timer_voidSetCompMatchInterrupState+0x1a>
     f86:	08 95       	ret
     f88:	89 b7       	in	r24, 0x39	; 57
     f8a:	8d 7f       	andi	r24, 0xFD	; 253
     f8c:	89 bf       	out	0x39, r24	; 57
     f8e:	89 b7       	in	r24, 0x39	; 57
     f90:	66 0f       	add	r22, r22
     f92:	68 2b       	or	r22, r24
     f94:	69 bf       	out	0x39, r22	; 57
     f96:	08 95       	ret
     f98:	89 b7       	in	r24, 0x39	; 57
     f9a:	8f 7e       	andi	r24, 0xEF	; 239
     f9c:	89 bf       	out	0x39, r24	; 57
     f9e:	89 b7       	in	r24, 0x39	; 57
     fa0:	90 e1       	ldi	r25, 0x10	; 16
     fa2:	69 9f       	mul	r22, r25
     fa4:	b0 01       	movw	r22, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	68 2b       	or	r22, r24
     faa:	69 bf       	out	0x39, r22	; 57
     fac:	08 95       	ret

00000fae <__vector_10>:
}
/******************************************************************************
* Private Function Definitions
*******************************************************************************/
void __vector_10(void)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	11 24       	eor	r1, r1
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
    static u16 copy_u16NumberofOverflows = 0 ;  
    if(Global_u8Timer0Interval == PERIODIC)
     fd0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <Global_u8Timer0Interval>
     fd4:	81 11       	cpse	r24, r1
     fd6:	1b c0       	rjmp	.+54     	; 0x100e <__vector_10+0x60>
    {
        // Default 
       if(copy_u16NumberofOverflows < Global_u16NumberOfOverflowsInCTC)
     fd8:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <copy_u16NumberofOverflows.2061>
     fdc:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <copy_u16NumberofOverflows.2061+0x1>
     fe0:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <Global_u16NumberOfOverflowsInCTC>
     fe4:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <Global_u16NumberOfOverflowsInCTC+0x1>
     fe8:	82 17       	cp	r24, r18
     fea:	93 07       	cpc	r25, r19
     fec:	30 f4       	brcc	.+12     	; 0xffa <__vector_10+0x4c>
        {
            copy_u16NumberofOverflows++  ;     
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <copy_u16NumberofOverflows.2061+0x1>
     ff4:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <copy_u16NumberofOverflows.2061>
     ff8:	3a c0       	rjmp	.+116    	; 0x106e <__vector_10+0xc0>
        }
        else 
        {
            // Call ISR 
            TIMER0_CTC_CallBack_Periodic(); 
     ffa:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <TIMER0_CTC_CallBack_Periodic>
     ffe:	f0 91 d6 01 	lds	r31, 0x01D6	; 0x8001d6 <TIMER0_CTC_CallBack_Periodic+0x1>
    1002:	09 95       	icall
            //  Reset Number overflow
            copy_u16NumberofOverflows = 0 ; 
    1004:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <copy_u16NumberofOverflows.2061+0x1>
    1008:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <copy_u16NumberofOverflows.2061>
    100c:	30 c0       	rjmp	.+96     	; 0x106e <__vector_10+0xc0>
        }   
    }
    else if(Global_u8Timer0Interval == SINGLE)
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	f1 f4       	brne	.+60     	; 0x104e <__vector_10+0xa0>
    {
        //Single 
        if(copy_u16NumberofOverflows < Global_u16NumberOfOverflowsInCTC)
    1012:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <copy_u16NumberofOverflows.2061>
    1016:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <copy_u16NumberofOverflows.2061+0x1>
    101a:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <Global_u16NumberOfOverflowsInCTC>
    101e:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <Global_u16NumberOfOverflowsInCTC+0x1>
    1022:	82 17       	cp	r24, r18
    1024:	93 07       	cpc	r25, r19
    1026:	30 f4       	brcc	.+12     	; 0x1034 <__vector_10+0x86>
        {
            copy_u16NumberofOverflows++  ;     
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <copy_u16NumberofOverflows.2061+0x1>
    102e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <copy_u16NumberofOverflows.2061>
    1032:	1d c0       	rjmp	.+58     	; 0x106e <__vector_10+0xc0>
        }
        else 
        {
            // Call ISR 
            TIMER0_CTC_CallBack_Single(); 
    1034:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <TIMER0_CTC_CallBack_Single>
    1038:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <TIMER0_CTC_CallBack_Single+0x1>
    103c:	09 95       	icall
            //  Reset Number overflow
            copy_u16NumberofOverflows = 0 ; 
    103e:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <copy_u16NumberofOverflows.2061+0x1>
    1042:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <copy_u16NumberofOverflows.2061>
			Timer_voidStopTimer(TIMER0);
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0e 94 83 07 	call	0xf06	; 0xf06 <Timer_voidStopTimer>
    104c:	10 c0       	rjmp	.+32     	; 0x106e <__vector_10+0xc0>
        }
    }
    else
    {
        // PWM Mode
        if(Global_u8PWM_State == PWM_HIGH_PER)
    104e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Global_u8PWM_State>
    1052:	81 11       	cpse	r24, r1
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <__vector_10+0xb6>
        {
            /*  Load OCR0 with Tlow */
            TIM_OCR0 = Global_u8PWM_Toff ;
    1056:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <Global_u8PWM_Toff>
    105a:	8c bf       	out	0x3c, r24	; 60
            /*  Set Next State Flag */ 
            Global_u8PWM_State = PWM_LOW_PER ; 
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Global_u8PWM_State>
    1062:	05 c0       	rjmp	.+10     	; 0x106e <__vector_10+0xc0>
        }
        else
        {            
            /*  Load OCR0 with Tlow */
            TIM_OCR0 = Global_u8PWM_Ton ;
    1064:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <Global_u8PWM_Ton>
    1068:	8c bf       	out	0x3c, r24	; 60
            /*  Set Next State Flag */ 
            Global_u8PWM_State = PWM_HIGH_PER ;
    106a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <Global_u8PWM_State>
        }
    }
    //Clear Compare Match Interrupt Fag
    TIM_TIFR = (1<<TIFR_OCF0);
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	88 bf       	out	0x38, r24	; 56
}
    1072:	ff 91       	pop	r31
    1074:	ef 91       	pop	r30
    1076:	bf 91       	pop	r27
    1078:	af 91       	pop	r26
    107a:	9f 91       	pop	r25
    107c:	8f 91       	pop	r24
    107e:	7f 91       	pop	r23
    1080:	6f 91       	pop	r22
    1082:	5f 91       	pop	r21
    1084:	4f 91       	pop	r20
    1086:	3f 91       	pop	r19
    1088:	2f 91       	pop	r18
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f 90       	pop	r0
    1090:	1f 90       	pop	r1
    1092:	18 95       	reti

00001094 <__vector_11>:

void __vector_11(void)
{
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
	TIMER0_OV_CallBack();
    10b6:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <TIMER0_OV_CallBack>
    10ba:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <TIMER0_OV_CallBack+0x1>
    10be:	09 95       	icall


    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV0);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	88 bf       	out	0x38, r24	; 56
}
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_9>:
    }
    return (copy_u16MaxCounterVal- 20 + LOC_u8Index ) ;
}

void __vector_9(void)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    TIMER1_OV_CallBack(); 
    1108:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <TIMER1_OV_CallBack>
    110c:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <TIMER1_OV_CallBack+0x1>
    1110:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV1);
    1112:	84 e0       	ldi	r24, 0x04	; 4
    1114:	88 bf       	out	0x38, r24	; 56
}
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	0f 90       	pop	r0
    1134:	1f 90       	pop	r1
    1136:	18 95       	reti

00001138 <__vector_4>:
void __vector_4(void)
{
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
    TIMER2_OV_CallBack(); 
    115a:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <TIMER2_OV_CallBack>
    115e:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <TIMER2_OV_CallBack+0x1>
    1162:	09 95       	icall
    //Clear OverFlow flag
    TIM_TIFR=(1<<TIFR_TOV2);
    1164:	80 e4       	ldi	r24, 0x40	; 64
    1166:	88 bf       	out	0x38, r24	; 56
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <__vector_6>:
void __vector_6(void)
{
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	TIMER1_IC_Callback();
    11ac:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <TIMER1_IC_Callback>
    11b0:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <TIMER1_IC_Callback+0x1>
    11b4:	09 95       	icall
    TIM_TIFR=(1<<TIFR_ICF1);
    11b6:	80 e2       	ldi	r24, 0x20	; 32
    11b8:	88 bf       	out	0x38, r24	; 56
}
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <__vector_7>:
void __vector_7(void)
{
    11dc:	1f 92       	push	r1
    11de:	0f 92       	push	r0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	0f 92       	push	r0
    11e4:	11 24       	eor	r1, r1
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
	TIMER1_CTCA_Callback();
    11fe:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <TIMER1_CTCA_Callback>
    1202:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <TIMER1_CTCA_Callback+0x1>
    1206:	09 95       	icall
	TIM_TIFR=(1<<TIFR_OCF1A);
    1208:	80 e1       	ldi	r24, 0x10	; 16
    120a:	88 bf       	out	0x38, r24	; 56
}
    120c:	ff 91       	pop	r31
    120e:	ef 91       	pop	r30
    1210:	bf 91       	pop	r27
    1212:	af 91       	pop	r26
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	7f 91       	pop	r23
    121a:	6f 91       	pop	r22
    121c:	5f 91       	pop	r21
    121e:	4f 91       	pop	r20
    1220:	3f 91       	pop	r19
    1222:	2f 91       	pop	r18
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <I2C_MasterInit>:
		SET_BIT(I2C_TWAR_REG,TWGCE);
    /* I2C Bus Slave Address	*/
		I2C_TWAR_REG|=(addr<<1);
    /* enable I2C Module	*/
	/*	enable ACK check	*/
		I2C_TWCR_REG|=(1<<TWEA);
    122e:	8c e0       	ldi	r24, 0x0C	; 12
    1230:	80 b9       	out	0x00, r24	; 0
    1232:	86 b7       	in	r24, 0x36	; 54
    1234:	84 60       	ori	r24, 0x04	; 4
    1236:	86 bf       	out	0x36, r24	; 54
    1238:	08 95       	ret

0000123a <I2C_StartCondition>:
}
boolean I2C_StartCondition(void)
{
	/*	send start condition	*/
		I2C_TWCR_REG|=(1<<TWSTA)|(1<<TWINT);
    123a:	86 b7       	in	r24, 0x36	; 54
    123c:	80 6a       	ori	r24, 0xA0	; 160
    123e:	86 bf       	out	0x36, r24	; 54
    /*	Wait until start condition sent successfully	*/
		while(!CHECK_BIT(I2C_TWCR_REG,TWINT));
    1240:	06 b6       	in	r0, 0x36	; 54
    1242:	07 fe       	sbrs	r0, 7
    1244:	fd cf       	rjmp	.-6      	; 0x1240 <I2C_StartCondition+0x6>
		//CLEAR_BIT(I2C_TWCR_REG,TWSTA);
	/*	check I2C status then return ture or false	*/
		if((I2C_TWSR_REG&0xf8)!=0x08)
    1246:	91 b1       	in	r25, 0x01	; 1
    1248:	98 7f       	andi	r25, 0xF8	; 248
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	98 30       	cpi	r25, 0x08	; 8
    124e:	09 f0       	breq	.+2      	; 0x1252 <I2C_StartCondition+0x18>
    1250:	80 e0       	ldi	r24, 0x00	; 0
		{
			return FALSE;
		}
    return TRUE;
}
    1252:	08 95       	ret

00001254 <I2C_RepeatedStartCondition>:
boolean I2C_RepeatedStartCondition(void)
{
	/*	send start condition	*/
	I2C_TWCR_REG|=(1<<TWSTA)|(1<<TWINT);
    1254:	86 b7       	in	r24, 0x36	; 54
    1256:	80 6a       	ori	r24, 0xA0	; 160
    1258:	86 bf       	out	0x36, r24	; 54
	/*	Wait until start condition sent successfully	*/
	//_delay_ms(5);
	while(CHECK_BIT(I2C_TWCR_REG,TWINT)==0);
    125a:	06 b6       	in	r0, 0x36	; 54
    125c:	07 fe       	sbrs	r0, 7
    125e:	fd cf       	rjmp	.-6      	; 0x125a <I2C_RepeatedStartCondition+0x6>
    return I2C_TWDR_REG;
}
u8 I2C_ReadStatus(void)
{
    u8 status;
    status = I2C_TWSR_REG & 0xF8; // 1111 1000
    1260:	91 b1       	in	r25, 0x01	; 1
    1262:	98 7f       	andi	r25, 0xF8	; 248
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 31       	cpi	r25, 0x10	; 16
    1268:	09 f0       	breq	.+2      	; 0x126c <I2C_RepeatedStartCondition+0x18>
    126a:	80 e0       	ldi	r24, 0x00	; 0
	if(I2C_ReadStatus()!=0x10)
	{
		return FALSE;
	}
	return TRUE;
}
    126c:	08 95       	ret

0000126e <I2C_StopCondition>:
void I2C_StopCondition(void)
{
	/*	send stop condition	*/
			I2C_TWCR_REG|=(1<<TWSTO)|(1<<TWINT);
    126e:	86 b7       	in	r24, 0x36	; 54
    1270:	80 69       	ori	r24, 0x90	; 144
    1272:	86 bf       	out	0x36, r24	; 54
    1274:	08 95       	ret

00001276 <I2C_WriteByte>:
		
}
void I2C_WriteByte(u8 data)
{
    /*	Put data On I2C data Register	*/
		I2C_TWDR_REG=data;
    1276:	83 b9       	out	0x03, r24	; 3
	/*trigger data send*/
		CLEAR_BIT(I2C_TWCR_REG,TWSTA);
    1278:	86 b7       	in	r24, 0x36	; 54
    127a:	8f 7d       	andi	r24, 0xDF	; 223
    127c:	86 bf       	out	0x36, r24	; 54
		I2C_TWCR_REG|=(1<<TWINT);
    127e:	86 b7       	in	r24, 0x36	; 54
    1280:	80 68       	ori	r24, 0x80	; 128
    1282:	86 bf       	out	0x36, r24	; 54


	/*	Wait until data sent successfully	*/
		while(!CHECK_BIT(I2C_TWCR_REG,TWINT));
    1284:	06 b6       	in	r0, 0x36	; 54
    1286:	07 fe       	sbrs	r0, 7
    1288:	fd cf       	rjmp	.-6      	; 0x1284 <I2C_WriteByte+0xe>
}
    128a:	08 95       	ret

0000128c <I2C_Send_SlaveAddressWriteOperation>:
boolean I2C_Send_SlaveAddressWriteOperation(u8 addr)
{
		

		/*	prepare address+W	*/
			I2C_TWDR_REG=addr<<1;
    128c:	88 0f       	add	r24, r24
    128e:	83 b9       	out	0x03, r24	; 3
		/*	send addr+W on i2c	*/
		I2C_TWCR_REG|=(1<<TWINT);
    1290:	86 b7       	in	r24, 0x36	; 54
    1292:	80 68       	ori	r24, 0x80	; 128
    1294:	86 bf       	out	0x36, r24	; 54
		while(!CHECK_BIT(I2C_TWCR_REG,TWINT));
    1296:	06 b6       	in	r0, 0x36	; 54
    1298:	07 fe       	sbrs	r0, 7
    129a:	fd cf       	rjmp	.-6      	; 0x1296 <I2C_Send_SlaveAddressWriteOperation+0xa>
		/*	check I2C status then return ture or false	*/
		//LCD_WriteNumber(I2C_TWSR_REG&0xf8);
		if((I2C_TWSR_REG&0xf8)!=I2C_SLA_W_ACK)
    129c:	91 b1       	in	r25, 0x01	; 1
    129e:	98 7f       	andi	r25, 0xF8	; 248
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	98 31       	cpi	r25, 0x18	; 24
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <I2C_Send_SlaveAddressWriteOperation+0x1c>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
		{
			return FALSE;
		}
    return TRUE;

}
    12a8:	08 95       	ret

000012aa <I2C_Send_SlaveAddressReadOperation>:
		u8 add_write=0;
		/*	prepare address+W	*/
		add_write|=(addr<<1)|(0x01);
		
		/*	send addr+R on i2c	*/
		I2C_WriteByte(add_write);
    12aa:	88 0f       	add	r24, r24
    12ac:	81 60       	ori	r24, 0x01	; 1
    12ae:	0e 94 3b 09 	call	0x1276	; 0x1276 <I2C_WriteByte>
		/*	check I2C status then return ture or false	*/
		if((I2C_TWSR_REG&0xf8)!=I2C_SLA_R_ACK)
    12b2:	91 b1       	in	r25, 0x01	; 1
    12b4:	98 7f       	andi	r25, 0xF8	; 248
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 34       	cpi	r25, 0x40	; 64
    12ba:	09 f0       	breq	.+2      	; 0x12be <I2C_Send_SlaveAddressReadOperation+0x14>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
		{
			return FALSE;
		}
		return TRUE;
}
    12be:	08 95       	ret

000012c0 <I2C_ReadByte>:
u8 I2C_ReadByte(void)
{
	/*	Wait until data read successfully	*/
	CLEAR_BIT(I2C_TWCR_REG,TWSTA);
    12c0:	86 b7       	in	r24, 0x36	; 54
    12c2:	8f 7d       	andi	r24, 0xDF	; 223
    12c4:	86 bf       	out	0x36, r24	; 54
		I2C_TWCR_REG|=(1<<TWINT);
    12c6:	86 b7       	in	r24, 0x36	; 54
    12c8:	80 68       	ori	r24, 0x80	; 128
    12ca:	86 bf       	out	0x36, r24	; 54
		while(!CHECK_BIT(I2C_TWCR_REG,TWINT));
    12cc:	06 b6       	in	r0, 0x36	; 54
    12ce:	07 fe       	sbrs	r0, 7
    12d0:	fd cf       	rjmp	.-6      	; 0x12cc <I2C_ReadByte+0xc>
		
    return I2C_TWDR_REG;
    12d2:	83 b1       	in	r24, 0x03	; 3
}
    12d4:	08 95       	ret

000012d6 <__udivmodsi4>:
    12d6:	a1 e2       	ldi	r26, 0x21	; 33
    12d8:	1a 2e       	mov	r1, r26
    12da:	aa 1b       	sub	r26, r26
    12dc:	bb 1b       	sub	r27, r27
    12de:	fd 01       	movw	r30, r26
    12e0:	0d c0       	rjmp	.+26     	; 0x12fc <__udivmodsi4_ep>

000012e2 <__udivmodsi4_loop>:
    12e2:	aa 1f       	adc	r26, r26
    12e4:	bb 1f       	adc	r27, r27
    12e6:	ee 1f       	adc	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	a2 17       	cp	r26, r18
    12ec:	b3 07       	cpc	r27, r19
    12ee:	e4 07       	cpc	r30, r20
    12f0:	f5 07       	cpc	r31, r21
    12f2:	20 f0       	brcs	.+8      	; 0x12fc <__udivmodsi4_ep>
    12f4:	a2 1b       	sub	r26, r18
    12f6:	b3 0b       	sbc	r27, r19
    12f8:	e4 0b       	sbc	r30, r20
    12fa:	f5 0b       	sbc	r31, r21

000012fc <__udivmodsi4_ep>:
    12fc:	66 1f       	adc	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	88 1f       	adc	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	1a 94       	dec	r1
    1306:	69 f7       	brne	.-38     	; 0x12e2 <__udivmodsi4_loop>
    1308:	60 95       	com	r22
    130a:	70 95       	com	r23
    130c:	80 95       	com	r24
    130e:	90 95       	com	r25
    1310:	9b 01       	movw	r18, r22
    1312:	ac 01       	movw	r20, r24
    1314:	bd 01       	movw	r22, r26
    1316:	cf 01       	movw	r24, r30
    1318:	08 95       	ret

0000131a <_exit>:
    131a:	f8 94       	cli

0000131c <__stop_program>:
    131c:	ff cf       	rjmp	.-2      	; 0x131c <__stop_program>
